id,type,status,resolution,component,priority,reporter,created,assigned,assignee,resolved,created.1,assigned.1,summary,description,affected_version,fixed_version,votes,watches,description_words,assingnee_count,comment_count,commenter,Surprising,Dormant,Blocker,security,Performance,Breakage,commit_count,file_count,files,nsec,fsec
72,Bug,Closed,Fixed,camel-core,Major,Willem Jiang,2007/07/08 11:33:06 +0100,,Unassigned,2007/07/09 10:00:19 +0100,0.93556713,,FileConfigureTest can't pass in Windows box,Because of the File.separator is different between the unix and windows system. So the test can't pass in windows box.I just attached a patch for it. Please have a look at it  I tested it in windows box.,1.1.0,1.1.0,0,0,38,0,1,1,0,0,0,0,0,0,1,1,camel-core/src/test/java/org/apache/camel/component/file/FileConfigureTest.java;,0,0
84,Improvement,Closed,Fixed,camel-core,Major,Brian McCallister,2007/08/03 00:41:31 +0100,2008/05/21 18:50:34 +0100,Hadrian Zbarcea,2008/09/25 16:30:09 +0100,419.6587731,126.9024884,Throw Useful Exception on No TypeConverter Available,When there is no type converter available an NPE is thrown that requires tracing through sources to find root of problem,1.0.0,1.5.0,0,0,21,1,9,3,0,0,0,0,0,0,2,2,camel-core/src/main/java/org/apache/camel/NoTypeConversionAvailableException.java;camel-core/src/main/java/org/apache/camel/processor/ConvertBodyProcessor.java;,0,0
100,Improvement,Closed,Fixed,camel-activemq,Minor,Aaron Crickenberger,2007/08/13 20:28:46 +0100,,Unassigned,2007/09/04 11:05:01 +0100,21.60850694,,Most recent snapshot requires ActiveMQ,This may be moot given the projects' relationship  but it's a recently introduced side effect. Before the most recent snapshot  I was able to use Camel without any ActiveMQ jar's floating around so long as I never tried to use any 'activemq:queue:foo' URI's. Now with the most recent snapshot  the first time I do something that uses AnnotationTypeCoverterLoader  ActiveMQConverter gets loaded  and then causes a NoClassDefFoundError for ActiveMQDestination.,1.1.0,1.2.0,0,0,69,0,7,2,0,0,0,0,0,1,3,11,tests/camel-partial-classpath-test/pom.xml;tests/camel-partial-classpath-test/src/test/java/org/apache/camel/tests/partialclasspath/RouteTest.java;tests/camel-partial-classpath-test/src/test/resources/log4j.properties;tests/pom.xml;tests/camel-partial-classpath-test/src/test/java/org/apache/camel/tests/partialclasspath/MyBean.java;tests/camel-partial-classpath-test/src/test/java/org/apache/camel/tests/partialclasspath/MyConverter.java;tests/camel-partial-classpath-test/src/test/java/org/apache/camel/tests/partialclasspath/RouteTest.java;tests/camel-partial-classpath-test/src/test/resources/META-INF/services/org/apache/camel/TypeConverter;camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;tests/camel-partial-classpath-test/src/test/resources/log4j.properties;,0,0
112,Bug,Closed,Fixed,camel-activemq,Major,james strachan,2007/08/17 17:05:54 +0100,,Unassigned,2007/08/17 17:13:12 +0100,0.005069444,,JMSXGroupID is not copied across ActiveMQ endpoints,See thread: http://www.nabble.com/MethodName-in-header-is-ignored-by-beanRef%28%29-tf4285009s22882.html#a12198390,1.1.0,1.2.0,0,0,6,0,1,1,0,0,0,0,0,0,1,4,components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQReplyToHeaderUsingConverterTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;,0,0
132,Improvement,Closed,Fixed,camel-http,Major,james strachan,2007/08/31 12:12:02 +0100,,Unassigned,2007/08/31 12:43:21 +0100,0.021747685,,enable polling via the http component,enable polling via the http component,1.1.0,1.2.0,0,0,1,0,1,1,1,0,0,0,0,0,1,4,components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpPollingConsumer.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpPollingGetTest.java;,0,0
143,Improvement,Closed,Fixed,camel-core,Major,Dejan Predovic,2007/09/11 10:56:38 +0100,,Unassigned,2007/10/12 10:55:16 +0100,30.99905093,,XPath namespaces configuration not possible through xml,Xpath xml element offers no way to define namespace mappings.,1.1.0,1.3.0,0,0,10,0,1,1,1,0,0,0,0,0,2,12,camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java;camel-core/src/main/java/org/apache/camel/model/language/ElementAwareExpression.java;camel-core/src/main/java/org/apache/camel/model/language/XPathExpression.java;camel-core/src/main/java/org/apache/camel/spi/ElementAware.java;camel-core/src/test/java/org/apache/camel/builder/xml/XPathWithNamespacesFromDomTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringXPathFilterWithNamespaceTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/xpathFilterWithNamespace.xml;camel-core/src/main/java/org/apache/camel/model/language/ExpressionType.java;camel-core/src/main/java/org/apache/camel/model/language/XPathExpression.java;camel-core/src/test/java/org/apache/camel/processor/XPathFilterTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;,0,0
161,Bug,Closed,Fixed,,Trivial,Bozhong Lin,2007/09/28 05:04:46 +0100,2007/09/28 05:04:46 +0100,james strachan,2007/10/01 16:17:52 +0100,3.467430556,3.467430556,URL link broken in org.apache.camel.Processor API doc,'Message Transformer' link is broken.,1.1.0,1.2.0,0,0,5,1,1,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/Processor.java;,0,0
166,Bug,Closed,Fixed,camel-core,Blocker,Bozhong Lin,2007/10/09 06:24:42 +0100,,Unassigned,2007/10/10 18:40:18 +0100,1.510833333,,org.apache.camel.processor.UnitOfWorkWithAsyncFlowTest failure,Running org.apache.camel.processor.UnitOfWorkWithAsyncFlowTestTests run: 3  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 20.345 sec &lt;&lt;&lt; FAILURE!This prevents developer from building camel under Linux platform. Thanks!,1.1.0,1.2.0,0,0,25,0,3,2,0,0,0,0,0,0,2,3,camel-core/pom.xml;camel-core/pom.xml;camel-core/src/test/java/org/apache/camel/processor/UnitOfWorkTest.java;,0,0
199,Improvement,Closed,Fixed,camel-core,Minor,Gert Vanthienen,2007/11/02 08:11:47 +0100,,Unassigned,2007/11/16 18:38:25 +0100,14.43516204,,New converter : Node -> Source,Currently  there is no converter from Node -&gt; Source.It is required when using Camel's splitter() functionality inside ServiceMix:from('jbi:service:urn:eu:java:smx:fleetintegrator:camel') .splitter(xpath('/traces/trace')) .to('jbi:endpoint:urn:eu:java:smx:fleetintegrator:jms:mq');,1.2.0,1.3.0,0,0,30,0,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/test/java/org/apache/camel/converter/JaxpTest.java;,0,0
210,Bug,Closed,Fixed,camel-core,Major,Roman Kalukiewicz,2007/11/06 12:46:53 +0100,2007/11/06 12:46:53 +0100,Hadrian Zbarcea,2007/11/14 13:16:01 +0100,8.020231481,8.020231481,exception clause doesn't proceed with pipeline,Problem is very similar to CAMEL-191 but this time with exception clause.As exceptions are not cleared pipeline doesn't proceed.,1.3.0,1.3.0,0,0,29,1,4,3,1,0,0,0,0,0,2,5,camel-core/src/main/java/org/apache/camel/processor/Pipeline.java;camel-core/src/test/java/org/apache/camel/processor/PipelineTest.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/test/java/org/apache/camel/issues/ExceptionTest.java;,0,0
214,Bug,Closed,Fixed,,Major,james strachan,2007/11/13 13:20:42 +0100,2007/11/13 13:20:42 +0100,Hadrian Zbarcea,2008/03/31 22:26:54 +0100,139.3793056,139.3793056,the 1.2.0 release didnt' seem to include the javadocs or doc directory (or manual)!,I wondered if this was due to your machine Hiram having some dodgy maven plugin around or something?,1.2.0,1.3.0,0,0,18,1,4,3,1,0,0,0,0,0,0,0,,0,0
224,Bug,Closed,Fixed,camel-core,Major,Arjan Moraal,2007/11/16 09:33:43 +0100,,Unassigned,2007/11/16 19:01:12 +0100,0.394085648,,Headers lost after XSLT processing,After xslt processing the message headers are lost. See attached unit test  this test fails since revision 590680.http://svn.apache.org/viewvc?view=rev&amp;revision=590680,1.3.0,1.3.0,0,1,21,0,2,2,1,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;components/camel-juel/src/test/java/org/apache/camel/language/juel/issues/XsltLosesHeaderTest.java;,0,0
232,Bug,Closed,Fixed,camel-core,Major,Hadrian Zbarcea,2007/11/18 16:42:14 +0100,2007/11/18 16:42:14 +0100,Hadrian Zbarcea,2007/11/19 12:43:27 +0100,0.834178241,0.834178241,Fix performance counters,Fix performance counters,1.2.0,1.3.0,0,0,1,1,1,1,1,0,0,0,0,0,2,17,components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiComponentResolver.java;camel-core/src/main/java/org/apache/camel/Route.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/impl/RouteContext.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/ManagedEndpoint.java;camel-core/src/main/java/org/apache/camel/management/ManagedRoute.java;camel-core/src/main/java/org/apache/camel/management/ObjectNameEncoder.java;camel-core/src/main/java/org/apache/camel/model/FromType.java;camel-core/src/main/java/org/apache/camel/model/ResequencerType.java;camel-core/src/main/java/org/apache/camel/model/RouteType.java;camel-core/src/main/java/org/apache/camel/model/RoutesType.java;camel-core/src/main/java/org/apache/camel/spi/LifecycleStrategy.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingDefaultsTest.java;examples/camel-example-spring/src/main/resources/META-INF/spring/camel-context.xml;,0,0
237,Improvement,Closed,Fixed,camel-core,Major,Hadrian Zbarcea,2007/11/19 21:25:35 +0100,2007/11/19 21:25:35 +0100,Hadrian Zbarcea,2007/11/19 21:37:04 +0100,0.007974537,0.007974537,Upgrade geronimo-specs version to 1.1,from 1.0,1.2.0,1.3.0,0,0,2,1,1,1,0,0,0,0,0,0,1,1,pom.xml;,0,0
269,Improvement,Closed,Fixed,camel-core,Major,Donatello Santoro,2007/12/18 15:58:43 +0100,2008/01/21 06:29:05 +0100,Willem Jiang,2008/01/21 06:33:53 +0100,33.60775463,0.003333333,Add getter method for routeCollection property in RouteBuilder class,I need to stop a RouteBuilder. A solution for this issue could be access to routeCollection property in RouteBuilder class.,1.2.0,1.3.0,0,1,21,1,2,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/builder/RouteBuilder.java;,0,0
275,Improvement,Closed,Fixed,camel-cxf,Major,Freeman Fang,2007/12/25 09:27:20 +0100,,Unassigned,2008/01/04 09:59:46 +0100,10.02252315,,cxf camel transport should support to register itself to the cxf bus automatically,when cxf bus init  all tranports module on the classpath should register itself to the bus automatically.cxf machenism for this is just add a spring bean to describe the transport id and transport factory class mapping per as below&lt;beans xmlns='http://www.springframework.org/schema/beans' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:foo='http://cxf.apache.org/configuration/foo' xsi:schemaLocation=' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd'&gt; &lt;bean class='org.apache.camel.component.cxf.transport.CamelTransportFactory' lazy-init='true'&gt; &lt;property name='bus' ref='cxf'/&gt; &lt;property name='transportIds'&gt; &lt;list&gt; &lt;value&gt;http://cxf.apache.org/transports/camel&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt;,1.2.0,1.3.0,0,0,67,0,3,3,0,0,0,0,0,0,1,6,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java;components/camel-cxf/src/main/resources/META-INF/cxf/cxf-extension-camel.xml;components/camel-cxf/src/main/resources/META-INF/cxf/cxf.extension;components/camel-cxf/src/main/resources/bus-extensions.xml;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelTestSupport.java;,0,0
277,Bug,Closed,Fixed,camel-core,Major,J?r?me Delagnes,2007/12/26 14:16:52 +0100,2007/12/26 14:16:52 +0100,Hadrian Zbarcea,2008/01/18 13:49:46 +0100,22.98118056,22.98118056,[Spring integration] TheadType is missing in org/apache/camel/model/jaxb.index,TheadType is missing in org/apache/camel/model/jaxb.index =&gt; JAXB don't know how to unmarshall thread.Bug description found in Camel Users forum : http://www.nabble.com/Processor-thread-pool-td13212513s22882.html,1.2.0,1.3.0,0,0,24,1,3,3,0,0,0,0,0,0,1,1,camel-core/src/main/resources/org/apache/camel/model/jaxb.index;,0,0
278,Bug,Closed,Fixed,camel-spring,Major,J?r?me Delagnes,2007/12/26 14:30:52 +0100,,Unassigned,2008/01/18 13:53:28 +0100,22.97402778,,[Spring integration] Bad urls in META-INF/spring.schemas,http/://activemq.apache.org/camel/schema/spring/camel-spring-1.1.xsd becomes http/://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsdhttp/://activemq.apache.org/camel/schema/spring/camel-spring-1.2.xsd becomes http/://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsdThere's no camel-spring-1.1.xsd and camel-spring-1.2.xsd under http://activemq.apache.org/camel/schema/spring/,1.2.0,1.3.0,0,0,14,0,2,2,0,0,0,0,0,0,1,1,components/camel-spring/src/main/resources/META-INF/spring.schemas;,0,0
283,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2008/01/05 15:02:28 +0100,2008/01/21 06:59:56 +0100,Willem Jiang,2008/01/21 07:09:54 +0100,15.6718287,0.006921296,DeadLetterChannel - logging improvements when exchange handled by dead letter,The submitted patch have these improvements to the logger in deadletterchannel for delivery attempts outputs exchange id so we can correlate the lines in the log files. now also logs when the exchange could not be delivered and was handled by the failure processer (usually a deadletterchannel) minor issues with existing debug logging when sleeping (now also output millis) to be in line with other similar log lines in CamelI have not outputted the exchange itself (exchange.toString()) when the delivery could not be delivered successfully since there could be sensitive data in the exchange (e.g. an invoice input message) that we do not want to be logged in our log.But I think the logging of the exchange id is a good improvement and that they are aligned in the same position in the logline so it's easier to grep/find in the logs when you investigate and incident.,1.2.0,1.3.0,0,0,149,1,3,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;,1,1
286,Bug,Closed,Fixed,camel-cxf,Major,Wilson Freitas,2008/01/11 18:08:07 +0100,2008/01/12 08:21:51 +0100,Willem Jiang,2008/01/12 08:26:28 +0100,0.596076389,0.003206019,NullPointerException in CXF routes when there is an endpoint between router and service CXF endpoints,When an endpoint is added between a cxf router and a cxf service endpoint the message exchange is interrupted by a NullPointerException.Example code:----JAVA-BEGIN---------------------------------------------------------//This code worksfrom(StringUtils.join(cxfRouterURI)).to(StringUtils.join(cxfServiceURI)); // This code crashes (same problem with seda and log endpoints)String anyEndpoint = 'activemq:someQueue';----JAVA-END---------------------------------------------------------from(StringUtils.join(cxfRouterURI)).to(anyEndpoint).to(StringUtils.join(cxfServiceURI)); ----EXCEPTION-BEGIN-----------------------------------09/01/2008 18:32:40 org.apache.cxf.phase.PhaseInterceptorChain doInterceptINFO: Interceptor has thrown exception  unwinding noworg.apache.cxf.interceptor.Fault at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:137) at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:89) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:202) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:71) at org.apache.camel.component.cxf.interceptors.AbstractInvokerInterceptor.handleMessage(AbstractInvokerInterceptor.java:65) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.camel.component.cxf.CxfMessageObserver.onMessage(CxfMessageObserver.java:83) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:284) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:240) at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:313) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)Caused by: java.lang.NullPointerException at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ... 32 more ----EXCEPTION-END-----------------------------------Known workaround:Change the code like this:----JAVA-BEGIN--------------------------------------------------------- String anyEndpoint = 'activemq:someQueue'; from(StringUtils.join(cxfRouterURI)).process(new Processor(){ public void process(Exchange exchange) throws Exception { exchange.setOut(exchange.getIn()); } }).to(anyEndpoint).to(StringUtils.join(cxfServiceURI));----JAVA-END---------------------------------------------------------,1.2.0,1.3.0,0,1,148,1,2,2,0,0,0,1,0,0,1,5,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRouterTest.java;,0,0
288,Improvement,Closed,Fixed,camel-core,Major,Willem Jiang,2008/01/13 13:23:01 +0100,2008/01/13 13:23:01 +0100,Willem Jiang,2008/01/13 13:31:17 +0100,0.005740741,0.005740741,support to set the aggregation stragey of multicastProcessor,I have a use case   the router configuration could like this from('direct:a').multicast().to('direct:x'  'direct:y'  'direct:z');  from('direct:x').process(new AppendingProcessor('x')).to('direct:aggregater'); from('direct:y').process(new AppendingProcessor('y')).to('direct:aggregater'); from('direct:z').process(new AppendingProcessor('z')).to('direct:aggregater'); from('direct:aggregater').aggregator(header('cheese')  new BodyAggregatingStrategy()). completedPredicate(header('aggregated').isEqualTo(3)).to('mock:result');Now I send the message to endpoint 'direct:a' and I want to get the final result of the processors.And this requirement is much like the CAMEL-260.,1.2.0,1.3.0,0,0,56,1,3,2,0,0,0,0,0,0,1,7,camel-core/src/main/java/org/apache/camel/model/MulticastType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/model/SplitterType.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/test/java/org/apache/camel/processor/MultiCastAggregatorTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java;,0,0
291,Improvement,Closed,Fixed,camel-core,Major,Przemyslaw Budzik,2008/01/15 15:45:56 +0100,2008/01/15 15:45:56 +0100,Hadrian Zbarcea,2008/02/08 22:39:11 +0100,24.28697917,24.28697917,MulticastRecipientList - recipient list that uses multicast processor,Probably it would be useful to have recipientList that in InOut mode doesn't work as a pipeline. I faced that problem  however InOnly is ok. It seems in InOut it reminds of RoutingSlip. Optionally we could use MulticastProcessor to process 'recipients'. If you think it makes sense  attached patch enhances camel-core with such feature.,1.3.0,1.3.0,0,0,54,1,4,4,0,0,0,0,0,0,0,0,,0,0
298,Improvement,Closed,Fixed,camel-core,Trivial,Christian Schneider,2008/01/19 17:22:55 +0100,2008/04/17 05:02:40 +0100,Claus Ibsen,2008/04/17 06:11:42 +0100,88.53387731,0.047939815,Remove tangle between impl and impl.converter,Currently impl and impl.converter reference each other. If possible such cycles should be avoided.When I looked into it I found that impl.converter references only a single class CachingInjector. No other class in camel-core seems to use this class. So my suggestion is to move CachingInjector to impl.converter. So the cycle i removed. As far as I can see this should cause no ther issues.,1.2.0; 1.3.0,1.4.0,0,0,64,1,6,3,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/impl/CachingInjector.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/CachingInjector.java;camel-core/src/main/java/org/apache/camel/impl/converter/InstanceMethodTypeConverter.java;,0,0
304,Bug,Closed,Fixed,camel-http,Major,Roman Kalukiewicz,2008/01/22 01:39:44 +0100,2008/01/22 01:39:44 +0100,Roman Kalukiewicz,2008/01/22 01:48:16 +0100,0.005925926,0.005925926,Multithreaded HTTP invocations doesn't work,Description of the bug:http://www.nabble.com/Multithreaded-http-endpoint-to13646722s22882.html#a13646722,1.3.0,1.3.0,0,0,7,1,2,2,0,0,0,0,0,0,2,5,components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/test/java/org/apache/camel/component/http/MultiThreadedHttpGetTest.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java;,0,0
320,Bug,Closed,Fixed,camel-core,Major,Aaron Crickenberger,2008/02/05 14:10:17 +0100,2008/02/05 14:10:17 +0100,Hadrian Zbarcea,2008/02/06 21:56:00 +0100,1.323414352,1.323414352,DefaultParameterMappingStrategy doesn't load its defaults,This is preventing BeanProcessor from using bean methods with a Message parameter  or bean methods not named 'process' that have an Exchange as their parameter. For example  to map to a Message the it tries using the ParameterExpression bodyAs(Message.class) instead of inmessageExpression().,1.2.0,1.3.0,0,0,42,1,2,2,0,0,0,0,0,0,0,0,,0,0
323,Bug,Closed,Fixed,,Trivial,Claus Ibsen,2008/02/10 11:21:45 +0100,,Unassigned,2008/02/16 18:47:02 +0100,6.309224537,,spring-2.5.1.jar is twice in the camel distro,I downloaded the latest snapshot apache-camel-1.3-20080210.022044-67.zip fromhttp://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/apache-camel/1.3-SNAPSHOT/The .zip file contains spring-2.5.1.jar twice/camel/lib/camel/lib/optionalIs Spring both mandatory and optional?And btw it includes an old version of commons-logging-1.0.4.jar. v1.1 of commons logging is out.,1.3.0,1.3.0,0,0,34,0,2,2,0,0,0,0,0,0,0,0,,0,0
324,Bug,Closed,Fixed,camel-http,Critical,Alex Cichowski,2008/02/10 11:30:07 +0100,2008/02/12 17:44:36 +0100,Gary Tully,2008/02/28 04:52:42 +0100,17.7240162,15.46395833,bad content length header value in http response,By default HttpBinding class copies all request header attributes from the request to the response including 'Content-Length'. So the consequence is that the response is declaring the same size as the request which can lead to serious truncation problems! the workaround is simply to add the line:out.removeHeader('Content-Length'); in the writeResponse method of the httpbinding class allowing jetty to set the right value.,1.3.0,1.3.0,0,0,63,1,7,5,0,0,0,0,0,0,0,0,,0,0
335,Improvement,Closed,Fixed,camel-mail,Major,Lars Heinemann,2008/02/15 14:09:12 +0100,2008/04/22 05:46:20 +0100,Claus Ibsen,2008/05/10 13:45:34 +0100,84.98358796,18.33280093,Mail component is missing some configuration possibilities,It should be possible to configure the behaviour of the mail component. see thread: http://www.nabble.com/Problem-with-Camel-Mail-Component-in-Route-td15497818s12049.html#a15497818,1.2.0; 1.3.0,1.4.0,0,0,18,1,20,3,0,0,0,0,0,0,16,70,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailEndpoint.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailUtils.java;components/camel-mail/src/main/resources/META-INF/services/org/apache/camel/component/imaps;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailComponentTest.java;components/camel-mail/pom.xml;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailUtils.java;components/camel-mail/pom.xml;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailComponentTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailMessageTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailRouteTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMessageConsumeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MultipleDestinationConsumeTest.java;components/camel-mail/src/test/resources/log4j.properties;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailSubjectTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/JavaMailConnection.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailEndpoint.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailMessage.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailProducer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailUtils.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MessageHeaderAccessException.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MessageHeaderNamesAccessException.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/RuntimeMailException.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/InvalidConfigurationTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailProcessOnlyUnseenMessagesTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailRouteTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailSubjectTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMessageConsumeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MultipleDestinationConsumeTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailComponentTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailFetchSizeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailFetchSizeZeroTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailProcessOnlyUnseenMessagesTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailMessage.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailUtils.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailProcessOnlyUnseenMessagesTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMessageConsumeTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailMessage.java;components/camel-mail/src/test/data/logo.jpeg;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailAttachmentTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailEndpoint.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailProducer.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailComponentTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailSubjectTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/JavaMailConnection.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MessageHeaderAccessException.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MessageHeaderNamesAccessException.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/RuntimeMailException.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/InvalidConfigurationTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailComponentTest.java;,0,0
340,Bug,Closed,Fixed,camel-mina,Major,Claus Ibsen,2008/02/17 17:54:37 +0100,2008/02/28 08:21:09 +0100,Willem Jiang,2008/02/28 09:49:43 +0100,10.66326389,0.06150463,Mina TCP does not support InOut pattern,See this thread:http://www.nabble.com/camel-mina-TCP-InOut-exchange-td15530602s22882.htmlThis builder does not support InOut when a client send a textline to localhost:8888.The client never receives a response.url = 'mina:tcp://localhost:8888?textline=true';from(uri).process(new Processor() { public void process(Exchange e) { String in = e.getIn().getBody(String.class); // append newline at end to denote end of data for textline codec e.getOut().setBody('Hello ' + in + '/n'); } });Attached is a patch that fixes this by introducing a new parameter to the URL for fluent builder sync=true (ie is there a better name?)Using this url instead and the patch then Camel will send a response back to the client:mina:tcp://localhost:8888?textline=true&amp;sync=true,1.2.0,1.3.0,0,0,98,1,5,3,0,0,0,0,0,0,1,3,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;,0,0
356,Improvement,Closed,Fixed,camel-mina,Trivial,Claus Ibsen,2008/03/04 17:11:04 +0100,2008/03/06 09:31:39 +0100,Willem Jiang,2008/03/08 18:32:09 +0100,4.05630787,2.375347222,Synchronous mode should handle exceptions being thrown from MINA,Camel MINA in synchronous mode (InOut exchange pattern) does not handle exception thrown from MINA. Currently MINA intercepts this and logs the exception at WARN level.We should override the proper method in Mina and handle it so the end user can deal with it.Also it has been raisen on the forum that it does not propogate header and other properties. This should be raised in another ticket.In the weekend I will work on a patch for Camel to fix this problem.,1.3.0,1.3.0,0,0,81,1,11,2,0,0,1,0,0,0,3,15,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;components/camel-mina/pom.xml;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaConverterTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaMulticastTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpUsingTemplateTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpWithInOutUsingPlainSocketTest.java;components/camel-mina/src/test/resources/log4j.properties;,0,0
362,Improvement,Closed,Fixed,camel-mina,Major,Hadrian Zbarcea,2008/03/05 16:58:45 +0100,2008/03/05 16:58:45 +0100,Hadrian Zbarcea,2008/03/05 17:00:01 +0100,0.00088,0.00088,camel-mina: allowing the lazy creation of a connection,In the current implementation with a mina component producer if the server is not up when we start Camel it fails. This is because the mina session creation is in the doStart method which is called when Camel starts.A simple solution is to optionally allow to lazily create the session just before sending the exchange in the Producer's process method.,1.2.0,1.3.0,0,0,60,1,2,1,0,0,0,0,0,0,0,0,,0,0
363,Bug,Closed,Fixed,camel-cxf,Major,Marc Giger,2008/03/05 19:10:04 +0100,2008/03/06 03:24:23 +0100,Willem Jiang,2008/03/11 15:34:02 +0100,5.849976852,5.506701389,camel-cxf component can't deal with the exception message in MESSAGE dataFormat,From: Willem JiangTo: camel-user@activemq.apache.orgSubject: Re: camel-cxf throwing a faultDate: Wed  05 Mar 2008 16:26:41 +0800Reply-To: camel-user@activemq.apache.orgHi Marc It looks like camel-cxf component's issue which can't deal with the exception message in MESSAGE dataFormat.Could you fill a JIRA for it ? I will fix it later this week.As usual  you just need throw the exception from the processor   CXF will try to marshal it into a soap fault.Regards WillemMarc Giger wrote:&gt; Hi &gt;&gt; I'm trying to get the following camel route working where the&gt; dataformat is MESSAGE.&gt;&gt; &lt;from uri='cxf:bean:routerEndpoint?dataFormat=MESSAGE'/&gt; &gt; &lt;process ref='decryptProcessor'/&gt; &gt; &lt;choice&gt;&gt; &lt;when&gt; &gt; &lt;methodCall bean='endpointSelector' method='matches'/&gt;&gt; &lt;to uri='cxf:bean:serviceEndpoint?dataFormat=MESSAGE'/&gt; &gt; &lt;/when&gt;&gt; &lt;otherwise&gt; &gt; &lt;to uri='cxf:bean:localEndpoint?dataFormat=MESSAGE'/&gt; &gt; &lt;/otherwise&gt;&gt; &lt;/choice&gt; &gt;&gt; if the endpointSelector bean returns true the request is redirected to&gt; a remote webservice.&gt; otherwise the request is forwarded to a local cxf service (with&gt; local-transport)&gt;&gt; Now  if I invoke the routerEndpoint and somewhere in the pipeline&gt; happens an exception (in my case in the decryptProcessor)  I get the&gt; following Exception in the outFault chain:&gt;&gt; Mar 4  2008 10:48:35 PM org.apache.cxf.phase.PhaseInterceptorChain&gt; doIntercept INFO: Interceptor has thrown exception  unwinding now&gt; org.apache.cxf.interceptor.Fault&gt; at&gt; org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)&gt; at&gt; org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)&gt; at&gt; org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)&gt; at&gt; org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)&gt; at&gt; org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)&gt; at&gt; org.apache.cxf.transport.servlet.ServletDestination.doMessage(ServletDestination.java:79)&gt; at&gt; org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:264)&gt; at&gt; org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)&gt; at&gt; org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)&gt; at&gt; org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)&gt; at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at&gt; javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at&gt; org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)&gt; at&gt; org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)&gt; at&gt; org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)&gt; at&gt; org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)&gt; at&gt; org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)&gt; at&gt; org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)&gt; at&gt; org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)&gt; at&gt; org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)&gt; at&gt; org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)&gt; at org.mortbay.jetty.Server.handle(Server.java:313) at&gt; org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)&gt; at&gt; org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)&gt; at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:644) at&gt; org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at&gt; org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at&gt; org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)&gt; at&gt; org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)&gt; Caused by: java.lang.NullPointerException at&gt; org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at&gt; org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at&gt; org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ...&gt; 28 more&gt;&gt; This is because the InputStream is null in&gt; RawMessageContentRedirectInterceptor:&gt;&gt; public void handleMessage(Message message) throws Fault {&gt;&gt; InputStream is = message.getContent(InputStream.class);&gt; OutputStream os = message.getContent(OutputStream.class);&gt; &gt; try { &gt; IOUtils.copy(is  os);&gt; is.close();&gt; os.flush();&gt; } catch (Exception e) {&gt; throw new Fault(e);&gt; }&gt; }&gt;&gt; How can I return a custom soap-fault in a processor/filter?&gt;&gt; Thanks &gt;&gt; Marc&gt;&gt;,1.3.0,1.3.0,0,0,302,1,2,2,0,0,0,0,0,0,1,7,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/MessageDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/FakeBindingOperationInfo.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/FaultOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/RawMessageContentRedirectInterceptor.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustmerizedExceptionTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfMessageCustomizedExceptionTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadCustomizedExceptionTest.java;,1,1
370,Bug,Closed,Fixed,camel-ftp,Minor,Chris Custine,2008/03/07 00:09:39 +0100,2008/03/07 02:56:21 +0100,Hadrian Zbarcea,2008/03/07 03:30:31 +0100,0.139490741,0.023726852,SftpConsumer is not connecting and retrieving remote files,SftpConsumer does not connect to server due to patch for CAMEL-251. The SftpConsumer also checks remote file modification timestamp against last poll timestamp but incorrectly converts seconds to milliseconds using integer math so the resulting conversion is always negative and will never retrieve file. I will attach the fixes to this issue.,1.3.0,1.3.0,0,0,58,1,3,3,0,0,0,0,0,1,0,0,,0,0
371,Improvement,Closed,Fixed,camel-mina,Minor,Claus Ibsen,2008/03/07 06:11:45 +0100,,Unassigned,2008/03/09 11:19:44 +0100,2.213877315,,Mina Producer should have configurable timeout,Currently the camel mina producer (MinaProducer) defaults to have a 10 sec timeout.This is currently not possible to configured eg from the URL parameters etc.Also we should documented on the wiki that 10 sec. is default.,1.3.0,1.3.0,0,0,36,0,5,2,0,0,1,0,0,0,1,5,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaComponentTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaExchangeTimeOutTest.java;,0,0
374,Bug,Closed,Fixed,camel-http; camel-jetty,Major,David White,2008/03/07 22:31:47 +0100,2008/03/20 04:57:34 +0100,Willem Jiang,2008/03/24 04:51:02 +0100,16.26336806,3.995462963,HttpBinding.writeResponse doesn't set the response status code (i.e. it's always 200),When writing out an Http response  the HttpBinding should check for the existing of the header HttpProducer.HTTP_RESPONSE_CODE and set it in the response if it's there. This allows requests made via the http component to be output with the correct status code info. If also allows processors in the flow to control the status code by setting the header themselves.,1.2.0,1.3.0,0,0,60,1,3,2,0,0,0,0,0,0,1,1,components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java;,0,0
375,Improvement,Closed,Fixed,camel-mina,Minor,Claus Ibsen,2008/03/08 14:41:52 +0100,,Unassigned,2008/03/09 11:19:09 +0100,0.859224537,,camel-mina improvements,This ticket holds reference to the various camel-mina improvments and bugfixes lately.,1.3.0,1.3.0,0,0,12,0,4,1,0,0,0,0,0,0,1,8,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaExchange.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaExchangeTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithIoOutProcessorExceptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpWithInOutUsingPlainSocketTest.java;,0,0
384,Bug,Closed,Fixed,camel-cxf,Major,Marc Giger,2008/03/12 19:48:11 +0100,2008/03/14 02:34:56 +0100,Willem Jiang,2008/03/14 03:21:07 +0100,1.314537037,0.032071759,Support for a full customized soap-fault incl. fault-code and detail,Don't wrap a Fault in a Fault.,1.3.0,1.3.0,0,0,7,1,2,2,0,0,0,0,0,0,1,5,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/PayloadContentRedirectInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/RawMessageContentRedirectInterceptor.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustmerizedExceptionTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadCustomizedExceptionTest.java;,0,0
389,Improvement,Closed,Fixed,camel-core,Major,Willem Jiang,2008/03/17 10:31:51 +0100,2008/04/01 15:07:20 +0100,Willem Jiang,2008/04/01 15:07:56 +0100,15.19172454,0.000417,Parallel processing route,Adding the support of this user story CXF Consumer -&gt; Route ---&gt; parallelly send messages and recieve responses---&gt; aggregate response --&gt; further process ----&gt; returnHere is more information about this story &#91;1&#93;http://www.nabble.com/Parallel-processing-route-td15642110.html#a15642110,1.2.0,1.3.0,0,0,36,1,2,2,0,0,0,0,1,0,1,5,camel-core/src/main/java/org/apache/camel/model/MulticastType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/ThreadProcessor.java;camel-core/src/test/java/org/apache/camel/processor/MultiCastAggregatorTest.java;,0,0
394,Improvement,Closed,Fixed,camel-mina,Minor,Claus Ibsen,2008/03/24 09:34:42 +0100,2008/03/25 20:40:11 +0100,Claus Ibsen,2008/03/26 06:15:08 +0100,1.861412037,0.399270833,Improve logging for camel-mina,Currently camel-mina does not log using similar log classnames for a MinaProducer and MinaConsumer. This can be a bit misleading in the log files.MinaConsumer uses an anonymous inner class to do the IoHandler where as MinaProducer does not. This renders the loglines such asMinaConsumer$1 - XXXMinaProducer$RecieveHandler - XXXMinaConsumer should use a non anonymous inner classes so logging is the same:MinaConsumer$RecieveHandler - XXXMinaProducer$ResponseHandler - XXX,1.3.0,1.3.0,0,0,78,1,5,1,0,0,0,0,0,0,1,14,components/camel-mina/pom.xml;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaHelper.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaLoggerOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaProducerShutdownMockTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaProducerShutdownTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTransferExchangeOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/ReverseProtocolHandler.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/ReverserServer.java;,0,0
395,Improvement,Closed,Fixed,camel-mina,Major,Claus Ibsen,2008/03/24 10:22:12 +0100,2008/03/25 20:39:52 +0100,Claus Ibsen,2008/03/26 06:11:04 +0100,1.825601852,0.396666667,MinaProducer waits for MINA worker thread to timeout when stopping JVM from standalone client,I was working on a camel-mina-example sample that starts a MinaProducer to send data to a TCP server. When my sample terminates the JVM it waits 60 seconds until the MINA worker threads times out (default 60 sec).As a workaround using System.exit(0) will terminate my client JVM immediately. And running my client as a JUnit tests will also in fact terminate the JVM immediately.The code below demonstrates this: Running as JUnit runs within a few seconds. Run it as a standard java main app and it terminates after 60+ secondsThe code is a test I am working on for the patch to fix it. (I got it fixed but I want a better unit test)public class MinaProducerTest extends ContextTestSupport { public static void main(String[] args) throws Exception { MinaProducerTest test = new MinaProducerTest(); test.producerRunningFromMain(); } private void producerRunningFromMain() throws Exception { long start = System.currentTimeMillis(); System.out.println('+++ start +++'); context = new DefaultCamelContext(); context.addRoutes(createRouteBuilder()); context.start(); testProducer(); context.stop(); System.out.println('+++ stop +++'); long end = System.currentTimeMillis(); assertTrue('Should stop within 5 seconds'  end - start &lt; 5000); // TODO: add shutdown hook to verify that its stopped before 5 seconds  or mocks  } private static final String uri = 'mina:tcp://localhost:6321?textline=true'; protected RouteBuilder createRouteBuilder() { return new RouteBuilder() { public void configure() { from(uri).to('mock:result'); } }; } public void testProducer() throws Exception { MockEndpoint mock = getMockEndpoint('mock:result'); mock.expectedBodiesReceived('Hello World'); Endpoint endpoint = context.getEndpoint(uri); Producer producer = endpoint.createProducer(); Exchange exchange = endpoint.createExchange(); exchange.getIn().setBody('Hello World'); producer.start(); producer.process(exchange); producer.stop(); assertMockEndpointsSatisifed(); } // TODO: Test using mocks requires many codelines to mock all the producer  endpoints etc.},1.3.0,1.3.0,0,0,304,1,3,1,0,0,0,0,1,0,1,14,components/camel-mina/pom.xml;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaHelper.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaLoggerOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaProducerShutdownMockTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaProducerShutdownTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTransferExchangeOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/ReverseProtocolHandler.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/ReverserServer.java;,0,0
404,Bug,Closed,Fixed,,Trivial,Claus Ibsen,2008/03/28 06:51:11 +0100,2008/03/28 06:51:11 +0100,Claus Ibsen,2008/03/30 18:15:46 +0100,2.475405093,2.475405093,Javadoc warnings,Get the javadoc warnings reported by the javadoc generator fixed.,1.3.0,1.3.0,0,0,10,1,3,1,0,0,0,0,0,0,5,59,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsExchange.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/FailedToProcessResponse.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailExchange.java;components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiConsumer.java;components/camel-script/src/main/java/org/apache/camel/builder/script/ScriptBuilder.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringRouteBuilder.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppBinding.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppExchange.java;camel-core/src/main/java/org/apache/camel/AsyncCallback.java;camel-core/src/main/java/org/apache/camel/AsyncProcessor.java;camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/CamelExchangeException.java;camel-core/src/main/java/org/apache/camel/CamelTemplate.java;camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/Message.java;camel-core/src/main/java/org/apache/camel/NoSuchEndpointException.java;camel-core/src/main/java/org/apache/camel/ProducerTemplate.java;camel-core/src/main/java/org/apache/camel/Route.java;camel-core/src/main/java/org/apache/camel/RuntimeExchangeException.java;camel-core/src/main/java/org/apache/camel/builder/RouteBuilder.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXMessage.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/BytesSource.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/StringSource.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/impl/LoggingExceptionHandler.java;camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/model/RouteContainer.java;camel-core/src/main/java/org/apache/camel/model/config/StreamResequencerConfig.java;camel-core/src/main/java/org/apache/camel/model/language/ExpressionType.java;camel-core/src/main/java/org/apache/camel/processor/Aggregator.java;camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java;camel-core/src/main/java/org/apache/camel/processor/loadbalancer/TopicLoadBalancer.java;camel-core/src/main/java/org/apache/camel/spi/LifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/spi/TypeConverterAware.java;camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/main/java/org/apache/camel/util/ProducerCache.java;camel-core/src/main/java/org/apache/camel/util/jndi/JndiContext.java;camel-core/src/main/java/org/apache/camel/view/NodeData.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/MessageInvoker.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/AbstractMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/InvokingContext.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java;,0,0
410,Bug,Closed,Fixed,camel-core,Major,Dan Dudley,2008/03/28 20:51:00 +0100,2008/04/01 05:17:20 +0100,Claus Ibsen,2008/04/05 12:23:27 +0100,7.647534722,4.295914352,Exception handling of the ErrorHandlerSupport class,When you configure your route builder and say you want to configure two exceptions lets say: NullPointer and Exception. Now say the bean you call as your end point throws a NullPointer  wouldn't you think the NullPointer policy would handle that exception? Well I'm seeing sometimes it does and sometimes it doesn't due to the map not keeping the exceptions in any particular order. Is there anyway this could be changed to a LinkedHashMap or a List?Issue with class: org.apache.camel.processor.ErrorHandlerSupport,1.2.0; 1.3.0,1.4.0,0,0,80,1,14,2,0,0,0,1,0,0,2,12,camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java;camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java;camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyStrategy.java;camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderTest.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelTest.java;camel-core/src/test/java/org/apache/camel/processor/ErrorHandlerSupportTest.java;camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/CustomExceptionPolicyStrategyTest.java;camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategyTest.java;,0,0
424,Improvement,Closed,Fixed,documentation,Minor,Claus Ibsen,2008/04/02 05:25:33 +0100,2008/04/02 06:16:12 +0100,Claus Ibsen,2008/04/12 18:17:45 +0100,10.53625,10.50107639,Improve FTP component wiki documentation,The wiki documentation for FTP usage could be improved with: java code examples (snippets in unit test classes) that you need the convertTo(String.class) for ASCII file transfer The FTP component is an extension of the File component so it inherits behaviour  features and options from file. State precise witch options a FTPProducer and FTPConsuer can use. Consuming using FTP there are special header key/values for the remote filename etc. that could be of interest for the end users (Maybe for the producer as well),1.3.0,1.4.0,0,0,86,1,5,1,0,0,0,0,0,0,1,1,components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinarySampleTest.java;,0,0
426,Improvement,Closed,Fixed,camel-core,Major,Roman Kalukiewicz,2008/04/02 12:11:25 +0100,2008/04/02 12:11:25 +0100,Roman Kalukiewicz,2008/04/02 12:45:43 +0100,0.023819444,0.023819444,splitter() should have the same parallel processing functionality that multicast() has,Ability to havefrom('direct:parallel').splitter(body().tokenize(' ')  true).to('mock:result');where true parameter to splitter should behave like in multicast() &#8212; processing is done in separate threads for each 'part'.,1.4.0,1.4.0,0,0,34,1,4,2,0,0,0,0,1,0,1,5,camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/model/SplitterType.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java;,0,0
443,Improvement,Closed,Fixed,documentation,Minor,Claus Ibsen,2008/04/05 17:40:43 +0100,2008/04/06 11:05:58 +0100,Claus Ibsen,2008/04/12 17:24:42 +0100,6.988877315,6.263009259,Improve File component wiki,I have added two missings options and then I discovered a few more missing so I am created this ticket so we get this done.The File Component has several options we haven't documented on the wiki yet.Also its javadoc should be improved.And we should provide some better java samples on the wiki.,1.3.0,1.4.0,0,0,52,1,1,1,0,0,0,0,0,0,2,11,camel-core/src/test/java/org/apache/camel/component/file/ToFileRouteTest.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/FileExchange.java;camel-core/src/main/java/org/apache/camel/component/file/FileProcessStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/FileProducer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/DefaultFileRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/package.html;,0,0
448,Improvement,Closed,Fixed,camel-jpa,Minor,Claus Ibsen,2008/04/07 19:52:18 +0100,2008/04/07 19:52:18 +0100,Claus Ibsen,2008/04/12 12:51:51 +0100,4.708020833,4.708020833,Upgraded to OpenJPA 1.0.2,OpenJPA in release 1.0 and onwards requires a change in the ant build in the pom.xmlIt now requires a persistance.xml file to use.,1.3.0,1.4.0,0,0,23,1,3,1,0,0,0,0,0,0,1,3,components/camel-jpa/pom.xml;components/camel-jpa/src/main/resources/META-INF/persistence.xml;pom.xml;,0,0
456,Bug,Closed,Fixed,,Critical,Hadrian Zbarcea,2008/04/09 16:48:03 +0100,2008/04/12 19:23:14 +0100,Jonathan Anstey,2008/04/12 23:12:46 +0100,3.267164352,0.159398148,Invalid jar in binary distribution,The apache-camel jar in the binary distribution misses a lot of files  including class and schema files (12k in size compared to the 1.9M released jar).,1.3.0,1.4.0,0,0,27,1,2,2,0,0,0,0,0,0,0,0,,0,0
457,Bug,Closed,Fixed,camel-core,Minor,Torsten Mielke,2008/04/10 09:04:27 +0100,2008/04/11 05:11:11 +0100,Claus Ibsen,2008/04/12 09:20:33 +0100,2.011180556,1.173171296,Camel should raise an exception if parsing of xslt file fails,Consider a Camel route that involves an xslt component. When Camel sets up the route  the XsltBuilder ignores any errors coming from the xerces xml parser and continues constructing the route even though the xslt transformer is not initialized. Later when the route is executed Camel correctly checks if the transformer is initialized and raises an error if not:java.lang.IllegalArgumentException: No transformer configured!However in case of a parse error in the xslt file  the whole route becomes unusable and the setup routine that constructs the route should fail with an appropriate error message. A sanity check needs to be added in methodorg.apache.camel.builder.xml.XsltBuilder.setTransformerSource(javax.xml.transform.Source).,1.3.0,1.4.0,0,1,101,1,7,2,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;components/camel-spring/src/test/java/org/apache/camel/component/xslt/InvalidXsltFileTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/xslt/invalid.xsl;,0,0
498,Bug,Closed,Fixed,,Major,james strachan,2008/05/08 10:09:35 +0100,2008/05/08 10:09:35 +0100,james strachan,2008/05/08 19:22:49 +0100,0.384189815,0.384189815,file endpoint with noop=true does not detect old files moved into a directory,file endpoint with noop=true does not detect old files moved into a directory,1.3.0,1.4.0,0,0,1,1,1,1,0,0,0,0,0,0,2,5,camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/MoveFilesToDirectoryTest.java;camel-core/src/test/java/org/apache/camel/component/file/MoveFilesToDirectoryWithNoopTest.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/MoveFilesToDirectoryTest.java;,0,0
499,Bug,Closed,Fixed,camel-core,Major,Jonathan Anstey,2008/05/08 18:24:17 +0100,2008/05/08 18:24:17 +0100,Jonathan Anstey,2008/05/09 06:09:04 +0100,0.48943287,0.48943287,camel-core does not compile on HP-UX,camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;871 12&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;872 39&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;884 12&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptTypecamel-core/src/main/java/org/apache/camel/model/ProcessorType.java:&#91;885 38&#93; inconvertible types found : org.apache.camel.model.ProcessorType&lt;Type&gt; required: org.apache.camel.model.InterceptType,1.3.0,1.4.0,0,0,34,1,3,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;,0,0
505,Improvement,Closed,Fixed,,Major,james strachan,2008/05/12 16:16:46 +0100,2009/01/20 19:36:04 +0100,Claus Ibsen,2009/02/12 15:35:58 +0100,275.9716667,22.83326389,make it easier to create Endpoint instances nicely via Spring XML,right now its a bit tricky creating Endpoint instances in a spring XML using the &lt;bean&gt;&lt;property&gt; mechanism.It'd be nice to be able to configure them more easily as...&lt;bean id='foo' class='org.apache.camel.component.file.FileEndpoint'&gt; &lt;property name='foo' value='bar'/&gt; ...type stuff and have folks Spring IDE's smart complete stuff etc,1.3.0,2.0-M1,0,0,55,1,10,2,0,0,1,0,0,0,18,148,components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomEndpoint.java;components/camel-atom/src/main/java/org/apache/camel/component/feed/FeedEndpoint.java;components/camel-atom/src/test/java/org/apache/camel/component/atom/AtomEndpointTest.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/AggregateRssFeedCollection.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/AggregateRssFeedStrategy.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/RssComponent.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/RssDateComparator.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/RssEndpoint.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/RssEntryPollingConsumer.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/RssPollingConsumer.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/UpdatedDateFilter.java;components/camel-rss/src/main/java/org/apache/camel/dataformat/rss/RssDataFormat.java;components/camel-rss/src/test/java/org/apache/camel/component/rss/RssEndpointTest.java;components/camel-mina/pom.xml;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConfiguration.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaPayloadHelper.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpUsingTemplateTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/SpringMinaEndpointTest.java;components/camel-mina/src/test/resources/org/apache/camel/component/mina/SpringMinaEndpointTest-context.xml;components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/FreemarkerComponent.java;components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/FreemarkerEndpoint.java;components/camel-freemarker/src/test/java/org/apache/camel/component/freemarker/FreemarkerEndpointTest.java;components/camel-spring/src/main/java/org/apache/camel/component/ResourceBasedComponent.java;components/camel-spring/src/main/java/org/apache/camel/component/ResourceBasedEndpoint.java;components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityComponent.java;components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityEndpointTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;tests/camel-itest/src/test/java/org/apache/camel/itest/ftp/SpringFtpEndpointTest.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/ftp/SpringFtpEndpointTest-context.xml;camel-core/src/main/java/org/apache/camel/Endpoint.java;camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXEndpoint.java;camel-core/src/main/java/org/apache/camel/component/list/ListEndpoint.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPollingEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/ProcessorEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollEndpoint.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/test/java/org/apache/camel/impl/ProducerTest.java;components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpExchange.java;components/camel-ibatis/src/main/java/org/apache/camel/component/ibatis/IBatisEndpoint.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java;components/camel-jcr/src/main/java/org/apache/camel/component/jcr/JcrEndpoint.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java;components/camel-jhc/src/main/java/org/apache/camel/component/jhc/JhcEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryQueueEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryTopicEndpoint.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaEndpoint.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiEndpoint.java;components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiProducer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationEndpoint.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationProducer.java;components/camel-spring/src/main/java/org/apache/camel/component/ResourceBasedEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/component/event/EventEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/component/test/TestEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java;components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlEndpoint.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamEndpoint.java;components/camel-stringtemplate/src/main/java/org/apache/camel/component/stringtemplate/StringTemplateEndpoint.java;components/camel-uface/src/main/java/org/apache/camel/component/uface/UFaceEndpoint.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;tests/camel-itest/src/test/java/org/apache/camel/itest/http/HttpEndpointTest.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/http/HttpEndpointTest-context.xml;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaEndpoint.java;components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaWithNamedQueryTest.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaRouteEndpointTest.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaRouteTest.java;components/camel-jpa/src/test/resources/org/apache/camel/processor/jpa/springJpaRouteTest.xml;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/config/JmsEndpointWithCustomDestinationTest.java;components/camel-jms/src/test/resources/org/apache/camel/component/jms/config/JmsEndpointWithCustomDestinationTest-context.xml;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcEndpointTest.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteTest.java;components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlComponent.java;components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlEndpoint.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlEndpointTest.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/RuntimeXmppException.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppBinding.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppComponent.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/GoogleTalkEndpointTest.java;camel-core/src/main/java/org/apache/camel/processor/Logger.java;components/camel-spring/src/test/java/org/apache/camel/component/log/SpringLogTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/log/SpringLogTest-context.xml;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailEndpoint.java;tests/camel-itest/pom.xml;tests/camel-itest/src/test/java/org/apache/camel/itest/mail/SpringMailEndpointTest.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/mail/SpringMailEndpointTest-context.xml;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteEndpointTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanComponent.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanEndpoint.java;camel-core/src/main/java/org/apache/camel/component/bean/RegistryBean.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPollingEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/ProcessorEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/spring/factory/BeanEndpointFactory.java;components/camel-spring/src/test/java/org/apache/camel/component/bean/BeanRouteUsingSpringEndpointTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/bean/BeanRouteUsingSpringEndpointTest-context.xml;components/camel-spring/src/test/java/org/apache/camel/component/file/SpringFileRouteTest.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/CamelJob.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/StatefulCamelJob.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzEndpointTest.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzRouteTest.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/StatefulQuartzRouteTest.java;components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiConsumer.java;components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiEndpoint.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/RmiRouteEndpointTest.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/RmiRouteTest.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollEndpoint.java;components/camel-spring/pom.xml;components/camel-spring/src/test/java/org/apache/camel/component/file/SpringFileRouteTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/file/SpringFileRouteTest-context.xml;,0,0
509,Bug,Closed,Fixed,camel-core,Major,William Tam,2008/05/12 21:58:18 +0100,2008/05/13 03:00:34 +0100,Hadrian Zbarcea,2008/05/13 03:01:04 +0100,0.21025463,0.000347,JMX Connector is not closed by InstrumentationAgentImpl.doStop(),JMX Connector is not closed by InstrumentationAgentImpl.doStop(),1.3.0,1.4.0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,,0,0
514,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/05/14 13:20:54 +0100,2008/05/14 13:20:54 +0100,Claus Ibsen,2008/05/25 14:40:29 +0100,11.0552662,11.0552662,Document - File component when its using file or directory names,Yes I think we need to document it much better how Camel handles this file/folder stuff when its consuming files producing filesIt's a bit confusing when Camel uses the unique message id for filename instead of the path from the URI.,1.3.0,1.4.0,0,0,44,1,0,0,0,0,0,0,0,0,1,1,camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java;,0,0
517,Bug,Closed,Fixed,documentation,Minor,Claus Ibsen,2008/05/16 04:58:22 +0100,2008/05/16 04:58:22 +0100,Claus Ibsen,2008/05/26 20:24:48 +0100,10.64335648,10.64335648,Javadoc - improve summaries etc,The javadoc could use to be polished for eg. summaries statis the Apache license instead of a short brief summary what the class/package does etc.It's all the javadoc also for the components.,1.3.0,1.4.0,0,0,32,1,15,2,0,0,0,0,0,0,16,249,camel-core/src/main/java/org/apache/camel/util/ValueHolder.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanEndpoint.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanExchange.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanHolder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInvocation.java;camel-core/src/main/java/org/apache/camel/component/bean/DefaultAnnotationExpressionFactory.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInvocation.java;camel-core/src/main/java/org/apache/camel/component/bean/NoBeanAvailableException.java;camel-core/src/main/java/org/apache/camel/component/bean/ParameterInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/XPathAnnotationExpressionFactory.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetComponent.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetConsumer.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetSupport.java;camel-core/src/main/java/org/apache/camel/component/direct/DirectProducer.java;camel-core/src/main/java/org/apache/camel/component/file/FileMessage.java;camel-core/src/main/java/org/apache/camel/component/file/FileProducer.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXComponent.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXEndpoint.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXExchange.java;camel-core/src/main/java/org/apache/camel/component/list/ListComponent.java;camel-core/src/main/java/org/apache/camel/component/list/ListEndpoint.java;camel-core/src/main/java/org/apache/camel/component/log/LogComponent.java;camel-core/src/main/java/org/apache/camel/component/seda/ListPollingConsumer.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/processor/loadbalancer/TopicLoadBalancer.java;camel-core/src/main/java/org/apache/camel/AlreadyStoppedException.java;camel-core/src/main/java/org/apache/camel/CamelException.java;camel-core/src/main/java/org/apache/camel/CamelTemplate.java;camel-core/src/main/java/org/apache/camel/FailedToCreateProducerException.java;camel-core/src/main/java/org/apache/camel/InvalidHeaderTypeException.java;camel-core/src/main/java/org/apache/camel/InvalidPayloadException.java;camel-core/src/main/java/org/apache/camel/InvalidPayloadRuntimeException.java;camel-core/src/main/java/org/apache/camel/InvalidTypeException.java;camel-core/src/main/java/org/apache/camel/ProducerTemplate.java;camel-core/src/main/java/org/apache/camel/RuntimeCamelException.java;camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/impl/ReportingTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/ReportingTypeConverterRegistry.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringInstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/ProducerTemplate.java;camel-core/src/main/java/org/apache/camel/component/ref/package.html;camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java;camel-core/src/main/java/org/apache/camel/converter/CollectionConverter.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/impl/converter/AsyncProcessorTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/MemoryMessageIdRepository.java;camel-core/src/main/java/org/apache/camel/processor/loadbalancer/StickyLoadBalancer.java;camel-core/src/main/java/org/apache/camel/spi/ComponentResolver.java;camel-core/src/main/java/org/apache/camel/util/AsyncProcessorHelper.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/test/java/org/apache/camel/builder/BuilderWithScopesTest.java;camel-core/src/test/java/org/apache/camel/processor/LoadBalanceTest.java;camel-core/src/main/java/org/apache/camel/builder/NoErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanComponent.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetComponent.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/model/ConvertBodyType.java;camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/StickyLoadBalanceStrategy.java;camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java;camel-core/src/main/java/org/apache/camel/processor/LoggingErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/test/java/org/apache/camel/LanguageTestSupport.java;camel-core/src/test/java/org/apache/camel/builder/xml/XPathTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanMethodWithMultipleParametersTest.java;camel-core/src/test/java/org/apache/camel/component/dataset/DataSetConsumeTest.java;camel-core/src/test/java/org/apache/camel/component/file/DirectoryCreateIssueTest.java;camel-core/src/test/java/org/apache/camel/converter/stream/StreamCacheConverterTest.java;camel-core/src/test/java/org/apache/camel/processor/ChoiceTest.java;camel-core/src/test/java/org/apache/camel/processor/DataFormatTest.java;camel-core/src/test/java/org/apache/camel/processor/InterceptWithPredicateAndProceedRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/InterceptWithPredicateRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/InterceptWithoutProceedRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/MultiCastAggregatorTest.java;camel-core/src/test/java/org/apache/camel/processor/MulticastTest.java;camel-core/src/test/java/org/apache/camel/processor/RecipientListTest.java;camel-core/src/test/java/org/apache/camel/processor/StaticRecipientListTest.java;camel-core/src/test/java/org/apache/camel/processor/ThreadTest.java;camel-core/src/test/java/org/apache/camel/processor/ValidationTest.java;camel-core/src/test/java/org/apache/camel/processor/XPathChoiceTest.java;camel-core/src/test/java/org/apache/camel/view/DotViewTest.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/main/java/org/apache/camel/impl/ReportingTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/ReportingTypeConverterRegistry.java;camel-core/src/main/java/org/apache/camel/util/IOHelper.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/main/java/org/apache/camel/util/Out.java;camel-core/src/main/java/org/apache/camel/util/URISupport.java;camel-core/src/main/java/org/apache/camel/util/UnsafeUriCharactersEncoder.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeConverter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLanguageResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/impl/converter/AsyncProcessorTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/PropertyEditorTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/TypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/TypeConverterRegistry.java;camel-core/src/main/java/org/apache/camel/spi/Injector.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/main/java/org/apache/camel/util/TimeoutMap.java;camel-core/src/main/java/org/apache/camel/model/AggregatorType.java;camel-core/src/main/java/org/apache/camel/model/BeanRef.java;camel-core/src/main/java/org/apache/camel/model/Block.java;camel-core/src/main/java/org/apache/camel/model/CatchType.java;camel-core/src/main/java/org/apache/camel/model/ChoiceType.java;camel-core/src/main/java/org/apache/camel/model/CompletedPredicate.java;camel-core/src/main/java/org/apache/camel/model/ConvertBodyType.java;camel-core/src/main/java/org/apache/camel/model/DelayerType.java;camel-core/src/main/java/org/apache/camel/model/ExceptionType.java;camel-core/src/main/java/org/apache/camel/model/FilterType.java;camel-core/src/main/java/org/apache/camel/model/FinallyType.java;camel-core/src/main/java/org/apache/camel/model/HandleFaultType.java;camel-core/src/main/java/org/apache/camel/model/IdempotentConsumerType.java;camel-core/src/main/java/org/apache/camel/model/IdentifiedType.java;camel-core/src/main/java/org/apache/camel/model/InterceptType.java;camel-core/src/main/java/org/apache/camel/model/InterceptorRef.java;camel-core/src/main/java/org/apache/camel/model/InterceptorType.java;camel-core/src/main/java/org/apache/camel/model/LoadBalanceType.java;camel-core/src/main/java/org/apache/camel/model/MulticastType.java;camel-core/src/main/java/org/apache/camel/model/OtherwiseType.java;camel-core/src/main/java/org/apache/camel/model/PolicyRef.java;camel-core/src/main/java/org/apache/camel/model/ProceedType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorRef.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/model/RecipientListType.java;camel-core/src/main/java/org/apache/camel/model/RedeliveryPolicyType.java;camel-core/src/main/java/org/apache/camel/model/ResequencerType.java;camel-core/src/main/java/org/apache/camel/model/RouteBuilderRef.java;camel-core/src/main/java/org/apache/camel/model/RouteContainer.java;camel-core/src/main/java/org/apache/camel/model/RoutingSlipType.java;camel-core/src/main/java/org/apache/camel/model/ServiceActivationType.java;camel-core/src/main/java/org/apache/camel/model/SetHeaderType.java;camel-core/src/main/java/org/apache/camel/model/SplitterType.java;camel-core/src/main/java/org/apache/camel/model/ThrottlerType.java;camel-core/src/main/java/org/apache/camel/model/ThrowFaultType.java;camel-core/src/main/java/org/apache/camel/model/TransformType.java;camel-core/src/main/java/org/apache/camel/model/TryType.java;camel-core/src/main/java/org/apache/camel/model/WhenType.java;camel-core/src/main/java/org/apache/camel/model/dataformat/DataFormatType.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/LoadBalancerType.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/RandomLoadBalanceStrategy.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/RoundRobinLoadBalanceStrategy.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/StickyLoadBalanceStrategy.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/TopicLoadBalanceStrategy.java;camel-core/pom.xml;camel-core/src/main/java/org/apache/camel/builder/ConstantProcessorBuilder.java;camel-core/src/main/java/org/apache/camel/builder/DataFormatClause.java;camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/builder/PredicateFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/DomResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/ResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/StreamResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/StringResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/XPathLanguage.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/language/ExpressionEvaluationException.java;camel-core/src/main/java/org/apache/camel/language/LanguageAnnotation.java;camel-core/src/main/java/org/apache/camel/language/LanguageExpression.java;camel-core/src/main/java/org/apache/camel/language/bean/RuntimeBeanExpressionException.java;camel-core/src/main/java/org/apache/camel/processor/CatchProcessor.java;camel-core/src/main/java/org/apache/camel/processor/FilterProcessor.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/main/java/org/apache/camel/processor/ThroughputLogger.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/UseLatestAggregationStrategy.java;camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyStrategy.java;camel-core/src/main/java/org/apache/camel/processor/validation/ValidatorErrorHandler.java;camel-core/src/main/java/org/apache/camel/spi/InstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/spi/LifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/ExchangePattern.java;camel-core/src/main/java/org/apache/camel/builder/xml/DomResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/MessageVariableResolver.java;camel-core/src/main/java/org/apache/camel/builder/xml/Namespaces.java;camel-core/src/main/java/org/apache/camel/builder/xml/ResultHandler.java;camel-core/src/main/java/org/apache/camel/builder/xml/ResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/builder/xml/StreamResultHandlerFactory.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanComponent.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanHolder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/bean/DefaultAnnotationExpressionFactory.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInvocation.java;camel-core/src/main/java/org/apache/camel/component/bean/XPathAnnotationExpressionFactory.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSet.java;camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java;camel-core/src/main/java/org/apache/camel/component/jmx/JMXEndpoint.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java;camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java;camel-core/src/main/java/org/apache/camel/converter/CamelConverter.java;camel-core/src/main/java/org/apache/camel/converter/CollectionConverter.java;camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/DomConverter.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/StringSource.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/main/java/org/apache/camel/impl/SerializationDataFormat.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/ArrayTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/EnumTypeConverter.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/processor/ThrowFaultProcessor.java;camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;camel-core/src/main/java/org/apache/camel/processor/resequencer/ResequencerEngine.java;camel-core/src/main/java/org/apache/camel/processor/resequencer/SequenceSender.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/main/java/org/apache/camel/util/UuidGenerator.java;tooling/camel-xsddoc/pom.xml;camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationAgentImpl.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingDefaultsTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingPlatformMBSTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingPropertiesTest.java;,0,0
524,Bug,Closed,Fixed,camel-core,Major,William Tam,2008/05/16 22:04:12 +0100,2008/05/17 00:36:29 +0100,Willem Jiang,2008/05/19 03:17:42 +0100,2.217708333,2.111956019,IntrumentationProcessor does properly record processing time,The InstrumentationLifeCycleStrategy inserts an InstrumentationProcessor interceptor at the end of a route which is intercepted after the processing has been done. The InstrumentationProcessor does not actually record the time spent on the route. It is fixed by inserting InstrumentationProcessor at the beginning of the route and wrapping all the outputs.There two MBeans (ManagedRoute and PerformanceCounter) registered for each route eventhough ManagedRoute already extends PerformanceCounter. We probably only need to expose one MBean. The ManagedRoute MBean shows performance attributes and operations (since it extends PerformanceCoutner) but these performance related stuffs don't really work. This is fixed by registering only the ManagedRoute MBean and making the performance related attributes and operations functional.This patch supports exposing all processors within a route as PerformanceCounter MBeans so that users are possible to monitor performance at the processor's level.With this patch  the org.apache.camel.spi package no longer depends CamelNamingStrategy of the org.apache.camel.management.management package. It follows the suggestion mentioned in https://issues.apache.org/activemq/browse/CAMEL-264.Another update is to following the JMX spec convention of including a 'type' property in the ObjectName (replacing the current 'groups' property). This patch also simplify the ManagedRoute's ObjectName a bit by removing builder and group properties. If for some reasons  they need to be in the ObjectName  please add them back.,1.3.0,1.4.0,0,0,207,1,3,3,0,0,0,0,0,0,1,10,camel-core/src/main/java/org/apache/camel/impl/RouteContext.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationAgentImpl.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationInterceptStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/spi/InstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/spi/InterceptStrategy.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingDefaultsTest.java;,0,0
536,Bug,Closed,Fixed,camel-cxf,Major,Eamonn Dwyer,2008/05/21 10:13:29 +0100,2008/05/21 15:31:35 +0100,Willem Jiang,2008/05/23 09:37:10 +0100,1.974780093,1.753877315,camel-cxf component not propagating context data,For POJO data formats the CxfProducer currently invokes the following method to invoke on a target serverresult = client.invoke(operation  parameters.toArray());This fails to setup the Request and Response contexts for the out (request) message and in (response) message. It should instead be copying the relevant data from the consumer and invoking the following operation on the Client interfaceObject[] invoke(BindingOperationInfo oi  Object[] params  Map&lt;String  Object&gt; context) throws Exception;Likewise the PAYLOAD and MESSAGE data formats are not setting up their contexts before they call the dispatch operation. In fact there is comments in the current codebase... // invoke the message prepare the context Map&lt;String  Object&gt; context = new HashMap&lt;String  Object&gt;(); Map&lt;String  Object&gt; requestContext = new HashMap&lt;String  Object&gt;(); Map&lt;String  Object&gt; responseContext = new HashMap&lt;String  Object&gt;(); // TODO Get the requestContext from the CamelExchange context.put(CxfClient.REQUEST_CONTEXT  requestContext); context.put(CxfClient.RESPONSE_CONTEXT  responseContext);The fix should also include a fix for all three data format types,1.3.0,1.4.0,0,0,145,1,3,1,0,0,0,0,0,0,1,6,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/CxfClient.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerTest.java;,0,0
539,Improvement,Closed,Fixed,camel-core,Major,Roman Kalukiewicz,2008/05/21 17:42:35 +0100,2008/05/21 17:42:35 +0100,Roman Kalukiewicz,2008/05/21 18:18:30 +0100,0.02494213,0.02494213,XsltBuilder synchronizes on process method making performance bad on XSLTs,In heavy load environment XSLT transformations have very bad performance.I propose to use javax.xml.transform.Templates object to produce separate Transformers for every execution.,1.3.0,1.4.0,0,0,22,1,3,2,0,0,0,0,1,0,1,1,camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;,0,0
541,Improvement,Closed,Fixed,camel-core,Major,Christian Schneider,2008/05/22 09:49:09 +0100,2009/03/01 11:17:39 +0100,Claus Ibsen,2009/03/01 11:35:17 +0100,283.0737037,0.01224537,The spi package should not depend on the processor package,I have found one other problem in RouteContext. The method intercept uses the class Interceptor from processor. I think Interceptor should be an interface that should reside in spi or camel. So we could avoid referencing the processor package from spi.When I look into the current Interceptor implementation I think the two main methods that need to be in the interface are process and proceed. Process can be inherited from Processor but proceed is only declared in the implementation class DelegateProcessor. So I think the clean way to handle this would be to create an interface DelegateProcessor and a spearate DefaultDelegateProcessor.public interface DelegateProcessor extends Processor { /** * Proceed with the underlying delegated processor */ public abstract void proceed(Exchange exchange) throws Exception; }and an interface Interceptorpublic interface Interceptor extends DelegateProcessor { public abstract void process(Exchange exchange) throws Exception; public abstract Processor getInterceptorLogic(); public abstract void setInterceptorLogic(Processor interceptorLogic); }When we put these to spi and use them instead of the implementations where possible the spi would not depend on processor anymore.,1.3.0; 1.4.0,2.0-M1,0,0,171,1,4,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/management/InstrumentationErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/spi/ErrorHandlerWrappingStrategy.java;,0,0
550,Bug,Closed,Fixed,camel-core; camel-spring,Major,Willem Jiang,2008/05/25 07:30:06 +0100,2008/05/25 07:30:06 +0100,Willem Jiang,2008/05/26 16:49:16 +0100,1.388310185,1.388310185,NPE from came:run with below route codes,With the following route: from('timer://tutorial?fixedRate=true&amp;period=10') .setBody( constant('&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;greetMe&gt;Hello World&lt;/greetMe&gt;')) .setHeader('CBR1'  constant('No')).choice().when( header('CBR1').isEqualTo('Yes')).setHeader( 'CreditcardValidation'  constant('Yes')).to( 'log:CBRBean?level=INFO').to('log:XSLT for provider1?level=INFO') .when(header('CBR1').isEqualTo('No')).setHeader( 'CreditcardValidation'  constant('No')).to( 'log:XSLT for provider2?level=INFO').end().choice() .when(header('CreditcardValidation').isEqualTo('Yes')) .to('log:CCVBean?level=INFO').to('log:XSLT for consumer1?level=INFO').when( header('CreditcardValidation').isEqualTo('No')) .to('log:XSLT for consumer2?level=INFO').otherwise() .to('log:test?level=INFO').end();running mvn camel:run I get the following stack trace:java.lang.NullPointerException at org.apache.camel.view.NodeData.&lt;init&gt;(NodeData.java:136) at org.apache.camel.view.GraphGeneratorSupport.getNodeData(GraphGeneratorSupport.java:142) at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:101) at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:123) at org.apache.camel.view.RouteDotGenerator.printRoute(RouteDotGenerator.java:87) at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:64) at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:48) at org.apache.camel.view.RouteDotGenerator.generateFile(RouteDotGenerator.java:169) at org.apache.camel.view.GraphGeneratorSupport.generateFile(GraphGeneratorSupport.java:103) at org.apache.camel.view.GraphGeneratorSupport.drawRoutes(GraphGeneratorSupport.java:81) at org.apache.camel.spring.Main.generateDot(Main.java:392) at org.apache.camel.spring.Main.postProcessContext(Main.java:374) at org.apache.camel.spring.Main.doStart(Main.java:333) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.Main.run(Main.java:123) at org.apache.camel.spring.Main.run(Main.java:114) at org.apache.camel.spring.Main.main(Main.java:106) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:333) at java.lang.Thread.run(Thread.java:613)the error seems related to the maven camel plugin failing generating the dot file for the route.,1.2.0; 1.3.0,1.4.0,0,0,116,1,1,1,0,1,0,0,0,0,1,10,camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/model/ChoiceType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/view/NodeData.java;camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java;camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java;,0,0
551,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/05/26 05:17:46 +0100,2008/05/26 05:17:46 +0100,Claus Ibsen,2008/05/26 06:10:21 +0100,0.036516204,0.036516204,File component - noop does not lock the file during processing,The noop=true option does not lock the file during processing as it states in its class javadoc. The parameter is false. It should be true instead. public NoOpFileProcessStrategy() { super(false); },1.3.0,1.4.0,0,0,31,1,1,1,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/NoOpFileProcessStrategy.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerFailureHandledTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileNoOpLockFileTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerRenameStrategyTest.java;,0,0
552,Bug,Closed,Fixed,camel-spring,Major,Claus Ibsen,2008/05/28 05:34:40 +0100,2008/05/28 05:34:40 +0100,Claus Ibsen,2008/05/29 05:46:24 +0100,1.008148148,1.008148148,camel-spring is dependent on spring-aop,&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;${spring-version}&lt;/version&gt; &lt;/dependency&gt;is needed in pom.xml for camel-spring as its needed to let camel-spring component work out-of-the-box. Without it the camel-example-spring does not work and blows up with a ClassNotFoundException when you use camel:run,1.3.0,1.4.0,0,0,37,1,0,0,0,0,0,0,0,0,1,1,components/camel-spring/pom.xml;,0,0
574,Bug,Closed,Fixed,,Major,Willem Jiang,2008/06/04 02:42:58 +0100,2008/06/04 02:42:58 +0100,Willem Jiang,2008/06/04 03:38:07 +0100,0.038298611,0.038298611,Multicast default excecutor do not create the enough thread for parallel processing,When I added the loan broker example CAMEL-556  I found there is no performance improvement when using the parallelly mulitcast.After digging into to code  I found we should create the enough thread for the parallel processing.,1.3.0,1.4.0,0,0,45,1,1,1,0,0,0,0,1,0,1,1,camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;,0,0
581,Bug,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2008/06/05 10:13:58 +0100,2008/06/05 10:13:58 +0100,Claus Ibsen,2008/06/06 06:14:07 +0100,0.8334375,0.8334375,CamelTemplate should clear endpoint cache when stopping,Only the producer cache is stopped and cleared // start and stop in camel template protected void doStart() throws Exception { producerCache.start(); } protected void doStop() throws Exception { producerCache.stop(); } // stop in producer cache protected void doStop() throws Exception { ServiceHelper.stopServices(producers.values()); producers.clear(); },1.3.0,1.4.0,0,0,60,1,0,0,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java;,0,0
582,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2008/06/06 08:02:49 +0100,2008/06/07 15:15:10 +0100,Claus Ibsen,2008/06/12 05:08:45 +0100,5.87912037,4.578877315,JMX Instrumentation - PerformanceCounter - total processed,William Tam  this one is for you The total processed time is not exposed to as a managed attribute. And it should be changed from double to long.,1.3.0,1.4.0,0,0,35,1,10,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/management/PerformanceCounter.java;camel-core/src/test/java/org/apache/camel/component/file/FileProduceGeneratedFileNameTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingDefaultsTest.java;,0,0
593,Bug,Closed,Fixed,camel-core,Minor,Dave Brosius,2008/06/08 22:59:59 +0100,2008/06/09 03:52:40 +0100,Willem Jiang,2008/06/09 09:23:38 +0100,0.433090278,0.229837963,[patch] Make sure streams get closed,a couple places streams are opened and are not closed. patch fixes this.,1.3.0,1.4.0,0,0,13,1,2,2,0,0,0,0,1,0,1,9,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/converter/NIOConverter.java;camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/model/RedeliveryPolicyType.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/util/PackageHelper.java;camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java;,0,0
594,Bug,Closed,Fixed,documentation; examples,Major,Jonathan Anstey,2008/06/09 15:34:01 +0100,2008/06/09 15:34:01 +0100,Jonathan Anstey,2008/06/09 19:11:52 +0100,0.151284722,0.151284722,Missing compile step in example readmes,I noticed that some examples that are run via mvn exec:java require that the example be compiled first. I've updated the readmes to include this step...,1.4.0,1.4.0,0,0,26,1,3,2,0,0,0,0,0,0,1,4,examples/camel-example-cxf/README.txt;examples/camel-example-jms-file/README.txt;examples/camel-example-loan-broker/README.txt;examples/camel-example-spring-jms/README.txt;,0,0
596,Improvement,Closed,Fixed,camel-jms,Trivial,Dave Brosius,2008/06/09 18:44:53 +0100,2008/06/09 19:30:12 +0100,Claus Ibsen,2008/06/09 19:38:43 +0100,0.037384259,0.005914352,[patch] postpone creating browsing strategy until and only if its needed,code creates queue browsing strategy even if not needed. patch pushes creation down to relevant branch.,1.3.0,1.4.0,0,0,16,1,2,1,0,0,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;,0,0
613,Improvement,Closed,Fixed,jmx,Major,Willem Jiang,2008/06/17 04:27:12 +0100,2008/06/17 04:27:12 +0100,Willem Jiang,2008/06/24 14:02:30 +0100,7.399513889,7.399513889,Change the JMX default connetor's URL to avoid the confilict with the ActiveMQ or ServiceMix JMX default connector,Since the Camel default JMX connector's URL is same with ActiveMQ and ServiceMix default JMX Connector URL  we need to change it to avoid the conflict.,1.3.0,1.4.0,0,1,26,1,9,3,0,0,0,0,0,0,3,59,camel-core/pom.xml;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java;camel-core/src/main/java/org/apache/camel/impl/DelegateLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/management/JmxSystemPropertyKeys.java;camel-core/src/main/java/org/apache/camel/model/AggregatorType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/model/ResequencerType.java;camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java;camel-core/src/main/java/org/apache/camel/spi/ErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/spi/InstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/spi/LifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/spi/RouteContext.java;camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationDisableTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingDefaultsTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingPlatformMBSTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingPropertiesTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java;components/camel-atom/pom.xml;components/camel-csv/pom.xml;components/camel-ftp/pom.xml;components/camel-http/pom.xml;components/camel-jcr/pom.xml;components/camel-jdbc/pom.xml;components/camel-jetty/pom.xml;components/camel-josql/pom.xml;components/camel-juel/pom.xml;components/camel-mina/pom.xml;components/camel-ognl/pom.xml;components/camel-quartz/pom.xml;components/camel-rmi/pom.xml;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelJMXAgentType.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringInstrumentationAgent.java;components/camel-spring/src/test/java/org/apache/camel/spring/DefaultJMXAgentTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/DisableJmxAgentTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/DummyLifecycleStrategy.java;components/camel-spring/src/test/java/org/apache/camel/spring/JMXAgentTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/managment/CamelChoiceWithManagementTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/managment/JmxInstrumentationWithConnectorTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/defaultJmxConfig.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/disableJmxConfig.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/jmxConfig.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/management/jmxInstrumentationWithConnector.xml;components/camel-sql/pom.xml;components/camel-stream/pom.xml;components/camel-xmlbeans/pom.xml;components/camel-xmpp/pom.xml;components/camel-xstream/pom.xml;components/camel-spring/src/test/java/org/apache/camel/spring/JMXAgentTest.java;camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java;,0,0
615,Improvement,Closed,Fixed,camel-velocity,Major,Hadrian Zbarcea,2008/06/17 17:46:50 +0100,2008/06/18 01:40:10 +0100,Willem Jiang,2008/06/18 03:44:16 +0100,0.414884259,0.086180556,Headers should be modifiable using velocity templates,See context at:http://www.nabble.com/Exchange-headers-in-velocity-td17916457s22882.html,1.3.0; 1.4.0,1.4.0,0,0,6,1,3,2,0,0,0,0,0,0,2,7,components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-velocity/src/test/java/org/apache/camel/component/velocity/FruitFilter.java;components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocitySetHeaderTest.java;components/camel-velocity/src/test/resources/org/apache/camel/component/velocity/AppleTemplate.vm;components/camel-velocity/src/test/resources/org/apache/camel/component/velocity/OrangeTemplate.vm;components/camel-velocity/src/test/resources/org/apache/camel/component/velocity/camel-context.xml;components/camel-velocity/pom.xml;,0,0
620,Bug,Closed,Fixed,camel-core,Major,William Tam,2008/06/19 23:45:43 +0100,2008/06/24 05:14:23 +0100,Claus Ibsen,2008/06/24 05:45:36 +0100,4.249918981,0.021678241,ResequencerType.createProcessor could throw NPE as stream config does not get initialized.,java.lang.NullPointerException at org.apache.camel.model.ResequencerType.createStreamResequencer(ResequencerType.java:198) at org.apache.camel.model.ResequencerType.createProcessor(ResequencerType.java:163) at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:1584) at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:93) at org.apache.camel.model.InterceptorRef.createProcessor(InterceptorRef.java:61) at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1471) at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:97) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:210) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:80) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:462) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:454) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108) at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81) at org.apache.camel.processor.ResequencerTest.setUp(ResequencerTest.java:48) at junit.framework.TestCase.runBare(TestCase.java:128) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196),1.3.0; 1.4.0,1.4.0,0,0,57,1,6,2,0,0,0,1,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/ResequencerType.java;camel-core/src/test/java/org/apache/camel/processor/ResequencerTest.java;camel-core/src/test/java/org/apache/camel/processor/StreamResequencerTest.java;,0,0
621,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/06/20 06:01:51 +0100,2008/06/20 06:01:51 +0100,Claus Ibsen,2008/08/22 06:36:09 +0100,63.02381944,63.02381944,File component - file rename pattern to support patterns such as date time etc.,A very common use case is to copy received messages into files stored in a backup folder with sub folders named with the date pattern etc.,1.3.0; 1.4.0,1.5.0,0,0,26,1,12,2,0,0,0,0,0,0,3,35,camel-core/src/main/java/org/apache/camel/component/file/strategy/FileExpressionRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLanguageRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/language/simple/FileExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/language/simple/FileLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerExpressionTest.java;camel-core/src/test/java/org/apache/camel/language/FileLanguageTest.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/FileProducer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/DefaultFileRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLanguageRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileRenamer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/RenameFileProcessStrategy.java;camel-core/src/main/java/org/apache/camel/language/bean/BeanLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/AbstractSimpleLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/FileExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/language/simple/FileLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/main/resources/META-INF/services/org/apache/camel/language/file;camel-core/src/test/java/org/apache/camel/TestSupport.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerExpressionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerExpressionTest.java;camel-core/src/test/java/org/apache/camel/language/FileLanguageTest.java;camel-core/src/test/java/org/apache/camel/language/SimpleTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpExclusiveReadTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpNoFilesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpNonExclusiveReadTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerBuildDirectoryTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerBuildPartOfDirectoryTest.java;,0,0
627,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/06/23 06:04:25 +0100,2008/06/24 06:01:09 +0100,Claus Ibsen,2008/06/25 06:09:25 +0100,2.003472222,1.005740741,JMX Instrumentation - PerformanceCounter - last processed timestamp when failed,I thought about another real life use case we have at work once in a while.a) when was the last time the integration worked?b) when was the last time the integration was invoked?We do have option a covered now with lastExchangeCompletionTime.However I would like another timestamp for lastExchangeTime that is just a record the last time it was processed (even if it failed).PS: At work we do have to grep through logfiles in our legacy EIP platform.,1.4.0,1.4.0,0,0,77,1,2,1,0,0,0,0,0,0,2,10,camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationInterceptStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/management/PerformanceCounter.java;examples/camel-example-spring-jms/src/main/resources/META-INF/spring/camel-server-aop.xml;examples/camel-example-spring-jms/src/main/resources/META-INF/spring/camel-server.xml;examples/camel-example-spring-jms/src/main/resources/camel-client-remoting.xml;examples/camel-example-spring-jms/src/main/resources/camel-client.xml;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;,0,0
634,Bug,Closed,Fixed,camel-core; camel-jms,Major,Marat Bedretdinov,2008/06/24 23:09:21 +0100,2008/06/29 18:23:33 +0100,Claus Ibsen,2008/07/01 15:29:54 +0100,6.6809375,1.879409722,DeadLetterChannel default redelivery policy eclipsed expected transactional behaviour in a transacted route,Camel routes get a DLC processor with a redelivery policy  which defaults to redeliverying a message to a destination processor up to 6 times. In case of a transacted route it is preferable that DLC's delivery policy be reset to a single attempt  so that a fan-out transacted route would not hold tx locks on destinations for too long. The DLC's default redelivery policy has also made transactional tests not really testing tx behavior of Camel Components backed runtimes (jms brokers  etc)  rather DLC would catch the exception and try to redeliver the message to destination processor and not letting the components to rollback native transactions initiated by components backed runtimes (jms  db)The attached patch installs a property into Camel Exchange that indicates weather a route is transacted. This is done in org.apache.camel.spring.spi.TransactionInterceptor.javaDLC then checks if the flow is transacted and sets its redelivery policy to 1With this change JMS transactions are actually rolled back and messages are put back into the queue and then consumed again  verifying that brokers support transactions and can redeliver messages into Camel routes that were previously rolled back.,1.4.0,1.4.0,0,1,184,1,18,3,0,0,0,0,1,0,1,13,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/ExchangeProperty.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/test/java/org/apache/camel/ExchangePropertyTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/ConditionalExceptionProcessor.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/QueueToQueueRequestReplyTransactionTest.java;components/camel-spring/pom.xml;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionInterceptor.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/BookService.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/transactionalClientDataSource.xml;,0,0
636,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/06/25 12:40:27 +0100,2008/06/25 12:40:27 +0100,Claus Ibsen,2008/07/09 17:18:26 +0100,14.19304398,14.19304398,ResolverUtil can't resolve converter annotations in WebSphere 6.1,I have a simple hello world file based ESB that scans a folder for files  invoke a POJO and store the output as a file in another folder.Deployed as a WAR file in WebSphere it seems as if Camel 1.4-SNAPSHOT can not load the converters needed to converter to String to InputStream for the FileProducer when it is about to store the file.The logging output where the ResolverUtil can't find the annotated converters in camel jar itself[06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.spring.converter  org.apache.camel.converter][06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Found: []And the stacktrace:org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: This is important work/temp/camel/in/README.txtDone by me. of type: java.lang.String on: Message: This is important work/temp/camel/in/README.txtDone by me. on the exchange: Exchange[Message: This is important work/temp/camel/in/README.txtDone by me.] at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127) at org.apache.camel.component.file.FileProducer.process(FileProducer.java:67) at org.apache.camel.component.file.FileProducer.process(FileProducer.java:55) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146),1.4.0,1.4.0,0,0,171,1,7,1,0,0,0,0,0,0,3,6,camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/util/WebSphereResolverUtil.java;camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java;camel-core/src/main/java/org/apache/camel/util/WebSphereResolverUtil.java;,0,0
642,Bug,Closed,Fixed,camel-jms,Major,Willem Jiang,2008/06/27 13:51:28 +0100,2008/07/02 10:43:53 +0100,Willem Jiang,2008/07/04 09:32:51 +0100,6.820405093,1.950671296,jms aggregation does not work,I found this issue when I test Camel 1.4.0 RC2 kit  I just add a test case to show the error.https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.javaYou can reproduce the error if you remove the x character from xtestJmsMulticastAndAggregration() method.BTW the test case works with the Camel 1.4.0 RC1.,1.4.0,1.4.0,0,0,46,1,11,3,0,0,0,0,0,0,4,15,examples/camel-example-loan-broker/src/main/java/org/apache/camel/loanbroker/queue/version/Bank.java;examples/camel-example-loan-broker/src/main/java/org/apache/camel/loanbroker/queue/version/BankResponseAggregationStrategy.java;examples/camel-example-loan-broker/src/main/java/org/apache/camel/loanbroker/queue/version/Client.java;examples/camel-example-loan-broker/src/main/java/org/apache/camel/loanbroker/queue/version/LoanBroker.java;apache-camel/bundle/pom.xml;apache-camel/pom.xml;examples/camel-example-loan-broker/src/main/java/org/apache/camel/loanbroker/queue/version/LoanBroker.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java;camel-core/src/main/java/org/apache/camel/model/AggregatorType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/main/java/org/apache/camel/spi/RouteContext.java;components/camel-jdbc/pom.xml;components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.java;,0,0
652,Bug,Closed,Fixed,examples,Major,Willem Jiang,2008/06/30 10:24:19 +0100,2008/06/30 10:24:19 +0100,Willem Jiang,2008/06/30 12:51:26 +0100,0.102164352,0.102164352,camel-cxf example build.xml is out of date,Need to update the build.xml of example-camel-cxf to support run the examples of camel transport and web service provider API.,1.3.0,1.4.0,0,0,20,1,1,1,0,0,0,0,0,0,1,2,examples/camel-example-cxf/README.txt;examples/camel-example-cxf/build.xml;,0,0
653,Bug,Closed,Fixed,camel-jms,Major,Bruce Elmore,2008/06/30 13:57:16 +0100,2008/07/02 06:20:46 +0100,Claus Ibsen,2008/07/02 19:45:20 +0100,2.241712963,0.558726852,Bean method lost when sending a message from one JMS queue to another,I noticed a problem in JmsBinding.java. If Camel has read a JMS message from a queue and that message has a bean method specified in the header ('org.apache.camel.MethodName')  the method header will removed if that message is written to another queue. Here's the offending code:  protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage  String headerName   Object headerValue) { return headerValue != null &amp;&amp; !getIgnoreJmsHeaders().contains(headerName) &amp;&amp; ObjectHelper.isJavaIdentifier(headerName); } 'org.apache.camel.MethodName' fails the check isJavaIdentifier and is excluded from the headers written to the new message. I'm not sure the purpose of this check  but this might be an unintended side effect. The call chain is something like this: JmsProducer.process JmsBinding.makeJmsMessage JmsBinding.appendJmsProperties JmsBinding.shouldOutputHeader Update: Experimenting later with WebLogic's JMS  I noticed that WebLogic (9.2) does not allow this header name. Maybe this was the original motivation for this check. In order to be compatible with WebLogic  perhaps the method header name should changed to something like 'CamelMethod'. I believe this would correct both problems.,1.3.0; 1.4.0,1.4.0,0,1,159,1,13,2,0,0,0,0,0,0,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsBeanMethodHeaderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsFilenameHeaderTest.java;,0,0
656,Improvement,Closed,Fixed,documentation,Major,Claus Ibsen,2008/07/02 05:17:32 +0100,2008/07/02 05:17:32 +0100,Claus Ibsen,2009/05/07 05:11:37 +0100,308.9958912,308.9958912,Component documentation - needs overhaul  check for missing options  add more samples java/spring  etc,Our extensive list of components needs to be checked for its state of current documentation standard in the wiki.The should be checked for options headers they use/set pitfalls samples both java and spring XML see also etcAnd whats the difference / relation to similar component (the http ones  the sql ones etc.),1.3.0; 1.4.0,2.0-M2,0,0,54,1,11,1,0,0,0,0,0,0,10,24,camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java;camel-core/src/main/java/org/apache/camel/component/direct/DirectProducer.java;camel-core/src/test/java/org/apache/camel/component/direct/DirectNoMultipleConsumersTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaConsumerTest.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSet.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetConsumer.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java;camel-core/src/main/java/org/apache/camel/model/AggregatorType.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanComponent.java;camel-core/src/test/java/org/apache/camel/component/pojo/PojoRouteTest.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaPayloadHolder.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaClientServerTest.java;camel-core/src/test/java/org/apache/camel/component/ref/RefComponentTest.java;camel-core/src/main/java/org/apache/camel/component/log/LogComponent.java;camel-core/src/main/java/org/apache/camel/processor/Logger.java;camel-core/src/test/java/org/apache/camel/component/log/ThroughputLoggerTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailComponent.java;camel-core/src/main/java/org/apache/camel/component/list/ListEndpoint.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/FileAsyncRouteTest.java;camel-core/src/test/java/org/apache/camel/component/list/ListRouteTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/bind/BeanAsEndpointTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/bind/ExampleBean.java;components/camel-spring/src/test/resources/org/apache/camel/spring/bind/beanAsEndpoint.xml;,0,0
663,Improvement,Closed,Fixed,camel-core; camel-spring,Major,james strachan,2008/07/03 20:19:32 +0100,2008/07/03 20:19:32 +0100,james strachan,2008/07/12 06:46:23 +0100,8.4353125,8.4353125,create a TransactionErrorHandler so you can easily  use a transaction & rollback on a route - with redeliveryDelay to just fail the route if it can't be processed,create a TransactionErrorHandler so you can easily  use a transaction & rollback on a route - with redeliveryDelay to just fail the route if it can't be processed,1.4.0,1.4.0,0,0,1,1,9,3,0,0,0,0,0,0,2,9,camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringRouteBuilder.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionInterceptor.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceWithDefaultErrorHandlerTest.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionInterceptor.java;,0,0
668,Improvement,Closed,Fixed,,Minor,Claus Ibsen,2008/07/04 13:19:09 +0100,2008/07/05 12:41:08 +0100,Claus Ibsen,2008/07/05 13:05:09 +0100,0.990277778,0.016678241,Transactional Client - Setting Spring Policy is a bit cumbersome in the XML,Currently you have to setup the transaction demarcation in the spring xml file as: &lt;bean id='PROPAGATION_REQUIRED' class='org.apache.camel.spring.spi.SpringTransactionPolicy'&gt; &lt;constructor-arg&gt; &lt;bean class='org.springframework.transaction.support.TransactionTemplate'&gt; &lt;property name='transactionManager' ref='jmsTransactionManager'/&gt; &lt;/bean&gt; &lt;/constructor-arg&gt; &lt;/bean&gt;to be able to use the policy from XML directly in the tag: &lt;camel:policy ref='PROPAGATION_REQUIRED'/&gt;We should support a neater syntax without the nested bean and constructor args.,1.4.0,1.4.0,0,0,72,1,2,1,0,0,0,0,0,0,2,4,components/camel-spring/src/main/java/org/apache/camel/spring/spi/SpringTransactionPolicy.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/transactionalClientDataSource.xml;components/camel-spring/src/main/java/org/apache/camel/spring/spi/SpringTransactionPolicy.java;,0,0
684,Improvement,Closed,Fixed,,Major,Gert Vanthienen,2008/07/07 13:41:32 +0100,2008/07/07 13:41:32 +0100,Gert Vanthienen,2008/07/07 15:12:42 +0100,0.063310185,0.063310185,Upgrade Geronimo specs to 1.1.1 when available,We should upgrade to the 1.1.1 version of the different Geronimo specs jar &#8211; they include the necessary OSGi metadata.,1.3.0,1.4.0,0,0,20,1,1,1,0,0,0,0,0,0,1,2,components/camel-bam/pom.xml;pom.xml;,0,0
686,Bug,Closed,Fixed,camel-cxf,Major,Claus Ibsen,2008/07/08 12:05:57 +0100,2008/07/08 12:05:57 +0100,Willem Jiang,2008/07/10 05:02:19 +0100,1.705810185,1.705810185,CXF - Feedback from Eduard on problems with CXF over JMS,See user forum:http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html,1.4.0,1.4.0,0,0,6,1,4,2,0,0,0,0,0,0,2,17,tests/camel-itest/pom.xml;tests/camel-itest/src/main/resources/META-INF/LICENSE.txt;tests/camel-itest/src/main/resources/META-INF/NOTICE.txt;tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServiceV1Impl.java;tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServicesTest.java;tests/camel-itest/src/test/resources/commons-logging.properties;tests/camel-itest/src/test/resources/spring-config/client-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/jms-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/server-applicationContext.xml;tests/camel-itest/src/test/resources/wsdl/CustomerService-1.0.0.wsdl;tests/camel-itest/src/test/resources/xsd/Address.xsd;tests/camel-itest/src/test/resources/xsd/Customer.xsd;tests/camel-itest/src/test/resources/xsd/Gender.xsd;tests/camel-itest/src/test/resources/xsd/Person.xsd;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java;,0,0
688,Bug,Closed,Fixed,,Major,Freeman Fang,2008/07/10 04:22:28 +0100,2008/07/10 04:44:33 +0100,Willem Jiang,2008/07/10 11:20:43 +0100,0.290451389,0.275115741,process method of should check ExchnagePAttern before setting out,process method of should check ExchnagePAttern before setting out,1.3.0; 1.4.0,1.4.0,0,0,1,1,9,3,0,0,0,0,0,0,2,19,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/language/bean/BeanExpression.java;camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java;camel-core/src/main/java/org/apache/camel/util/WebSphereResolverUtil.java;camel-core/src/test/java/org/apache/camel/component/bean/NewInstanceTest.java;camel-core/src/test/java/org/apache/camel/component/direct/DirectNoToTypeTest.java;camel-core/src/test/java/org/apache/camel/language/BeanTest.java;camel-core/src/test/java/org/apache/camel/processor/MethodFilterTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/DummyOrder.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsBeanMethodHeaderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsConcurrentConsumersTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsHeaderAsObjectTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsRedeliveryWithInitialRedeliveryDelayTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/temp/TemporaryQueueRouteTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/bind/BeanAsEndpointTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/MyFailureProcessor.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/test/java/org/apache/camel/component/file/BeanToFileTest.java;,0,0
696,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/07/11 09:38:47 +0100,2008/07/11 09:38:47 +0100,Claus Ibsen,2008/07/11 12:20:31 +0100,0.112314815,0.112314815,ProducerTemplate doenst honor exchange pattern when it extracts the result,The code the extracts the result that is returned when you use the sendXXX  requestXXX methods on the producer template doens't honor the exchange pattern. protected Object extractResultBody(E result) { Object answer = null; if (result != null) { Message out = result.getOut(false); if (out != null) { answer = out.getBody(); } else { answer = result.getIn().getBody(); } } return answer; }It defaults to preferring out messages all the time. But in some circumstances the out body could be set to null but the real response is in the in body.Setting the exchange pattern to InOnly doesn't honor this.Maybe this ticket is a symptom of the MEP problem that we have in Camel. See the discussion on the dev forum.,1.3.0,1.4.0,0,0,138,1,1,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java;,0,0
697,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/07/11 09:53:15 +0100,2008/07/11 09:53:15 +0100,Claus Ibsen,2008/07/11 10:23:31 +0100,0.021018519,0.021018519,transform() doesnt propogate headers,The new transform() DSL doesn't propogate headers so you can not do: from('direct:four') .transform().constant('London') .to('mock:result');And expect that any headers on the exchange at direct:four is received after the transform,1.4.0,1.4.0,0,0,39,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/TransformProcessor.java;camel-core/src/test/java/org/apache/camel/processor/TransformProcessorWithHeaderTest.java;,0,0
707,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/07/12 07:29:31 +0100,2008/07/12 09:09:09 +0100,Claus Ibsen,2008/07/12 09:43:15 +0100,0.09287037,0.023680556,JMX Instrumentation - Nodeid can be null,The processors that is registered in JMX can have null in their id. So the JMX path is processor -&gt; null -&gt; 0.Either we should replace null with unknown as we do for endpoints. Or try to fix that the id is generated.,1.4.0,1.4.0,0,0,43,1,3,1,0,0,0,0,0,0,2,4,camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/test/java/org/apache/camel/management/MultiInstanceProcessorTest.java;camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;,0,0
709,Improvement,Closed,Fixed,camel-cxf,Major,Claus Ibsen,2008/07/12 15:30:53 +0100,2008/07/13 13:42:06 +0100,Willem Jiang,2008/07/14 06:51:10 +0100,1.639085648,0.71462963,CXF - Easier use for end-user to retreive POJO data,I am working on a web app example that uses CXF to expose a webservice.During the process I thought that getting my POJO object (InputReportIncident) was a bit clumsy as I had to do; MessageContentsList list = exchange.getIn().getBody(MessageContentsList.class); InputReportIncident in = (InputReportIncident) list.get(0);So I have created a patch that improves the getBody to be more end-user friendly.You can now do  as you always do in Camel: InputReportIncident in = exchange.getIn().getBody(InputReportIncident.class);Just cast it to what you expect and want to work with.InputReportIncident is a POJO object generated by the CXF wsdl2java generator.Willem could you take a look? Maybe I have misunderstood the CXF and there is a easier way already. But I don't like the need to get the List and then get (0) to get my POJO.Sending the response is already supported nicely: // the response OutputReportIncident out = new OutputReportIncident(); out.setCode('Bye Claus'); exchange.getOut().setBody(out);,1.4.0,1.4.0,0,0,168,1,4,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java;,0,0
713,Bug,Closed,Fixed,camel-core,Critical,Claus Ibsen,2008/07/13 12:50:01 +0100,2008/07/13 12:50:01 +0100,Claus Ibsen,2008/07/13 13:35:45 +0100,0.031759259,0.031759259,FileProducer - consumes file instead of producing!,The strange code in the FileProducer that if the exchange is out capable it will poll the file instead bites us big time.James must have had a beer and a fancy moment when he created the code. Something with a dynamic receipentlist where the endpoints should be polled from a file but the expression uses a Producer when the endpoints is created. For the file it should consume instead but it doesn't. Any basically it should consume instead.It also bites us when we send an InOut exchange to the FileProducer it will not produce the file but consume it and there is no file so nothing happens.This codepublic class FileBackupTest extends ContextTestSupport { public void testMailGeneration() throws Exception { MockEndpoint mock = getMockEndpoint('mock:result'); mock.expectedMessageCount(1); template.requestBody('seda:mails'  'Hello World'); mock.assertIsSatisfied(); } protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { from('seda:mails') .to('file:target/mails') .to('mock:result'); } }; }Would not create a file in target/mails folder as we are using template.request that is an InOut MEP.I will fix it by removing the strange consumer code in the FileProducer and change the fancy dynamic recepientlist test (SimulatorTest)  to not use file based endpoints.It could be a blocker for the 1.4 release and we should consider creating a new RC!,1.3.0; 1.4.0,1.4.0,0,0,233,1,3,1,0,0,0,0,0,0,2,6,camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java;camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java;camel-core/src/main/java/org/apache/camel/component/file/FileProducer.java;camel-core/src/test/java/org/apache/camel/component/file/FileHeaderFileNameProducedTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java;camel-core/src/test/java/org/apache/camel/processor/SimulatorTest.java;,0,0
714,Improvement,Closed,Fixed,,Major,Claus Ibsen,2008/07/14 07:26:10 +0100,2009/03/31 13:51:01 +0100,Claus Ibsen,2009/04/02 14:29:45 +0100,262.2941551,2.026898148,Change default DeadLetterChannel strategy in Camel,The current DLC strategy in Camel is to retry 6 times with 1 sec delay. If still failed it will be moved to a log WARN.This default behavior is not feasible for most end-users  in fact none. We should have a better default strategy in Camel.Also we should force end-users to setup a strategy from the start.And we should improve this in the documentation so end-users is aware of this.,1.3.0; 1.4.0,2.0-M2,0,0,70,1,3,1,0,0,0,0,0,0,1,51,camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/processor/DefaultErrorHandler.java;camel-core/src/test/java/org/apache/camel/builder/BuilderWithScopesTest.java;camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderTest.java;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderWithHandledExceptionTest.java;camel-core/src/test/java/org/apache/camel/builder/InterceptorBuilderWithEndTest.java;camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java;camel-core/src/test/java/org/apache/camel/issues/ExceptionTest.java;camel-core/src/test/java/org/apache/camel/issues/RomeksExceptionTest.java;camel-core/src/test/java/org/apache/camel/management/ExceptionWithManagementTest.java;camel-core/src/test/java/org/apache/camel/processor/BeanWithExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelExceptionCausePropagatedTest.java;camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerExplicitConfiguredTest.java;camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/MulticastStreamCachingTest.java;camel-core/src/test/java/org/apache/camel/processor/RedeliveryPolicyPerExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/ResequencerTest.java;camel-core/src/test/java/org/apache/camel/processor/StreamResequencerTest.java;camel-core/src/test/java/org/apache/camel/processor/StreamSourceContentBasedRouterTest.java;camel-core/src/test/java/org/apache/camel/processor/ThreadTest.java;camel-core/src/test/java/org/apache/camel/processor/TraceableUnitOfWorkTest.java;camel-core/src/test/java/org/apache/camel/processor/ValidatingProcessorTest.java;camel-core/src/test/java/org/apache/camel/processor/ValidationWithExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/ValidationWithHandlePipelineAndExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/ValidationWithInFlowExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategyUsingWhenTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/WsdlFirstBeans.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/WsdlFirstBeansPayloadMode.xml;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsXMLRouteTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/AbstractTransactionTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/QueueToProcessorTransactionTest.java;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/InterceptorTest.scala;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/RedeliveryPolicyRefTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/deadLetterChannelHandledExampleTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/onExceptionNotNormalizedClassNameTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/onExceptionSubRouteTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildCustomProcessor.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildCustomProcessorWithFilter.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildDynamicRecipientList.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildIdempotentConsumer.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildRouteWithInterceptor.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildSimpleRoute.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildSimpleRouteWithChoice.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildSimpleRouteWithHeaderPredicate.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildSplitter.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildStaticRecipientList.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildWireTap.xml;,0,0
721,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/07/15 07:56:17 +0100,2008/07/15 07:56:17 +0100,Claus Ibsen,2008/07/15 10:33:28 +0100,0.109155093,0.109155093,Log component should use ExchangeFormatter for formatting log output,Currently log component only logs the payload. We have a nice ExchangeFormatter that can format an exchange with all kind of options.The options could be enabled on the log component so you can customize your logging. Also there should be a multiline option to the exchange formatter so it can log all the stuff on multi lines if for instance there are many options  they get very long.,1.4.0,1.4.0,0,0,68,1,2,1,0,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/component/log/LogComponent.java;camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/main/java/org/apache/camel/processor/Logger.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceFormatter.java;camel-core/src/test/java/org/apache/camel/component/log/LogFormatterTest.java;,0,0
723,Improvement,Closed,Fixed,camel-cxf,Major,Claus Ibsen,2008/07/15 12:04:34 +0100,2008/07/15 12:04:34 +0100,Willem Jiang,2008/08/26 10:00:01 +0100,41.91350694,41.91350694,CXF - wrapper/unwrapper - camel-cxf should be smarter,Willem knows what this is. See chat log on the july-15-2008.Basically getBody() should be smart in what kind of situation you are using CXF.,1.4.0,1.5.0,0,0,24,1,7,2,0,0,0,0,0,0,3,11,components/camel-cxf/pom.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfNonWrapperTest.java;components/camel-cxf/src/test/java/org/apache/camel/non_wrapper/PersonProcessor.java;components/camel-cxf/src/test/java/org/apache/camel/wsdl_first/PersonProcessor.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/nonWrapperProcessor.xml;components/camel-cxf/src/test/resources/person-non-wrapper.wsdl;components/camel-cxf/pom.xml;components/camel-cxf/src/test/resources/person-non-wrapper-binding.xml;components/camel-cxf/src/test/resources/person-non-wrapper.wsdl;components/camel-cxf/src/test/java/org/apache/camel/non_wrapper/PersonProcessor.java;,0,0
726,Bug,Closed,Fixed,camel-cxf,Major,Eduard Hildebrandt,2008/07/15 16:28:07 +0100,2008/07/16 07:13:32 +0100,Willem Jiang,2008/07/24 04:13:36 +0100,8.489918981,7.875046296,Exception on using WS-Addressing with Apache Camel as Transport,Not sure if this is a bug in CXF or Camel. Please see attached sample project.--------------------------------------------------INFO: Interceptor has thrown exception  unwinding noworg.apache.cxf.binding.soap.SoapFault: A header representing a Message Addressing Property is not valid and the message cannot be processed at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:375) at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:159) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78) at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:148) at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:172) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875) at java.lang.Thread.run(Thread.java:595),1.4.0,1.5.0,0,0,88,1,10,3,0,0,0,0,0,0,1,6,tests/camel-itest/src/main/resources/wsdl/CustomerService_noSoapAction.wsdl;tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServicesWsAddressingTest.java;tests/camel-itest/src/test/resources/spring-config/client-WsAddressingContext.xml;tests/camel-itest/src/test/resources/spring-config/client-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/server-WsAddressingContext.xml;tests/camel-itest/src/test/resources/spring-config/server-applicationContext.xml;,0,0
727,Bug,Closed,Fixed,camel-cxf,Major,William Tam,2008/07/15 19:35:03 +0100,2008/07/15 19:35:03 +0100,Willem Jiang,2008/07/15 20:35:11 +0100,0.041759259,0.041759259,Propagated CXF header's value should not include quotes,CAMEL-686 fixed the issue of not propagating transport headers (e.g. SOAPAction) but it looks like we added quotes around the value (i.e. getCustomer becomes 'getCustomer'). I updated the CustomerServicesTest to illustrate the problem. Also  I cleaned up the client/server-application.xml.,1.3.0,1.4.0,0,0,53,1,2,2,0,0,0,0,0,1,1,3,tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServicesTest.java;tests/camel-itest/src/test/resources/spring-config/client-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/server-applicationContext.xml;,0,0
732,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/07/17 09:41:33 +0100,2008/07/17 09:41:33 +0100,Claus Ibsen,2008/07/17 12:47:39 +0100,0.129236111,0.129236111,JMX Instrumentation - check for already registered before registering,Camel does not check for already registered mbeans. There can be shared endpoints in the camel routes etc.We used to have an instance count and everything but at the end a jms endpoint such as 'activemq:topic:orders' can be reused in several routes and we should in fact only register it once.,1.4.0,1.4.0,0,0,51,1,4,2,0,0,0,0,1,0,2,4,camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultInstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/processor/resequencer/SequenceSender.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;,0,0
737,Bug,Closed,Fixed,,Major,Charles Moulliard,2008/07/18 14:01:00 +0100,2008/07/18 19:13:29 +0100,Claus Ibsen,2008/07/18 19:26:24 +0100,0.225972222,0.008969907,When getContext().addInterceptorStrategy(new Tracer());  is added in a RouteBuilder class  then the timer component does not work,When getContext().addInterceptorStrategy(new Tracer());is added in a RouteBuilder Class  then the timer component does not start.e.g. public class RouteBuilder extends RouteBuilder { getContext().addInterceptorStrategy(new Tracer()); public void configure() { from('timer://export') .to('bean:myBean'); }},1.4.0,1.5.0,0,0,30,1,6,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceFormatter.java;camel-core/src/test/java/org/apache/camel/component/timer/TimerRouteWithTracerTest.java;,0,0
738,Bug,Closed,Fixed,camel-ftp,Major,Ryadh Amar,2008/07/20 02:50:50 +0100,2008/07/20 03:13:20 +0100,Willem Jiang,2008/07/20 03:52:45 +0100,0.042997685,0.027372685,After the downloading process  the layout of the remote file system doesn't match the local's one,When downloading a directory with a complex layout (mutli level directory)  the downloaded files do not reflect the local onemore info here http://www.nabble.com/FTP-component%3A-Possible-bug-td18540318s22882.html,1.3.0; 1.4.0,1.5.0,0,0,26,1,9,3,0,0,0,0,0,0,3,9,components/camel-ftp/src/test/data/ftpbinarytest/logo2.png;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSetNamesWithMultiDirectoriesTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinaryFilesTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/test/data/ftpbinarytest/logo1.jpeg;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinaryFilesTest.java;,0,0
739,Improvement,Closed,Fixed,camel-cxf,Major,Willem Jiang,2008/07/21 09:36:38 +0100,2008/07/21 09:36:38 +0100,Willem Jiang,2008/07/21 10:04:01 +0100,0.019016204,0.019016204,Camel transport should set the content type property into the camel message header,Eduard Hildebrandt logged a JIRA&#91;1&#93; in CXF  it is actually a camel transport issue.https://issues.apache.org/jira/browse/CXF-1703,1.3.0; 1.4.0,1.5.0,0,0,18,1,2,2,0,0,0,0,0,0,1,7,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConstants.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportConstants.java;tests/camel-itest/src/test/resources/spring-config/client-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/server-applicationContext.xml;,0,0
741,Bug,Closed,Fixed,camel-cxf,Major,Willem Jiang,2008/07/22 11:08:08 +0100,2008/07/22 11:08:08 +0100,Willem Jiang,2008/07/24 04:12:35 +0100,1.711423611,1.711423611,CamelConduit's should check the TargetReference when create its instance,CAMEL-726 shows a ws-address error when using Camel transport for CXF.After running the code   I found there is no To address tag generated in the soap header. It was caused by the CamelConduit can set right targe reference.,1.3.0,1.5.0,0,0,51,1,2,2,0,0,0,0,0,0,2,7,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java;tests/camel-itest/src/main/resources/wsdl/CustomerService_noSoapAction.wsdl;tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServicesWsAddressingTest.java;tests/camel-itest/src/test/resources/spring-config/client-WsAddressingContext.xml;tests/camel-itest/src/test/resources/spring-config/client-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/server-WsAddressingContext.xml;tests/camel-itest/src/test/resources/spring-config/server-applicationContext.xml;,0,0
747,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/07/23 20:17:01 +0100,2008/07/23 20:17:01 +0100,Claus Ibsen,2008/07/23 20:45:50 +0100,0.020011574,0.020011574,xpath expression with $header and the header doesnt exist on the in message results in NPE,Using the $headerkey shorthand for xpath expression throws a NPE if the headerkey doesn't exists on the in message.We should try to find a better workaround for key doesn't exists. The NPE is thrown by SUN in their xpath engine.Check nabble:http://www.nabble.com/Camel-XPath-and-no-variables-found-in-MessageVariableResolver---What-should-Camel-do--td18603960s22882.html,1.4.0,1.5.0,0,0,44,1,2,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/builder/xml/MessageVariableResolver.java;camel-core/src/test/java/org/apache/camel/builder/xml/XPathHeaderTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringXPathHeaderTest.java;,0,0
755,Bug,Closed,Fixed,,Major,Jonathan Anstey,2008/07/24 19:02:12 +0100,,Unassigned,2008/07/24 19:45:26 +0100,0.030023148,,AMQP Tests are disabled,The AMQP tests are currently disabled. Adding an older version of MINA (than Camel uses) &amp; commons lang to the classpath got the tests passing except for ObjectMessage type test.Sending a TextMessage and BytesMessage work fine so I'm opening up a separate JIRA for the ObjectMessage issue.,1.4.0,1.5.0,0,0,47,0,3,2,1,0,0,0,0,0,0,0,,0,0
763,Bug,Closed,Fixed,camel-core,Major,Willem Jiang,2008/07/28 05:07:30 +0100,2008/07/28 05:07:30 +0100,Willem Jiang,2008/07/28 09:10:20 +0100,0.168634259,0.168634259,CamelContext's setErrorHandler is not effect when the jmx agent is disabled,The example applications from Camel 1.4 source distribution work correctly on my machine. After comparing the sample Spring XML configuration and my Spring configuration  I noticed there is no jmxAgent element in the sample XML where my configuration has this element. The problem I noticed was that when the disabled attribute of the jmxAgent element is set to true  the redelivery policy does not work. http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356,1.4.0,1.5.0,0,0,69,1,2,2,1,0,0,0,0,0,2,9,components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/model/ProcessorType.java;camel-core/src/test/java/org/apache/camel/builder/ContextErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringSetHeaderWithChildProcessorTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringXPathHeaderTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/errorHandler.xml;,0,0
765,Bug,Closed,Fixed,camel-core,Major,William Tam,2008/07/29 05:02:15 +0100,2008/07/29 07:08:47 +0100,Willem Jiang,2008/07/29 08:03:03 +0100,0.125555556,0.037685185,InstrumentationProcessor should catch Throwable,The InstrumentationProcessor currently only catches exception and sets it in the exception. Runtime errors and throwables can be thrown all the way out of the DeadLetterChannel's process method  out of the reach of exception policy.,1.4.0,1.5.0,0,0,35,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/test/java/org/apache/camel/management/ExceptionWithManagementTest.java;,0,0
794,Bug,Closed,Fixed,camel-core,Major,Bela Vizy,2008/08/08 04:02:15 +0100,2008/08/28 06:28:53 +0100,Claus Ibsen,2008/09/07 17:58:04 +0100,30.58042824,10.47859954,Pipeline with thread() processor also redelivers following the default policy independently from the preset  errorhadling,When using the thread processor in a simple pipeline  the exchange will be redelivered 6 times (default policy) along with the preset errorhandler settings. The code below will re-deliver 6 times to the default DeadLetterChannel and once to the log:errorTester. errorHandler(deadLetterChannel('log:errorTester?level=ERROR').maximumRedeliveries(1)); from('seda:whatEver') .thread(2) .process(new Processor() { public void process(Exchange exchange) throws Exception { System.out.println('### Exchg : ' + exchange.getExchangeId()); throw new Exception('Kaboom 2!'); } });,1.4.0,1.5.0,0,0,65,1,18,2,1,0,0,0,1,0,4,7,camel-core/src/test/java/org/apache/camel/issues/BelasThreadErrorHandlerIssue794Test.java;camel-core/src/main/java/org/apache/camel/model/ThreadType.java;camel-core/src/test/java/org/apache/camel/issues/BelasThreadErrorHandlerIssue794Test.java;camel-core/src/test/java/org/apache/camel/processor/MultiErrorHandlerInRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/ThreadSetErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/issues/BelasThreadErrorHandlerIssue794Test.java;camel-core/src/test/java/org/apache/camel/issues/ThreadErrorHandlerTest.java;,0,0
795,Bug,Closed,Fixed,camel-mina,Major,Hadrian Zbarcea,2008/08/08 06:48:57 +0100,2008/08/08 06:48:57 +0100,Hadrian Zbarcea,2008/08/08 06:57:28 +0100,0.005914352,0.005914352,MinaConsumerTest failure,The test fails with the following error:junit.framework.ComparisonFailure: expected:&lt;&#91;Bye World&#93;&gt; but was:&lt;[]&gt; at junit.framework.Assert.assertEquals(Assert.java:81) at junit.framework.Assert.assertEquals(Assert.java:87) at org.apache.camel.component.mina.MinaConsumerTest.testSendTextlineSyncText(MinaConsumerTest.java:28)...One test sends sync the text 'World' and the should receive 'Bye World' in response.2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye World 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: There are actually not one  but two messages received which causes the reply to be overridden by the second message. The problem is with the test itself that actually returns 'Bye ' + body + '/n'! Because the test uses the 'textline' mina codec  the encoder actually adds another '/n'. With the textline codec there's one message per line  so the extra /n makes it two lines and hence the extra message. The decoder at the other end suppresses the LineDelimiter (/n)  so the extra message is actually an empty string.Removing the extra /n in the message fixes the test  but the notes above should be considered when camel-mina is used with the textline codec.,1.4.0,1.5.0,0,0,177,1,1,1,1,0,0,0,0,0,1,2,components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaConsumerTest.java;components/camel-mina/src/test/resources/log4j.properties;,0,0
807,Bug,Closed,Fixed,camel-http,Major,Bill Skrypnyk,2008/08/10 23:22:11 +0100,2008/09/25 10:00:40 +0100,Willem Jiang,2008/09/26 00:27:51 +0100,46.04560185,0.602210648,HttpProducer premature out message creation,I believe there is incorrect flow in the HttpProducer which can subvert error handling in the route:in Camel 1.4.0 in HttpProducer on line 76 a 'blank' out message is set on the exchange:Message out = exchange.getOut(true); try { int responseCode = httpClient.executeMethod(method);...1. If an IO error occurs on connect  the out message will be passed to the error handling code and if the originating endpoint was a JmsMessage it will cause an NPE when JmsMessage.getMessageId() is called. It also obscures the offending message I believe.2. A similar situation will happen if the HTTP service returned an error code; the out message will contain a reply message even though the processing resulted in an error (e.g. HTTP Status 500) 3. Also  shouldn't this code test whether the exchange expects an 'out' altogether  and if not  perhaps  put just put the return HTTP status into the 'in' message header.--Bill,1.4.0,1.5.0,0,0,147,1,5,3,1,0,0,0,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpPostWithBodyTest.java;,0,0
811,Bug,Closed,Fixed,camel-core; camel-spring,Major,Jonathan Anstey,2008/08/11 17:45:49 +0100,2008/08/11 18:43:12 +0100,Hadrian Zbarcea,2008/08/11 18:43:50 +0100,0.040289352,0.00044,delayer pattern doesn't work in Spring DSL,You can't configure the delayer pattern properly in the Spring DSL currently. I will be attaching a patch for this shortly.,1.4.0,1.5.0,0,0,21,1,3,3,1,0,0,0,0,0,0,0,,0,0
815,Improvement,Closed,Fixed,camel-core,Major,Willem Jiang,2008/08/12 14:57:10 +0100,2008/08/12 14:57:10 +0100,Willem Jiang,2008/08/12 15:00:28 +0100,0.002291667,0.002291667,support to set the loadBalancerStrategy before the outputs,Current Camel only support the set the LoadBalancer Strategy after the outputs like this &lt;camelContext id='camel' xmlns='http://activemq.apache.org/camel/schema/spring'&gt; &lt;route&gt; &lt;from uri='direct:start'/&gt; &lt;loadBalance&gt; &lt;to uri='mock:x'/&gt; &lt;to uri='mock:y'/&gt; &lt;to uri='mock:z'/&gt; &lt;roundRobin/&gt; &lt;/loadBalance&gt; &lt;/route&gt; &lt;/camelContext&gt;It should be much better with the below configuration file&lt;camelContext id='camel' xmlns='http://activemq.apache.org/camel/schema/spring'&gt; &lt;route&gt; &lt;from uri='direct:start'/&gt; &lt;loadBalance&gt; &lt;roundRobin/&gt; &lt;to uri='mock:x'/&gt; &lt;to uri='mock:y'/&gt; &lt;to uri='mock:z'/&gt; &lt;/loadBalance&gt; &lt;/route&gt; &lt;/camelContext&gt;,1.3.0; 1.4.0,1.5.0,0,0,84,1,2,2,1,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/LoadBalanceType.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/loadBalance.xml;,0,0
818,Bug,Closed,Fixed,camel-core,Major,Jonathan Anstey,2008/08/13 12:25:14 +0100,2008/08/13 14:21:27 +0100,Willem Jiang,2008/08/15 08:49:42 +0100,1.850324074,1.769618056,Should preserve the exchange type in the routing slip,Currently  the routing slip will create a new InOut exchange for each target based on the target endpoint type. This means that someone calling from a jbi endpoint (or other endpoint with custom exchange) into the routing slip will have their exchange type changed (to mostly likely DefaultExchange). I will be including a patch to fix this issue shortly.,1.3.0; 1.4.0,1.5.0,0,0,60,1,3,3,1,1,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/DummyExchange.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipDataModificationTest.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipWithNonStandardExchangeTest.java;,0,0
828,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/08/16 09:27:21 +0100,2008/09/24 20:07:34 +0100,Claus Ibsen,2008/11/27 21:41:14 +0100,103.5096412,64.0650463,File component - write to temp file and rename to real name startegy,When producing files an idea is to write to a temp file that has a name pattern that will be skipped by consumers (such as starting with a dot) and then after the write rename the file to the correct name.Then the consumers wont need to use exotic locking to get exclusive read access to the file. Works on all file systems.There is a nabble discussion on this issue somewhere.,1.4.0,2.0-M1,0,0,70,1,2,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/FileProducer.java;camel-core/src/test/java/org/apache/camel/component/file/FileProduceTempPrefixTest.java;,0,0
834,Bug,Closed,Fixed,camel-ftp,Major,Aleksandar Vidakovic,2008/08/18 14:09:07 +0100,2008/08/19 05:03:53 +0100,Claus Ibsen,2008/08/20 05:08:19 +0100,1.624444444,1.003078704,Trailing slash missing in SftpConsumer,When this route  &lt;camel:route&gt; &lt;camel:from uri='sftp://someuser@hostname/path/to/directory/?password=secret&amp;amp;directory=true&amp;amp;binary=true&amp;amp;consumer.useFixedDelay=false&amp;amp;consumer.setNames=true&amp;amp;consumer.recursive=false' /&gt; &lt;camel:to uri='file:///C:/camel/output/' /&gt; &lt;/camel:route&gt;is configured the files in the remote directory are download  but subsequent calls of the method 'pollDir' result in this exception:[ Thread: 1 RemoteFileComponent] SftpConsumer WARN Caught SftpException:2: No such file[ Thread: 1 RemoteFileComponent] SftpConsumer WARN Doing nothing for now  need to determine an appropriate action[ Thread: 1 RemoteFileComponent] ScheduledPollConsumer WARN An exception occured while polling: Endpoint[sftp://someuser@hostname/path/to/directory/?password=secret&amp;amp;directory=true&amp;amp;binary=true&amp;amp;consumer.useFixedDelay=false&amp;amp;consumer.setNames=true&amp;amp;consumer.recursive=false]: No such file 2: No such fileAs you can see the slash is definitely in the configured route. If I check for the missing slash and add it to the dir variable (line 115 in SftpConsumer) then the consumer works: if(!dir.startsWith('/')) { dir = '/' + dir; }Didn't have the time to have a closer look. The root cause of the missing slash is somewhere else.,1.4.0,1.5.0,0,0,178,1,9,2,1,0,0,0,0,0,1,2,components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpDirectoryToBinaryFilesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpServerTestSupport.java;,0,0
839,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/08/21 10:43:47 +0100,2008/08/21 10:43:47 +0100,Claus Ibsen,2008/08/23 09:55:24 +0100,1.966400463,1.966400463,Type Converter - if not possible to convert LOG a WARN,An end-user had a route that didn't work and had trouble figure out the problem. Could be the fact that the type converted failed for some reason and no trace in his log.We should add some DEBUG logging to the type converter stuff what it does  especially in cases where it cant convert.http://www.nabble.com/Marshaling-jdbc-output-with-xstream-td19065283s22882.htmlNotice we have another ticket about type converters should fail instead of returning null etc.,1.5.0,1.5.0,0,0,70,1,3,1,1,0,0,0,0,0,3,20,camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/TypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/spi/BrowsableEndpoint.java;camel-core/src/main/java/org/apache/camel/spi/DataFormat.java;camel-core/src/main/java/org/apache/camel/spi/ErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/spi/ExchangeConverter.java;camel-core/src/main/java/org/apache/camel/spi/HeaderFilterStrategy.java;camel-core/src/main/java/org/apache/camel/spi/InstrumentationAgent.java;camel-core/src/main/java/org/apache/camel/spi/Language.java;camel-core/src/main/java/org/apache/camel/spi/LanguageResolver.java;camel-core/src/main/java/org/apache/camel/spi/LifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/spi/Provider.java;camel-core/src/main/java/org/apache/camel/spi/RouteContext.java;camel-core/src/main/java/org/apache/camel/spi/Synchronization.java;camel-core/src/main/java/org/apache/camel/spi/TypeConverterAware.java;camel-core/src/main/java/org/apache/camel/spi/UnitOfWork.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;,0,0
847,Improvement,Closed,Fixed,camel-mina,Major,Claus Ibsen,2008/08/25 12:03:11 +0100,2008/08/25 12:03:11 +0100,Claus Ibsen,2008/08/26 06:40:17 +0100,0.775763889,0.775763889,mina should be exchange pattern agnostic,Currently the camel-mina component silently ignores exchanges that is not out capable even though its configured for sync=true (InOut)What it does now is setting the sync option itself depending on the exchange type.,1.4.0,1.5.0,0,0,33,1,7,1,0,0,0,0,0,0,1,11,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaEncodingTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaInOnlyRouteTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaLoggerOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaMulticastTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpUsingTemplateTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaVmTest.java;,0,0
873,Bug,Closed,Fixed,camel-mina,Major,Willem Jiang,2008/09/01 10:27:18 +0100,2008/09/01 10:27:18 +0100,Willem Jiang,2008/09/03 08:00:07 +0100,1.897789352,1.897789352,Current mina component can't tansfer the exchange fault message body,I just found MinaTransferExchangeOptionTest don't show how to set fault message and the fault message is not a part of MinaPayloadHolder.You can't set the exception on the exchange in the processor   sine the camel DeadLetterChannel will try to redeliver the message.So we just need to support put the exception which need to send back to the camel client into the fault message body.,1.4.0,1.5.0,0,0,64,1,1,1,0,0,0,0,0,0,4,19,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithIoOutProcessorExceptionTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsIOConverter.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaPayloadHolder.java;camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/converter/IOConverter.java;camel-core/src/main/java/org/apache/camel/converter/NIOConverter.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConverter.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaPayloadHelper.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaPayloadHolder.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaConverterTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTransferExchangeOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpWithInOutUsingPlainSocketTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithInOutUsingPlainSocketTest.java;,0,0
876,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/09/03 08:44:09 +0100,2008/09/04 12:01:04 +0100,Gert Vanthienen,2008/09/15 16:18:20 +0100,12.31540509,11.17865741,splitter() should support batch for processing large files,See nabble:http://www.nabble.com/Splitter-for-big-files-td19272583s22882.htmlSomekind of batch(size) parameter to the splitter() DSL so we can process the exchanges in batches instead of all in one go.,1.4.0,1.5.0,0,0,26,1,9,2,0,0,0,0,0,0,6,23,camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/util/concurrent/CountingLatch.java;camel-core/src/test/java/org/apache/camel/util/concurrent/CountingLatchTest.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/converter/CollectionConverter.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/converter/CollectionConverterTest.java;camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java;camel-core/src/main/java/org/apache/camel/model/SplitterType.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/test/java/org/apache/camel/ContextTestSupport.java;camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/util/concurrent/AtomicExchange.java;camel-core/src/main/java/org/apache/camel/converter/CollectionConverter.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/test/java/org/apache/camel/converter/CollectionConverterTest.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/main/java/org/apache/camel/util/concurrent/AtomicExchange.java;camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java;,0,0
877,Improvement,Closed,Fixed,camel-http; camel-jetty,Major,A. Steven Anderson,2008/09/03 13:37:18 +0100,2008/10/04 02:49:11 +0100,Willem Jiang,2008/10/06 15:08:33 +0100,33.06336806,2.513449074,Access HttpRequest Params from exchange.in.header,Currently  you can only get the http request parameters by using a getHttpRequest() on the HttpExchange and thus you need java code and can't do it from the Spring XML configuration using simple expression language. e.g. if the request is http://localhost:8080/test?x=1  then the following route should result in 1 being returned in the body of the html response:&lt;route&gt; &lt;from uri='jetty:http://localhost:8080/test' /&gt; &lt;setBody&gt; &lt;simple&gt;&lt;html&gt;&lt;body&gt;${in.header.x}&lt;/body&gt;&lt;/html&gt;&lt;/simple&gt; &lt;/setBody&gt; &lt;to uri='mock:end'/&gt;&lt;/route&gt;,1.4.0,1.5.0,0,2,73,1,7,2,0,0,0,0,0,0,4,21,components/camel-http/src/main/java/org/apache/camel/component/http/HttpMessage.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettySteveIssueTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyContentBasedRouteTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpHeaderFilterStrategy.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpMessage.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/ExplicitHttpsRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpRoundtripHeaderTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpToFileTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyContentBasedRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpGetWithParamAsExchangeHeaderTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettySteveIssueTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/jetty/HttpClient.java;tests/camel-itest/src/test/java/org/apache/camel/itest/jetty/JettyValidatorTest.java;tests/camel-itest/src/test/resources/OptimizationRequest.xsd;tests/camel-itest/src/test/resources/org/apache/camel/itest/jetty/InvalidRequest.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/jetty/ValidRequest.xml;,0,0
881,Bug,Closed,Fixed,camel-mina,Minor,Claus Ibsen,2008/09/07 14:32:28 +0100,2008/09/07 14:32:28 +0100,Claus Ibsen,2008/09/07 14:53:33 +0100,0.014641204,0.014641204,camel-mina - codec options should fail if not possible to find i registry,If you configure the codec option on camel-mina and you eg make a spelling mistake camel will default to Mina default protocol if not found. We should throw an exception instead so end user knows about this and can fix his spelling mistake.,1.4.0,1.5.0,0,0,43,1,1,1,0,0,0,0,0,0,1,4,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaCustomCodecTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaEncodingTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpTextlineProtocolTest.java;,0,0
882,Bug,Closed,Fixed,camel-ftp,Major,Bela Vizy,2008/09/07 22:51:51 +0100,2008/09/08 01:53:07 +0100,Willem Jiang,2008/09/08 02:10:40 +0100,0.13806713,0.0121875,SftpEndpoint ignores custom ssh port,SftpEndpoint ignores custom ssh port. It works only if server runs on port 22.,1.5.0,1.4.0; 1.5.0,0,0,15,1,3,3,0,0,0,1,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java;,0,0
886,Bug,Closed,Fixed,camel-core,Major,Aaron Mulder,2008/09/09 17:12:34 +0100,2008/09/15 20:12:52 +0100,Jonathan Anstey,2008/09/15 20:19:35 +0100,6.129872685,0.004664352,element should not require contextPath attribute,In the Java DSL  you can say from('foo').marshal().jaxb().to('bar')In XML I think it would look like this:&lt;from uri='...' /&gt;&lt;marshal&gt; &lt;jaxb /&gt;&lt;/marshal&gt;&lt;to uri='...' /&gt;The problem is that you can't use the &lt;jaxb /&gt; element without the contextPath attribute  which the XSD says is required.,1.4.0,1.5.0,0,0,42,1,2,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/model/dataformat/JaxbDataFormat.java;,0,0
902,Bug,Closed,Fixed,camel-core,Major,Willem Jiang,2008/09/15 08:05:14 +0100,2008/09/15 08:05:14 +0100,Willem Jiang,2008/09/16 05:46:10 +0100,0.903425926,0.903425926,The should throw the exception if there is some thing wrong with  type attribute,If you specify an invalided class name in the convertBodyTo@type  you will get a NPE error  but no detail log information for the type attribute.We need to throw the exception for user to locate the error.,1.3.0; 1.4.0,1.5.0,0,0,36,1,1,1,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/ConvertBodyType.java;camel-core/src/main/java/org/apache/camel/processor/ConvertBodyProcessor.java;,0,0
906,Bug,Closed,Fixed,camel-jms,Major,Claus Ibsen,2008/09/16 08:36:50 +0100,2008/09/16 08:36:50 +0100,Claus Ibsen,2008/09/16 09:45:51 +0100,0.047928241,0.047928241,JmsProducer - option requestTimeout isn't configured properly,When sending a JMS message to a destination using camel-jms (JMSProducer) I can't get it to use my requestTimeout option in the endpoint configuration. It always default to 20000.template.requestBody('activemq:queue:slow?requestTimeout=1000'  'Hello World');This doesn't work as expected with a timeout of only 1 sec.,1.4.0,1.5.0,0,0,51,1,2,1,0,0,0,0,1,0,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteTimeoutTest.java;,0,0
912,Bug,Closed,Fixed,,Major,Mike Ramnarine,2008/09/16 23:16:34 +0100,2008/09/17 01:36:22 +0100,Willem Jiang,2008/09/17 01:38:59 +0100,0.098900463,0.00181713,camel-cxf component is not passing request context through correctly,CxfProducer.process() is not setting up the request context correctly during createCxfMessage  so later in that method propagateContext has no request data to propagate. Also  we need the exchange properties to be added to the request context  so that non-camel components can pass properties into the cxf request context.I have coded a fix for this  along with a unit test of course. I'll attach the patch to this JIRA.,1.4.0,1.5.0,0,0,68,1,2,2,0,0,0,0,0,0,1,2,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfBinding.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java;,0,0
920,Bug,Closed,Fixed,camel-core,Critical,Dario Sanna,2008/09/19 09:47:15 +0100,2008/09/19 10:35:20 +0100,Claus Ibsen,2008/09/19 19:59:39 +0100,0.425277778,0.391886574,file component consumer.regexPattern does not work as expected (matching is applied not only to file  but also to directory),file component consumer.regexPattern does not work as expectedexample : from('file://d:/the_input_dir?consumer.regexPattern=.*/.xml$'.to(whatever)(should match only files  that has extention .xml)the result of the above regexPattern is  that no file will be proccessed  regardless if an existing filename matches the pattern.FileConsumer.pollFileOrDirectory() applies the regexPattern on the starting directory (the_input_dir) which will not match.,1.5.0,1.5.0,0,0,49,1,6,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerDirectoryNotMatchedTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerDirectoriesNotMatchedTest.java;,0,0
922,Bug,Closed,Fixed,camel-jpa,Major,Hadrian Zbarcea,2008/09/19 17:06:50 +0100,2008/09/19 17:06:50 +0100,Hadrian Zbarcea,2008/09/19 21:37:25 +0100,0.187905093,0.187905093,Remove deps on persistence-api jar  non compliant with the spec,I mentioned a while ago a warning I couldn't explain in eclipse related to the use of @UniqueConstraint in camel-jpa.It turned out to be due to the fact that camel-jpa has a dependency on persistence api  but used for testing openjpa that has a dependency on geronimo-jpa_3.0_spec. So camel-jpa pulls in two different implementation of the same spec. So far so good. It also turns out that the definition of the @UniqueConstraint annotation is different in the two jars  the persistence-api (and the camel-jpa code as implemented) being non spec compliant. I found other inconsistencies in the persistence-api impl and it seems to be based on an older version of the spec.(More precisely persistence api annotates the @interface UniqueConstraint with @Target({TYPE}) whereas the spec and the geronimo impl use: @Target({}))My recommendation is to replace the dependency on persistence-api with the geronimo version. I will commit a change for this in the next hour or so  but leave this issue open. If anybody has any objections please shout and I will revert the change.,1.4.0,1.5.0,0,0,173,1,3,2,0,0,0,0,0,0,0,0,,0,0
944,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2008/09/28 12:41:58 +0100,2008/09/28 12:41:58 +0100,Claus Ibsen,2008/09/28 19:27:23 +0100,0.281539352,0.281539352,tracer - option to disable interceptors,Currently the tracer also outputs interceptors such as delegation to the DLC that is wrapped in the pipeline.Would be nice with an option to enable/disable this (disabled by default) so all the interceptors isn't logged and confuses end-users.,1.4.0,1.5.0,0,0,38,1,5,1,0,0,0,0,0,0,2,15,camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;camel-core/src/main/java/org/apache/camel/model/InterceptType.java;camel-core/src/main/java/org/apache/camel/model/OptionalIdentifiedType.java;camel-core/src/main/java/org/apache/camel/model/ProcessorRef.java;camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceFormatter.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/main/java/org/apache/camel/spi/Synchronization.java;camel-core/src/test/java/org/apache/camel/model/ProcessorTypeConfigurationTest.java;camel-core/src/test/java/org/apache/camel/processor/TraceInterceptorTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TraceFormatterTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TracerConfigurationTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/tracerConfigurationTest.xml;,0,0
955,Improvement,Closed,Fixed,camel-core,Major,Hadrian Zbarcea,2008/10/02 02:53:51 +0100,2008/10/02 02:54:22 +0100,Hadrian Zbarcea,2008/10/02 16:25:58 +0100,0.563969907,0.563611111,Manage non-singleton endpoints in the CamelContext,So that we can manages JMS endpoint for instance  that are not singletons.,1.4.0,1.5.0,0,0,13,1,4,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;,0,0
957,Bug,Closed,Fixed,camel-spring,Major,Jonathan Anstey,2008/10/02 13:39:06 +0100,2008/10/02 13:39:06 +0100,Jonathan Anstey,2008/10/02 13:58:03 +0100,0.013159722,0.013159722,camel-spring/rest does not build on HP-UX,I'm getting the following error from camel-spring on the HP-UX platform. I should be able to reuse a fix I made to a similar problem in CAMEL-939&#91;18:53:50&#93;: &#91;ERROR&#93; FATAL ERROR&#91;18:53:50&#93;: &#91;INFO&#93; ------------------------------------------------------------------------&#91;18:53:50&#93;: &#91;INFO&#93; com/sun/mirror/apt/AnnotationProcessorFactory&#91;18:53:50&#93;: &#91;INFO&#93; ------------------------------------------------------------------------&#91;18:53:50&#93;: &#91;INFO&#93; Trace&#91;18:53:50&#93;: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory&#91;18:53:50&#93;: at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:143)&#91;18:53:50&#93;: at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451),1.4.0,1.5.0,0,0,65,1,2,2,0,0,0,0,0,0,1,2,components/camel-rest/pom.xml;components/camel-spring/pom.xml;,0,0
958,Bug,Closed,Fixed,documentation,Major,Oisin Hurley,2008/10/02 15:31:50 +0100,2008/10/02 18:06:02 +0100,Claus Ibsen,2008/10/05 15:45:12 +0100,3.009282407,2.902199074,Inconsistency in recipient list documentation?,The mail thread at http://tinyurl.com/47bqre seems to contradict the documentation at http://activemq.apache.org/camel/recipient-list.html &#8211; not sure if this is a doc issue  or a camel behavioural issue.,1.4.0,1.5.0,0,0,32,1,4,1,0,0,0,0,0,0,2,10,camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java;camel-core/src/test/java/org/apache/camel/processor/WireTapTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildStaticRecipientList.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildWireTap.xml;camel-core/src/main/java/org/apache/camel/NoSuchEndpointException.java;camel-core/src/main/java/org/apache/camel/builder/ValueBuilder.java;camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java;camel-core/src/test/java/org/apache/camel/language/XPathTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildStaticRecipientList.xml;,0,0
959,Improvement,Closed,Fixed,camel-jms,Major,james strachan,2008/10/02 17:25:04 +0100,2008/12/04 09:43:30 +0100,james strachan,2008/12/09 12:29:26 +0100,67.79469907,5.115231481,JMS InOut operations should default to non transacted even if the JMS component or endpoint defaults to transacted; as typically RPCs over JMS are not transacted,currently there is no automatic transaction commit inside the send of the request when doing InOut with JMS; so the transaction won't commit if the component/endpoint is transacted - then the message won't reach the request and things will time out.This will be confusing to users.So if things are transacted; lets default to using non-transacted for InOut - and force a new property  transactedInOut to allow that to be transacted if folks really want that (which they usually won't I'd have thought).,1.5.0,1.6.0; 2.0-M1,0,0,82,2,7,3,0,0,0,0,0,0,3,13,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/MyActiveMQConsumer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/NonTransactedInOutForJmsWithTxnMgrTest.java;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/TransactionErrorHandlerRedeliveryDelayTest-context.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/AbstractTransactionTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionalClientTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionErrorHandlerBuilderAsSpringBeanTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/activemq.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/nonTxInOutJmsTest.xml;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/TransactedJmsRouteTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;,0,0
964,Improvement,Closed,Fixed,camel-core,Major,Martin Gilday,2008/10/07 13:27:55 +0100,2008/10/09 11:43:17 +0100,Claus Ibsen,2008/10/09 12:44:16 +0100,1.9696875,0.042349537,loggingErrorHandler should default to ERROR and LoggingErrorHandlerBuilder should operate as a builder,Please see attached patch which changes the default level created by the LoggingErrorHandlerBuilder to ERROR instead of INFO.Also some of the methods on this builder to not return 'this'. This breaks the chain when attempting to use the builder resulting in:LoggingErrorHandlerBuilder errorBuilder = loggingErrorHandler('my.logger.name');errorBuilder.setLevel(LoggingLevel.ERROR);errorHandler(errorBuilder);instead of:errorHandler(loggingErrorHandler('mylogger.name').level(LoggingLevel.ERROR));I have added on builder methods for 'level' and for 'log'. I have left the properties that currently exist as following the pattern on DeadLetterChannelBuilder the builder method names should not include 'set'. Whoever applies the patch may wish to remove the getters and setters  depending how they feel this will affect existing users.,1.5.0,1.5.0,0,0,98,1,4,2,0,0,0,0,0,0,0,0,,0,0
969,Bug,Closed,Fixed,camel-core,Major,Geoff Gibbs,2008/10/08 15:16:39 +0100,2008/10/08 20:16:01 +0100,Claus Ibsen,2008/10/08 20:16:01 +0100,0.207893519,0,CamelContext.setRoutes() documentation is misleading,The javaDoc for CamelContext.setRoutes() states:'Sets the routes for this context  replacing any current routes'Yet when used  and the context started  startRouteDefinitions() is used first  causing any existing routes created through the definitions (such as those from RouteBuilders) to be re-created and started before the new routes provided to setRoutes() are started.,1.4.0,1.5.0,0,0,51,1,2,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/CamelContext.java;,0,0
970,Bug,Closed,Fixed,camel-spring,Major,Hadrian Zbarcea,2008/10/08 18:40:06 +0100,2008/10/08 18:40:06 +0100,Hadrian Zbarcea,2008/10/08 19:23:21 +0100,0.030034722,0.030034722,createConnector attribute for CamelJMXAgentType should default to 'true',createConnector attribute for CamelJMXAgentType should default to 'true',1.4.0,1.5.0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,components/camel-spring/src/main/java/org/apache/camel/spring/CamelJMXAgentType.java;,0,0
973,Bug,Closed,Fixed,camel-jbi,Major,Edell Nolan,2008/10/10 20:29:45 +0100,2008/10/14 20:38:52 +0100,Gert Vanthienen,2009/02/10 16:40:05 +0100,122.8405093,118.8341782,TypeConverter Exception is thrown in the latest build of camel,I have upgraded to the latest of Camel and when I attempt to use the content based router pattern - its now throwing an error.The contents of the Message passed is a StringSource object and from debugging camel - the BodyType is a StringSource but it is attempting to convert from a StreamCache to a StringSource. I will try and put a testcase together but if anyone has any ideas of its cause in the meantime ?The error it throws it below.thanks  Edell.No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5borg.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117) at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:65) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:69) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:51) at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:528) at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:115) at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:73) at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:600) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:554) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:456) at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:341) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595),1.5.0,1.6.0,0,0,170,1,7,3,0,0,0,0,0,1,3,4,camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/StreamCachingInterceptorTest.java;camel-core/src/test/java/org/apache/camel/processor/StreamSourceContentBasedRouterTest.java;,0,0
978,Improvement,Closed,Fixed,camel-mail,Minor,Claus Ibsen,2008/10/12 08:15:41 +0100,2008/10/12 08:15:41 +0100,Claus Ibsen,2008/10/12 10:47:18 +0100,0.105289352,0.105289352,camel-mail - type converter to InputStream,camel-mail need a type converter to InputStream Currently we have type converters to StringSee nabble:http://www.nabble.com/Process-Mail-Attachment-InvalidPayloadException-Camel-1.4.0-td19937573s22882.html,1.4.0,1.5.0,0,0,18,1,1,1,0,0,0,0,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java;,0,0
979,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/10/12 11:57:27 +0100,2008/10/12 12:10:34 +0100,Claus Ibsen,2008/10/12 12:10:44 +0100,0.009224537,0.000116,FileLanguage - to support constant expressions,Currently the simple language does not support constant expressions  that actually is useable in the file component that uses simple language to set file namesSo if an end-user want to produce a file with a fixed name  then its not possibleexpression=MyBigFile.txt Is not possible.But this is:expression=MyBigFile-${header.foo}.txt is as there is a ${} placeholder and then the simple language can evaluate it.,1.4.0,1.5.0,0,0,75,1,4,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/simple/FileExpressionBuilder.java;camel-core/src/test/java/org/apache/camel/language/FileLanguageTest.java;camel-core/src/test/java/org/apache/camel/language/SimpleTest.java;,0,0
983,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/10/13 20:05:35 +0100,2008/10/14 15:20:34 +0100,Claus Ibsen,2008/10/15 19:54:29 +0100,1.992291667,1.190219907,BeanInfo - should consider overridden methods when selecting method from operations list,See nabble:http://www.nabble.com/BeanInfo.chooseMethodWithMatchingBody-throws-an-AmbiguousMethodCallException-when-there%27s-no-ambiguity-td19959124s22882.html,1.4.0,1.5.0,0,1,5,1,9,1,0,0,0,0,0,0,4,8,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoInheritanceTest.java;camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/pom.xml;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;,0,0
985,Improvement,Closed,Fixed,camel-core; camel-spring,Minor,Claus Ibsen,2008/10/14 13:13:35 +0100,2008/11/21 14:32:29 +0100,Jonathan Anstey,2008/11/21 14:57:00 +0100,38.07181713,0.017025463,bean binding - annotation to get the exception from exchange,If you are doing error handling using POJO beans to do some error handling code and using bean binding annoations to get the stuff from the exchange  we are missing an annotation to get the caused exceptionSuch as a @Exception or @Fault if that is a better nameSee nabble:http://www.nabble.com/Error-Handler-and-OutHeaders-td19970966s22882.htmljstrachan using @Exception or @Fault or whatever on a bean method call to pull out the Exchange's fault/exception right? 14:02 jstrachan if so definitely!,1.4.0,2.0-M1,0,0,76,1,3,2,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/ExchangeException.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithExchangeExceptionAnnotationTest.java;camel-core/src/test/java/org/apache/camel/component/bean/MyCustomException.java;,0,0
991,Improvement,Closed,Fixed,tooling,Major,Seb Auvray,2008/10/16 13:56:23 +0100,2008/10/16 13:59:56 +0100,Jonathan Anstey,2008/10/16 14:19:56 +0100,0.016354167,0.013888889,Maven goal camel:dot should use overridden  when specified,Maven goal camel:dot should use overridden &lt;mainClass/&gt; when used as in pom.xml: &lt;build&gt; &lt;plugins&gt; &lt;!-- Allows the routes to be run via 'mvn camel:run' --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-maven-plugin&lt;/artifactId&gt; &lt;version&gt;${pom.version}&lt;/version&gt; &lt;!-- optional  default value: org.apache.camel.spring.Main --&gt; &lt;configuration&gt; &lt;mainClass&gt;mypackage.boot.camel.CamelStartup&lt;/mainClass&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;,1.4.0,1.5.0,0,0,41,1,10,3,0,0,0,0,0,0,1,2,tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/DotMojo.java;tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/EmbeddedMojo.java;,0,0
992,Bug,Closed,Fixed,,Major,Charles Moulliard,2008/10/16 15:48:06 +0100,2008/10/16 17:44:23 +0100,Claus Ibsen,2008/10/16 17:44:23 +0100,0.080752315,0,Component spring 'event' is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring,Component spring 'event' is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring.,1.4.0,1.4.0; 1.5.0,0,0,19,1,1,1,0,0,0,0,0,0,1,1,components/camel-spring/src/main/resources/META-INF/services/org/apache/camel/component/event;,0,0
997,Improvement,Closed,Fixed,camel-http,Major,Claus Ibsen,2008/10/19 11:23:38 +0100,2008/10/19 11:23:38 +0100,Claus Ibsen,2008/10/19 14:24:02 +0100,0.125277778,0.125277778,Http producer should be smarter to select correct GET or POST method,The code in HttpProducer should be smarter to select the correct method to use.Algorithm:1) if the method is provided in a header2) GET if a querystring is provided in a header3) GET if endpoint is configured with a query string4) POST if there is data to send5) GET fallback to getAlso the HttpOperationFailedException is missing a message  so you get the error code and description in the stack-trace,1.4.0,1.5.0,0,0,68,1,5,1,0,0,0,0,0,0,1,7,components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpOperationFailedException.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpProducerSelectMethodTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpQueryGoogleTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpGetWithParamAsExchangeHeaderTest.java;,0,0
1002,Improvement,Closed,Fixed,camel-quartz,Major,Martin Gilday,2008/10/20 17:13:24 +0100,2009/01/27 09:27:58 +0100,Hadrian Zbarcea,2009/01/28 00:45:08 +0100,99.3137037,0.636921296,Quartz support should allow stateful jobs,See http://www.nabble.com/Clustered-Quartz-td20068086s22882.htmlCurrently Quartz only has CamelJob which implements Quartz's Job interface. There is no option to use an implemenation of StatefulJob. This causes problems when you may want to use a JDBC JobStore and have Quartz running on multiple machines  as you may end up with multiple jobs running together. StatefulJob in effect allows for a blocking singleton style job on one machine.Attached is a patch which adds a new URI parameter named 'stateful'  which defaults to false. When set to true it uses StatefulCamelJob.One significant change to the QuartzComponent is that a reference to the CamelContext is now stored in the Quartz Scheduler. This idea is taken from Spring's SchedulerFactoryBean which stores a reference to a Spring ApplicationContext. This is needed as when using stateful jobs the URI of the Endpoint is stored instead of a reference to the endpoint. This is to allow for the use of JDBC JobStore as the URI can be serialised and shared beteen participating schedulers.Current Faults:Still has no notion of volatilityDifference in operation between CamelJob and StatefulCamelJob is not strictly needed. It may be less confusing if both versions simply store the URI instead of an endpoint reference.You need to use stateful if you want to use clustering at all due to the reason above. This is mixing together clustering support and blocking functionality.In Camel 2 we may want to try rewriting this Component as it is becoming a little messy. It would be nice to try and harness the power of Spring's SchedulerFactoryBean.,1.4.0,1.6.0; 2.0-M1,0,0,254,1,5,3,0,0,0,0,0,0,0,0,,0,0
1018,Improvement,Closed,Fixed,camel-http,Major,Balazs Zsoldos,2008/10/22 07:40:51 +0100,2008/11/07 15:04:36 +0100,Willem Jiang,2008/11/07 16:52:33 +0100,16.383125,0.074965278,camel http Uri from the message header,Imagine a use case when the target systems  where http messages have to be sent to  are maintained in a database. In that case the http uri is cannot be set in the camelcontext but it should come from the header of the message.So the http client should check first if there is an uri in the header and if not than use the one given in the camelcontext (like for querystring).,1.5.0,1.6.0; 2.0-M1,0,1,72,1,3,3,0,0,0,0,0,0,1,1,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;,0,0
1023,Bug,Closed,Fixed,tooling,Major,Claus Ibsen,2008/10/24 06:51:53 +0100,2008/10/24 06:51:53 +0100,Claus Ibsen,2008/10/27 13:36:30 +0100,3.280983796,3.280983796,camel:dot - pipeline is drawn as a multicast,And it has a few other areas as well that could be polished.,1.5.0,1.5.0,0,0,13,1,2,1,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/view/ModelFileGenerator.java;camel-core/src/main/java/org/apache/camel/view/NodeData.java;camel-core/src/main/java/org/apache/camel/view/RouteDotGenerator.java;camel-core/src/test/java/org/apache/camel/view/DotViewTest.java;,0,0
1036,Improvement,Closed,Fixed,camel-core; camel-spring,Major,Jonathan Anstey,2008/10/30 15:03:20 +0100,2008/10/30 15:03:20 +0100,Jonathan Anstey,2008/10/30 18:03:39 +0100,0.125219907,0.125219907,Add ability to configure log level on exceptions from DLC retry mechanism,Right now  when Camel tries to redeliver an message a number of times (using the DLC)  the exceptions are logged as ERROR. Sometimes though  these retries may be considered part of normal operation. I'm going to put in DSL options to configure this log level. Something like this will be possible:onException(AException.class).maximumRedeliveries(5) .retriesExhaustedLogLevel(LoggingLevel.DEBUG) .retryAttemptedLogLevel(LoggingLevel.DEBUG) .process(new MyExceptionProcessor('I got an Exception.'));,1.5.0,1.6.0; 2.0-M1,0,0,67,1,4,2,0,0,0,0,0,0,2,30,camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;camel-core/src/test/java/org/apache/camel/builder/CustomLog.java;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderWithRetryLoggingLevelSetTest.java;camel-core/src/test/java/org/apache/camel/builder/MyExceptionThrowingProcessor.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanPipelineTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/onexception/SpringExceptionBuilderWithRetryLoggingLevelSetTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/exceptionBuilderWithRetryLoggingLevelSet.xml;camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/builder/LoggingErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/builder/RouteBuilder.java;camel-core/src/main/java/org/apache/camel/component/log/LogComponent.java;camel-core/src/main/java/org/apache/camel/impl/LoggingExceptionHandler.java;camel-core/src/main/java/org/apache/camel/model/ExceptionType.java;camel-core/src/main/java/org/apache/camel/model/LoggingLevel.java;camel-core/src/main/java/org/apache/camel/model/RedeliveryPolicyType.java;camel-core/src/main/java/org/apache/camel/model/RoutesType.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/Logger.java;camel-core/src/main/java/org/apache/camel/processor/LoggingErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/LoggingLevel.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;camel-core/src/main/java/org/apache/camel/processor/ThroughputLogger.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/main/resources/org/apache/camel/model/jaxb.index;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderWithRetryLoggingLevelSetTest.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelTest.java;camel-core/src/test/java/org/apache/camel/processor/FaultRetryRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/FaultRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/TracerConfigurationTest.java;,0,0
1039,Improvement,Closed,Fixed,camel-core,Major,Jonathan Anstey,2008/10/31 18:49:04 +0100,2008/10/31 18:49:04 +0100,Jonathan Anstey,2008/10/31 19:34:09 +0100,0.03130787,0.03130787,Add support to tracer for logging out messages,Add support to tracer for logging out messages,1.5.0,1.6.0; 2.0-M1,0,0,1,1,4,2,1,0,0,0,0,0,3,8,components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringTraceInterceptorWithOutBodyTraceTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/traceInterceptorWithOutBodyTrace.xml;camel-core/src/test/java/org/apache/camel/processor/TraceInterceptorWithOutBodyTraceTest.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceFormatter.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/test/java/org/apache/camel/processor/TraceInterceptorWithOutBodyTraceTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/PredicateAggregatorCollectionTest.java;,0,0
1044,Improvement,Closed,Fixed,camel-ftp,Major,Max,2008/11/02 01:18:29 +0100,2008/11/02 08:59:36 +0100,Claus Ibsen,2008/11/02 10:27:52 +0100,0.381516204,0.061296296,Passive mode,There should be an option to enable passive mode in the ftp endpoint. If not  when deploying the camel rules on a host with a firewall the default active mode is useless.,1.5.0,1.6.0; 2.0-M1,1,0,32,1,2,2,1,0,0,0,0,0,1,5,components/camel-ftp/pom.xml;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpUtils.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPassiveModeTest.java;components/camel-ftp/src/test/resources/log4j.properties;,0,0
1053,Bug,Closed,Fixed,camel-spring-integration,Major,Jonathan Anstey,2008/11/05 01:21:13 +0100,2008/11/05 13:48:40 +0100,Willem Jiang,2008/11/05 13:48:40 +0100,0.5190625,0,spring integration xsd change breaks component,Thread is here http://www.nabble.com/-HEADS-UP--camel-spring-integration-issue-td20331450s22882.html,1.4.0; 1.5.0,1.6.0; 2.0-M1,0,0,7,1,3,2,1,1,0,0,0,0,2,23,components/camel-spring-integration/pom.xml;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationBinding.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationEndpoint.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationMessage.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationProducer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/AbstractCamelAdapter.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/CamelSourceAdapter.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/CamelTargetAdapter.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/config/CamelTargetAdapterParser.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/converter/SpringIntegrationConverter.java;components/camel-spring-integration/src/main/resources/schema/camel-spring-integration.xsd;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/HelloWorldService.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationOneWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationProducerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationTwoWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/CamelSourceAdapterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/CamelTargetAdapterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/ConfigurationTest.java;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/adapter/CamelTarget.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/producer.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/twoWayConsumer.xml;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;,0,0
1057,Bug,Closed,Fixed,camel-saxon,Critical,Balazs Zsoldos,2008/11/07 01:56:37 +0100,2008/11/07 14:09:07 +0100,Claus Ibsen,2008/11/07 14:23:32 +0100,0.51869213,0.010011574,XQuery creates an empty out message that makes it impossible to chain more processors behind it,When using XQuery the getOut() function is called on the message so if it is not used at a place where the out is filled an empty out message will be created. With this xquery cannot be used for example in setBody  setHeader... and anywhere where the out is not filled.An example where this causes real trouble:&lt;choice&gt; &lt;when&gt; &lt;xquery&gt;...&lt;/xquery&gt; &lt;to uri='direct:follow' /&gt; &lt;/when&gt;&lt;/choice&gt;...&lt;from uri='direct:follow'&gt;&lt;to ...&gt;&lt;to ...&gt;In the patch the out property in the xquery context is filled only if it is not null. With it all of my pipelines seem to work well for me.,1.4.0; 1.5.0,1.6.0; 2.0-M1,0,1,95,1,4,2,1,1,0,0,0,0,1,1,components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java;,0,0
1062,Bug,Closed,Fixed,camel-core,Minor,Hadrian Zbarcea,2008/11/07 16:26:21 +0100,2008/11/07 16:26:21 +0100,Hadrian Zbarcea,2008/11/07 22:27:04 +0100,0.250497685,0.250497685,PipelineConcurrentTest.java fails randomly,The test fails with an IllegalStateException: Queue full. I believe the reason for this is that there are 10000 messages sent  but the default queue size is 1000. On a fast machine  the queue fills up before the consumer gets a chance to pop the messages from the queue.,1.5.0,1.6.0; 2.0-M1,0,0,49,1,1,1,1,0,0,0,0,0,0,0,,0,0
1070,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/11/10 17:38:32 +0100,2008/11/10 17:53:06 +0100,Claus Ibsen,2008/11/10 17:55:17 +0100,0.011631944,0.001516204,org.apache.camel.Message - hasAttachments is buggy,I must use if (exchange.getIn().getAttachments().size() &gt; 0) {Instead of if (exchange.getIn().hasAttachments()) {As the latter always returns false. Or at least returns false even though the size is &gt; 0,1.4.0; 1.5.0,1.6.0; 2.0-M1,0,0,29,1,1,1,1,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java;,0,0
1074,Bug,Closed,Fixed,camel-jaxb,Major,tim mcnamara,2008/11/11 01:21:20 +0100,2008/11/13 07:19:04 +0100,Willem Jiang,2008/11/27 11:23:43 +0100,16.41832176,14.16989583,.unmarshal(new JaxbDataFormat('com.foo.bar')) returning JAXBElement,using .unmarshal(new JaxbDataFormat('com.foo.bar') is returning a JAXBElement instead of the desired object that was generated by xjc.,1.4.0,1.6.0; 2.0-M1,0,0,17,1,7,3,1,0,0,0,0,0,2,8,camel-core/src/main/java/org/apache/camel/model/dataformat/JaxbDataFormat.java;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/CamelJaxbSpringTest.java;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/CamelJaxbTest.java;components/camel-jaxb/src/test/resources/org/apache/camel/jaxb/CamelJaxbTest.xml;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java;components/camel-jaxb/src/test/java/org/apache/camel/foo/bar/ObjectFactory.java;components/camel-jaxb/src/test/java/org/apache/camel/foo/bar/PersonType.java;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/CamelJaxbTest.java;,0,0
1078,Improvement,Closed,Fixed,camel-core,Critical,Hadrian Zbarcea,2008/11/11 23:34:27 +0100,2008/11/11 23:34:27 +0100,Hadrian Zbarcea,2009/07/04 10:37:01 +0100,234.4601157,234.4601157,Remove specialized Exchange and make DefaultExchange final to pave the road for optimization by reducing exchange copies,The code in DefaultEndpoint.createExchange(Exchange exchange)  calls on getExchangeType() to figure out if a new copy of Exchange needs be created. The code relies though on the generic argument of the Endpoint type to figure out the actual Exchange type. With the generics removed part of CAMEL-872  getExchangeType() always returns null  forcing a copy every time.There is no real need to extend Exchange  so the proposal for this to make the Exchange final and move the component specific bits  if any  in the Message.,1.5.0,2.0-M3,0,0,91,1,17,4,1,0,1,0,1,0,2,13,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceEventExchange.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorDestinationTest.java;examples/camel-example-tracer/pom.xml;camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/impl/GroupedExchange.java;camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/GroupedExchangeAggregationStrategy.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateGroupedExchangeTest.java;,0,0
1088,Bug,Closed,Fixed,camel-cxf,Major,Willem Jiang,2008/11/14 08:15:27 +0100,2008/11/14 08:15:27 +0100,Willem Jiang,2008/11/14 08:26:09 +0100,0.007430556,0.007430556,Can't get the soap header when the camel-cxf endpoint working in the PAYLOAD data fromat,When I added a unit test to show how to get the SOAP header from a PAYLOAD camel-cxf endpoint   I found the soap header stuff is not working.,1.3.0; 1.4.0; 1.5.0,1.6.0; 2.0-M1,0,0,29,1,2,2,1,1,0,0,0,0,1,12,components/camel-cxf/pom.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/AbstractMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/XMLMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/PayloadInvokingContext.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/PayloadMessage.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadSoapHeaderTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/PizzaImpl.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/PizzaEndpoints.xml;components/camel-cxf/src/test/resources/pizza_service.wsdl;,0,0
1090,Bug,Closed,Fixed,camel-core,Major,Gary Tully,2008/11/14 16:28:52 +0100,2008/11/14 16:28:52 +0100,Gary Tully,2008/11/14 16:30:23 +0100,0.001053241,0.001053241,ThroughputLogger incorrectly reports duration 0,from the apache-camel-load test:2008-11-14 15:27:01 114 &#91;mponent@1296d1d&#93; INFO aset:myDataSet?produceDelay=10 - Sent: 600 messages so far. Last group took: 0 millis which is: 85.106 messages per second. average: 80.128The ThroughputLogger used by DataSet resets the duration before reporting it.,1.5.0,1.6.0; 2.0-M1,0,0,38,1,4,3,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/ThroughputLogger.java;camel-core/src/test/java/org/apache/camel/processor/ThroughPutLoggerTest.java;,0,0
1091,Bug,Closed,Fixed,camel-jetty,Major,Roman Kalukiewicz,2008/11/14 17:54:13 +0100,2008/11/14 17:54:13 +0100,Roman Kalukiewicz,2008/11/17 15:03:33 +0100,2.881481481,2.881481481,jetty endpoints ignore host specified in URI and expose an endpoint on all interfaces,http://www.nabble.com/Jetty-and-Mina%3A-how-to-bind-to-%22anylocal%22-AKA-%22wildcard%22-address--tp20475674s22882p20494645.html,1.5.0,1.6.0; 2.0-M1,0,0,4,1,10,4,1,0,0,1,0,0,7,9,components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java;,0,0
1093,Bug,Closed,Fixed,camel-jetty,Major,Claus Ibsen,2008/11/15 12:01:11 +0100,2008/11/16 07:55:16 +0100,Claus Ibsen,2008/11/21 19:43:55 +0100,6.321342593,5.492118056,camel-jetty - Exchange failures should not be returned as 200,The code below: protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { errorHandler(noErrorHandler()); from('jetty:http://localhost:8080/myapp/myservice').process(new MyBookService()); } }; } public class MyBookService implements Processor { public void process(Exchange exchange) throws Exception { throw new IllegalArgumentException('Damm'); } }Will return http response code 200. We should let end users easily set what response code they want and in case of route failures we should probably return 500 and return the stracktrace in the body,1.5.0,1.6.0; 2.0-M1,0,0,101,1,2,1,1,0,0,0,0,0,1,14,components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpMessage.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpOperationFailedException.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/data/logo.jpeg;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyContentTypeTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpBindingRefTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpClientOptionsTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyImageFileTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyResponseBodyWhenErrorTest.java;,0,0
1103,Bug,Closed,Fixed,camel-core,Major,Markus Reil,2008/11/19 17:13:45 +0100,2008/11/19 20:54:23 +0100,Jonathan Anstey,2008/11/19 20:55:36 +0100,0.1540625,0.000845,Delayer not working as expected.,The delayer expression is not evaluated in my route builder:from(waitQueueName).delayer(header(HEADER_EXECUTION_TIME)).bean(routerBean).recipientList(header(HEADER_TARGET_ROUTE));While the recipientList expression is working the header expression is always ignored. I stepped through the code and saw that in DelayerType.createAbsoluteTimeDelayExpression() 'expr.getLanguage()' is always null: private Expression createAbsoluteTimeDelayExpression(RouteContext routeContext) { ExpressionType expr = getExpression(); if (expr != null) { if (ObjectHelper.isNotNullAndNonEmpty(expr.getLanguage())) { return expr.createExpression(routeContext); } } return null; }I have seen that this was changed in 1.5.0 (http://issues.apache.org/activemq/browse/CAMEL-811).,1.5.0,1.6.0; 2.0-M1,0,0,72,1,4,2,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/model/DelayerType.java;,0,0
1105,Improvement,Closed,Fixed,,Major,Jason Royals,2008/11/20 08:22:31 +0100,2008/11/20 19:23:17 +0100,Claus Ibsen,2008/11/20 20:57:25 +0100,0.524236111,0.06537037,Spring DSL - redeliveryPolicy element should have ref attribute,I'd like to be able to create reusable RedeliveryPolicy's in Spring and refer to them in Camel's Spring DSL. This is to achieve two goals: I can use the Spring PropertyPlaceholderConfigurer to enable us to tune timeouts and redelivery in production - we cannot do that with Camel's Spring DSL; I can have several routes sharing the same RedeliveryPolicy (but possibly with different exceptions).There doesn't seem to be a way to share RedeliveyPolicy's between onException elements  meaning it needs to be duplicated (at least not that I could find in the docco)For example  I'd like to do something like this: &lt;bean id='redeliveryPolicy' class='org.apache.camel.processor.RedeliveryPolicy'&gt; &lt;property name='...' value=${property.placeholder}/&gt; &lt;/bean&gt; &lt;camelContext&gt; &lt;route&gt; &lt;from uri='somewhere'/&gt; &lt;onException&gt; &lt;exception&gt;ExceptionA&lt;/exception&gt; &lt;redeliveryPolicy ref='redeliveryPolicy'/&gt; &lt;to uri='deadLetter'/&gt; &lt;/onException&gt; &lt;to uri='unreliableEndpoint'/&gt; &lt;/route&gt; &lt;route&gt; &lt;from uri='xyz'/&gt; &lt;onException&gt; &lt;exception&gt;ExceptionA&lt;/exception&gt; &lt;redeliveryPolicy ref='differentRedeliveryPolicy'/&gt; &lt;to uri='differentDeadLetter'/&gt; &lt;/onException&gt; &lt;to uri='unreliableEndpoint'/&gt; &lt;/route&gt; &lt;route&gt; &lt;from uri='somewhereElse'/&gt; &lt;onException&gt; &lt;exception&gt;ExceptionB&lt;/exception&gt; &lt;redeliveryPolicy ref='redeliveryPolicy'/&gt; &lt;to uri='deadLetter'/&gt; &lt;/onException&gt; &lt;to uri='anotherUnreliableEndpoint'/&gt; &lt;/route&gt; &lt;/camelContext&gt;Thanks!,1.5.0,1.6.0; 2.0-M1,0,0,170,1,3,1,1,0,0,0,0,0,2,6,components/camel-spring/src/test/java/org/apache/camel/spring/processor/onexception/RedeliveryPolicyReTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/RedeliveryPolicyRefTest.xml;camel-core/src/main/java/org/apache/camel/model/ExceptionType.java;camel-core/src/main/java/org/apache/camel/model/RedeliveryPolicyType.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/test/java/org/apache/camel/processor/ThroughPutLoggerTest.java;,0,0
1107,Bug,Closed,Fixed,camel-http,Major,Claus Ibsen,2008/11/21 11:23:50 +0100,2008/11/21 11:23:50 +0100,Claus Ibsen,2008/11/21 19:43:37 +0100,0.347071759,0.347071759,camel-http - does not remove httpClient.xxx URI options,When using the options to configure httpClient using URI option  they should be removed from the uri that is left over to the HTTPProducer.http://someserver?httpClient.soTimeOut=5000should remove the httpClient.xxx so it'shttp://someserver,1.5.0,1.6.0; 2.0-M1,0,0,45,1,3,1,1,0,0,0,0,0,1,14,components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpMessage.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpOperationFailedException.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/data/logo.jpeg;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyContentTypeTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpBindingRefTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpClientOptionsTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyImageFileTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyResponseBodyWhenErrorTest.java;,0,0
1108,Bug,Closed,Fixed,camel-core,Major,Vadim Katz,2008/11/21 21:33:13 +0100,2008/11/22 04:36:37 +0100,Willem Jiang,2008/11/27 21:50:19 +0100,6.011875,5.717847222,ParallelProcessing and executor flags are ignored in Multicast processor,The parallelProcessing and executor arguments are ignored in the constructor of MulticastProcessor. Here is a call that MulticastType makesorg.apache.camel.model.MulticastType.java return new MulticastProcessor(list  aggregationStrategy  isParallelProcessing()  threadPoolExecutor);MulticastProcessor ignores parallelProcessing and executor arguments and invokes a chain constructor with '.. false  null ..'org.apache.camel.processor.MulticastProcessor.java public MulticastProcessor(Collection&lt;Processor&gt; processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor) { this(processors  aggregationStrategy  false  null  false); } public MulticastProcessor(Collection&lt;Processor&gt; processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor  boolean streaming) { notNull(processors  'processors'); this.processors = processors; this.aggregationStrategy = aggregationStrategy; this.isParallelProcessing = parallelProcessing; if (isParallelProcessing) { if (executor != null) { this.executor = executor; } else { // setup default Executor this.executor = new ThreadPoolExecutor(processors.size()  processors.size()  0  TimeUnit.MILLISECONDS  new ArrayBlockingQueue&lt;Runnable&gt;(processors.size())); } } this.streaming = streaming; }Attached a patch but have not tested it. Also need a unit test for this.,1.5.0,1.6.0; 2.0-M1,0,0,173,1,5,3,0,0,0,0,1,0,1,1,camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;,0,0
1122,Bug,Closed,Fixed,,Major,Jonathan Anstey,2008/11/26 12:21:44 +0100,2008/11/26 12:21:44 +0100,Jonathan Anstey,2008/11/26 14:05:24 +0100,0.071990741,0.071990741,Camel should propagate exception cause in InOnly scenarios,In the case an exception is handled by the DeadLetterChannel  Camel will currently set the exception to null and add an exchange property containing the exception. We should also add this as a message header so that it will be propagated to external services  like a JBI service.,1.5.0,1.6.0; 2.0-M1,0,0,48,1,2,2,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelExceptionCausePropagatedTest.java;,0,0
1145,Bug,Closed,Fixed,camel-cxf,Major,Claus Ibsen,2008/12/04 12:42:32 +0100,2008/12/04 12:42:32 +0100,Willem Jiang,2008/12/05 11:05:28 +0100,0.932592593,0.932592593,CxfExchange does not copy unit of work and thus its null and thus NPE is thrown,William could you check this error reported by end userSee nabble:http://www.nabble.com/UnitOfWork-td20829434s22882.html,1.5.0,1.6.0; 2.0-M1,0,0,14,1,4,3,0,0,0,0,0,0,2,6,components/camel-cxf/pom.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/RouteBuilderCxfTracer.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/TestCamel1145Route.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/context-camel-1145.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java;,0,0
1146,Bug,Closed,Fixed,camel-mina,Major,Jonathan Anstey,2008/12/04 16:24:28 +0100,2008/12/04 16:24:28 +0100,Jonathan Anstey,2008/12/04 17:42:51 +0100,0.05443287,0.05443287,camel-mina adds two versions of slf4j on the classpath,One version comes from camel-mina (version 1.5.5) and one from mina-core (version 1.4.3). This causes problems as seen when trying to use camel-mina at runtime or in my case deploying to ServiceMix. This is the error I getorg.apache.xbean.kernel.ServiceRegistrationException: java.lang.NoSuchFieldError: name at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:424) at org.apache.xbean.kernel.standard.StandardKernel.registerService(StandardKernel.java:220) at org.apache.xbean.server.spring.loader.SpringLoader.load(SpringLoader.java:152) at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:83) at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:83) at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88) at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69) at org.apache.servicemix.jbi.framework.DeploymentService.deployServiceAssembly(DeploymentService.java:508) at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingSAs(AutoDeploymentService.java:482) at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingComponents(AutoDeploymentService.java:535) at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateSharedLibrary(AutoDeploymentService.java:317) at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateArchive(AutoDeploymentService.java:254) at org.apache.servicemix.jbi.framework.AutoDeploymentService.monitorDirectory(AutoDeploymentService.java:667) at org.apache.servicemix.jbi.framework.AutoDeploymentService.access$800(AutoDeploymentService.java:62) at org.apache.servicemix.jbi.framework.AutoDeploymentService$1.run(AutoDeploymentService.java:631) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)Caused by: java.lang.NoSuchFieldError: name at org.slf4j.impl.SimpleLogger.&lt;init&gt;(SimpleLogger.java:83) at org.slf4j.impl.SimpleLoggerFactory.getLogger(SimpleLoggerFactory.java:67) at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:103) at org.apache.mina.util.NamePreservingRunnable.&lt;init&gt;(NamePreservingRunnable.java:32) at org.apache.mina.transport.socket.nio.SocketAcceptor.startupWorker(SocketAcceptor.java:165) at org.apache.mina.transport.socket.nio.SocketAcceptor.bind(SocketAcceptor.java:141) at org.apache.camel.component.mina.MinaConsumer.doStart(MinaConsumer.java:60) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:421) at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:659) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:632) at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:167) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:162) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:97) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:116) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:617) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355) at org.apache.xbean.server.spring.configuration.SpringConfiguration.&lt;init&gt;(SpringConfiguration.java:63) at org.apache.xbean.server.spring.configuration.SpringConfigurationServiceFactory.createService(SpringConfigurationServiceFactory.java:106) at org.apache.xbean.kernel.standard.ServiceManager.start(ServiceManager.java:420) at org.apache.xbean.kernel.standard.ServiceManager.initialize(ServiceManager.java:200) at org.apache.xbean.kernel.standard.RegistryFutureTask$RegisterCallable.call(RegistryFutureTask.java:110) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) at java.util.concurrent.FutureTask.run(FutureTask.java:123) at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:409),1.5.0,1.6.0; 2.0-M1,0,0,144,1,5,3,0,0,0,0,0,0,1,1,components/camel-mina/pom.xml;,0,0
1187,Bug,Closed,Fixed,camel-mina,Major,Christopher Hunt,2008/12/15 06:48:47 +0100,2008/12/15 07:19:57 +0100,Claus Ibsen,2008/12/15 09:17:21 +0100,0.103171296,0.081527778,The Mina VM protocol is not recognising codec and other options,Use of the vm protocol appears to ignore any codec options. There could be other options that are missed also.Using the same URI but for tcp works fine.,1.5.0,1.6.0; 2.0-M1,0,0,28,1,2,1,0,0,0,0,0,0,2,11,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaCustomCodecTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTransferExchangeOptionTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaVMCustomCodecTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaVMFileTcpTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaVMTextlineProtocolTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaVMTransferExchangeOptionTest.java;components/camel-mina/src/test/resources/log4j.properties;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaCustomCodecTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaVMCustomCodecTest.java;,0,0
1191,Bug,Closed,Fixed,camel-velocity,Minor,Claus Ibsen,2008/12/17 09:33:52 +0100,2008/12/17 09:33:52 +0100,Jonathan Anstey,2008/12/17 15:41:23 +0100,0.255219907,0.255219907,camel-velocity - log4j is needed at runtime,See nabble:http://www.nabble.com/velocity%3A-Couldn%27t-find-class-org.apache.velocity.runtime.log.SimpleLog4JLogSystem-td21036449s22882.htmlJon do you mind taking a look at this  you are are good at maven pom's,1.5.0,1.6.0; 2.0-M1,0,0,28,1,3,2,0,0,0,0,0,0,1,1,components/camel-velocity/pom.xml;,0,0
1195,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2008/12/18 06:17:16 +0100,2008/12/18 06:17:16 +0100,Claus Ibsen,2008/12/26 11:35:19 +0100,8.220868056,8.220868056,File component - exclusive read lock strategy using renaming,See CAMEL-760But an end user has problem with this  the read lock can not be granted and a IOException is thrown.We should support the same strategy as the FTP consumer does with a try to rename the file.Also we should allow some nice URI options to select the strategy nio locks renaming,1.5.0; 1.6.0,2.0-M1,0,0,73,1,9,3,0,0,0,0,0,1,6,22,camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadRenameStrategyTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadRenameStrategyTest.java;components/camel-mail/pom.xml;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadRenameStrategyTest.java;camel-core/src/main/java/org/apache/camel/component/file/ExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileRenameExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/ExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileRenameExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadManuelTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadNoneStrategyTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadRenameStrategyTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileExclusiveReadTest.java;camel-core/src/test/resources/log4j.properties;,0,0
1196,Bug,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2008/12/18 06:59:04 +0100,2008/12/18 06:59:04 +0100,Claus Ibsen,2008/12/18 14:09:59 +0100,0.299247685,0.299247685,MockEndpoint - sleep for empty test doesnt work,See nabble:http://www.nabble.com/MockEndpoint---sleep-for-empty-tests-is-flawed--td21067367s22882.html,1.5.0,1.6.0; 2.0-M1,0,0,5,1,2,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;,0,0
1199,Bug,Closed,Fixed,camel-core,Major,Ron Gavlin,2008/12/19 13:20:41 +0100,2008/12/29 16:32:47 +0100,Gert Vanthienen,2009/01/05 09:53:57 +0100,16.85643519,6.723032407,Throttler appears to 'throttle' per thread instead of throttling across multiple threads,Throttler appears to 'throttle' per thread instead of throttling across multiple threads,1.5.0,1.6.0; 2.0-M1,0,0,1,1,6,4,0,0,0,0,1,0,4,7,camel-core/src/main/java/org/apache/camel/processor/Throttler.java;camel-core/src/test/java/org/apache/camel/processor/ThrottlerTest.java;camel-core/src/main/java/org/apache/camel/processor/Throttler.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/throttler.xml;camel-core/src/main/java/org/apache/camel/processor/Throttler.java;camel-core/src/test/java/org/apache/camel/processor/ThrottlerTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/throttler.xml;,0,0
1205,Bug,Closed,Fixed,camel-spring,Minor,Claus Ibsen,2008/12/29 10:32:39 +0100,2009/02/10 15:08:13 +0100,Claus Ibsen,2009/02/10 17:30:24 +0100,43.29010417,0.098738426,@EndpointInject can not lookup bean if endpoint is defined directly as a consumer (from),I was messing with camel-spring and routes using spring DSLI had this part of unit test code @EndpointInject(name = 'myFileEndpoint') protected Endpoint inputFile;To lookup an endppoint with the given name myFileEndpointBut if I define it directly then it cannot be found &lt;route&gt; &lt;from id='myFileEndpoint' uri='file://target/antpathmatcher?consumer.recursive=true&amp;amp;filter=#myFilter'/&gt; &lt;to uri='mock:result'/&gt; &lt;/route&gt;So I have to define it as a loose endpoint as: &lt;endpoint id='myFileEndpoint' uri='file://target/antpathmatcher?consumer.recursive=true&amp;amp;filter=#myFilter'/&gt; &lt;route&gt; &lt;from ref='myFileEndpoint'/&gt; &lt;to uri='mock:result'/&gt; &lt;/route&gt;,1.6.0; 2.0.0,2.0-M1,0,0,106,1,3,1,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/builder/xml/Namespaces.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/test/java/org/apache/camel/spring/NodeIdReferenceTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/NodeIdReferenceTest-context.xml;,0,0
1207,Bug,Closed,Fixed,osgi,Major,Willem Jiang,2008/12/29 10:59:17 +0100,2008/12/29 10:59:17 +0100,Willem Jiang,2009/01/05 01:07:29 +0100,6.589027778,6.589027778,ConcurrentModificationException when stop the camel-osgi bundle,ERROR: Error stopping mvn:org.apache.camel/camel-osgi/1.5.0 (org.osgi.framework.BundleException: Activator stop error.)java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:841) at java.util.HashMap$ValueIterator.next(HashMap.java:871) at org.apache.camel.osgi.Activator.mayBeRemoveComponentFor(Activator.java:85) at org.apache.camel.osgi.Activator.stop(Activator.java:120) at org.apache.felix.framework.util.SecureAction.stopActivator(SecureAction.java:613) at org.apache.felix.framework.Felix._stopBundle(Felix.java:1995) at org.apache.felix.framework.Felix.stopBundle(Felix.java:1952) at org.apache.felix.framework.Felix.setFrameworkStartLevel(Felix.java:1151) at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:267) at java.lang.Thread.run(Thread.java:595),1.4.0; 1.5.0,1.6.0; 2.0-M1,0,0,28,1,1,1,0,1,0,0,0,0,2,2,components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiComponentResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiComponentResolver.java;,0,0
1209,Improvement,Closed,Fixed,camel-xmpp,Major,Claus Ibsen,2008/12/31 10:27:29 +0100,2008/12/31 18:46:30 +0100,Jonathan Anstey,2008/12/31 19:32:16 +0100,0.378321759,0.031782407,camel-xmpp to work with google chat,See blog entryhttp://www.andrejkoelewijn.com/wp/2008/12/30/using-google-talk-from-java-example/There is a solution that works with plain java. Could be used to identify what needs to be fixed in Camel to get it working with Google chat as well.Notice I haven't verified if it doesn't already work with google chat. Just created this ticket to not forget it.,1.5.0,1.6.0; 2.0-M1,0,0,54,1,5,3,0,0,0,0,0,0,1,5,components/camel-xmpp/pom.xml;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/GoogleTalkTest.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/UriConfigurationTest.java;,0,0
1211,Improvement,Closed,Fixed,camel-core; camel-restlet,Minor,Przemyslaw Budzik,2009/01/01 22:38:47 +0100,,Unassigned,2010/03/12 12:18:58 +0100,434.5695718,,camel-restlet security extension,Now we have basic http auth. Quick shot is adding digest as it is supported by Restlet  but I have something more in mind. As I'm using token based auth and for me http auth is not suitable (pushing credentials back and forth all the time etc). How about a pattern where from one endpoint you can consume a ticket/token/sessionId and you can use it as a header to authenticate? As now the realm is to keep login and pass and it could be something like a bean that can validate the token. Of course that data would not be static so it is more about a callback (eg. getTokens()) than a static map/list. And finally as we have the uri we can resolve an 'operation' and do authorization (so uri+method is the target). I mean in my project I have processor that does stuff like that and it would be cool to have all those things in one place in consumer (and provide only data and have skeletal logic under the hood).Now the question is if my idea makes sense and if so what are your suggestions on how to implement that w/o reinventing the wheel (and not using ACEGI )Btw  Claus  William - logs about attaching/detaching restlets are at info level and it's kind of spamming if there are say 20 endpoints... Maybe it should be at debug?,1.6.0; 2.0.0,1.6.0; 2.0-M1,0,0,237,0,5,2,0,0,0,1,0,0,1,1,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java;,0,0
1212,Improvement,Closed,Fixed,camel-jms,Major,Jason Royals,2009/01/02 01:06:11 +0100,2009/03/19 10:56:25 +0100,Claus Ibsen,2009/03/20 15:21:40 +0100,77.59408565,1.184201389,Improve JMS header name endocing/decoding strategy,We have a scenario where we need to perform the following style of integration:HTTP -&gt; JMS -&gt; HTTPThe final HTTP endpoint needs to receive the headers as they were in the original HTTP request. However  I am finding that the HTTP headers that contain a hyphen (such as Content-Type  Content-Length etc) are being omitted when the messages go onto the queue. JmsBinding has two static methods to perform some basic header manipulation to 'encode' and 'decode' headers that are not valid Java identifiers. However  the strategy employed does not handle hyphens or other illegal characters  only periods. Secondly  as static methods they cannot be overridden by my own extension of JmsBinding. And finally  JmsHeaderFilterStrategy has a static link back to these methods in JmsBinding so that makes it hard to replace.To me  it would be more appropriate that HeaderFilterStrategy implementations should actually contain the code to Advise if a header needs to be encoded/decoded  which it already does  but in addition; Actually perform that encoding/decoding in it's own implementation-specific wayThis affects 1.5.0 but it's also in the trunk like this.I have a workaround which is a little messy but it works Thanks Jason,1.5.0,2.0-M2,0,0,206,1,3,1,0,0,0,0,0,0,1,13,components/camel-jms/src/main/java/org/apache/camel/component/jms/DefaultJmsKeyFormatStrategy.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsHeaderFilterStrategy.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsKeyFormatStrategy.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/PassThroughJmsKeyFormatStrategy.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/DefaultJmsHeaderKeyFormatStrategyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithCustomKeyFormatStrategyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithDefaultKeyFormatStrategyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithPassThroughKeyFormatStrategyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/PassThroughJmsKeyFormatStrategyTest.java;,0,0
1233,Bug,Closed,Fixed,camel-core,Critical,Claus Ibsen,2009/01/07 14:26:51 +0100,2009/01/07 14:26:51 +0100,Claus Ibsen,2009/01/07 17:46:49 +0100,0.138865741,0.138865741,Pipeline could change the MEP unintended,When exchanges is processed from pipeline they result is copyed as input to the next exchange. However during this copy Camel could potentially change the MEP to InOut. It should respect the original MEP.The flaw is in ExchangeHelper#copyResultsFixing this also forces end users to use the correct send/request method on ProducerTemplate. Now Camel will keep the MEP.So if you are using send then its inOnly and then you the there is no result. Use request for InOut MEP's.This breaks a few of our own unit testing that was using the wrong method.,1.5.0,1.6.0; 2.0-M1,0,0,92,1,5,1,0,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/test/java/org/apache/camel/processor/MultiCastAggregatorTest.java;camel-core/src/test/java/org/apache/camel/processor/PipelineMEPTest.java;camel-core/src/test/java/org/apache/camel/processor/PipelineTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/InterceptAlterMessageBeforeRedeliveryTest.java;,0,0
1235,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/01/08 06:38:04 +0100,,Unassigned,2009/01/08 08:04:37 +0100,0.060104167,,Tracer - allow configuration of fixed size of leading breadcrum or let it be variable sized,The TraceFormatter fixes the breadcrum to 65 chars. If you output the exchange id and its based on the computer name it can be long  and thus cut important parts such as the destination.Allow it to be wider and add option to configure the length or let it be variable.breadcrumLength = 65. Setting it to 0 will let it be flexible. Maybe bump the 65 to 80 to let it be bigger from the start.,1.5.0,1.6.0; 2.0-M1,0,0,75,0,1,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceFormatter.java;,0,0
1236,Improvement,Closed,Fixed,camel-core; camel-ftp,Major,Claus Ibsen,2009/01/08 09:27:57 +0100,2009/01/08 09:27:57 +0100,Claus Ibsen,2009/02/06 18:14:03 +0100,29.36534722,29.36534722,file consumer - support expression for setting the folder/file to consume,Would be nice to support the file language to set dynamic patterns for the starting folder/file to consume.See nabble:http://www.nabble.com/Mega-mega-%28VFS%29-file-handler-to21346374s22882.html,2.0.0,2.0-M1,0,0,22,1,2,1,0,0,0,0,0,0,1,36,camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/component/file/NewFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/NewFileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerBeginAndCommitExpressionRenameStrategyTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerBeginAndCommitRenameStrategyTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerExpressionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerFileExpressionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerMoveExpressionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerExpressionTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFileToFtpDefaultRootRenameStrategyTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpDirectoryToBinaryFilesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFilePostfixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFilePrefixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPassiveModeTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFileExpressionTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFilePostfixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFilePrefixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSetNamesWithMultiDirectoriesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToAsciiFileNoBodyConversionTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToAsciiFileTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinaryFileTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinaryFilesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToFileNoFileNameHeaderTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerExpressionTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerMoveExpressionTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpIllegalOptionsTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpLoginTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerExpressionTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerTempPrefixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpServerTestSupport.java;,0,0
1247,Bug,Closed,Fixed,camel-ftp,Major,Paddy Daly,2009/01/12 13:18:20 +0100,2009/01/12 13:29:07 +0100,Claus Ibsen,2009/01/14 06:05:12 +0100,1.699212963,1.691724537,SFTP : Polling - Cannot list directory Error,http://www.nabble.com/SFTP-%3A-Polling---Cannot-list-directory-to21413159s22882.html,2.0.0,2.0-M1,0,0,4,1,19,2,0,0,0,0,0,0,4,8,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpRemoteFileOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpRemoteFileOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerWithNoFileOptionTest.java;,0,0
1254,Improvement,Closed,Fixed,camel-cxf,Minor,Claus Ibsen,2009/01/14 08:50:46 +0100,2009/01/16 15:43:11 +0100,William Tam,2009/01/28 04:48:50 +0100,13.83199074,11.54559028,camel-cxf: URI option for serviceClass does not support lookup in registry,Having an endpoint such as: String cxfEndpoint = 'cxf://http://localhost:8080/part-five/webservices/incident' + '?serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint' + '&amp;wsdlURL=report_incident.wsdl';The serviceClass option currently only supports defining a FQN for the class. I think we need to support Registry lookup as well using the # notation. So you can do: String cxfEndpoint = 'cxf://http://localhost:8080/part-five/webservices/incident' + '?serviceClass=#reportService' + '&amp;wsdlURL=report_incident.wsdl';And then have it defined in Spring XML:&lt;bean id='reportService' class='...'&gt;The # notation is already supported if you use the cxf Spring XML configuration. We need this in the Java DSL as well.Sorry if it already exists. But I got a hint from a Camel end user that it didn't,1.5.0,1.6.0; 2.0-M1,0,0,131,1,15,4,0,0,0,0,0,0,3,66,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapConsumer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfEndpointUtils.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfEndpointUtilsTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfEndpointUtilsWithSpringTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeans.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/util/CxfEndpointBeans.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfExchange.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfMessage.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfPayload.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DataFormat.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/MessageInvoker.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/MessageDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/MessageInvokerInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/PayLoadDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/AbstractMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/AbstractMessageOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/DOMInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/DOMOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/FakeBindingOperationInfo.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/FaultOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/RawMessageContentRedirectInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/XMLMessageInInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/XMLMessageOutInterceptor.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/AbstractInvokingContext.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/CxfClient.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/CxfClientFactoryBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/InvokingContext.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/InvokingContextFactory.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/PayloadInvokingContext.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/PayloadMessage.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/RawMessageInvokingContext.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/package.html;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfEndpointUtils.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfHeaderHelper.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfEndpointTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfGreeterPayLoadWithFeatureRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadMessageRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadSoapHeaderTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfWsdlFirstTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfEndpointUtilsTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfEndpointUtilsWithSpringTest.java;pom.xml;,0,0
1270,Bug,Closed,Fixed,camel-core; camel-spring,Minor,Claus Ibsen,2009/01/18 10:56:18 +0100,2009/01/18 10:56:18 +0100,Claus Ibsen,2009/01/18 11:06:27 +0100,0.007048611,0.007048611,Starting Camel using Main from camel:run or Main.class - countdown latch is hanging,The countdown latch in MainSupport is not completed when Main is stopping.Then we have a hanging thread. Can bee seen using ctrl + /,1.5.0,1.6.0; 2.0-M1,0,0,24,1,2,1,0,0,1,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/util/MainSupport.java;components/camel-spring/src/main/java/org/apache/camel/spring/Main.java;,0,0
1271,Bug,Closed,Fixed,camel-jbi,Major,Darren Davison,2009/01/18 21:30:59 +0100,2009/01/19 11:00:30 +0100,Gert Vanthienen,2009/02/10 16:39:01 +0100,22.79724537,22.23508102,Can only interact with servicemix-http if logging is at DEBUG,Given the following camel DSL:from('activemq:queue.testJms.in')  .to('jbi:service:urn:oms:testHttp?mep=in-out')  .to('activemq:queue.testJms.out'); and the following xbean.xml for the smx (3.3) SU:&lt;http:endpoint  service='oms:testHttp'  endpoint='testHttp'  role='provider'  locationURI='http://localhost:8080/testP1'&gt; &lt;/http:endpoint&gt; then Camel operates correctly (or at least as desired) only if DEBUG logging is enabled in the org.apache.servicemix.http package. This seems to be because a DOMSource is returned (which Camel can convert). If the log level is reduced (say to WARN) then a StreamSource object is returned instead which Camel appears unable to convert. This results in stack traces such as:ERROR - DeadLetterChannel - Failed delivery for exchangeId: ID-davisond-laptop/53380-1232099798317/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: Attempted read on closed stream. org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: Attempted read on closed stream.  at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:441)  at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeCo+nverter.java:57),1.5.0,1.6.0; 2.0-M1,0,1,124,1,20,4,0,0,0,0,0,0,3,16,components/camel-jaxb/pom.xml;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java;components/camel-jaxb/src/test/java/org/apache/camel/example/JAXBConverterMessageTypeTest.java;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCaching.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java;camel-core/src/main/java/org/apache/camel/util/MessageHelper.java;camel-core/src/test/java/org/apache/camel/component/dataset/DataSetSedaTest.java;camel-core/src/test/java/org/apache/camel/issues/CacheInputStreamInDeadLetterIssue520Test.java;camel-core/src/test/java/org/apache/camel/processor/StreamResequencerTest.java;camel-core/src/test/java/org/apache/camel/processor/StreamSourceContentBasedRouterTest.java;camel-core/src/test/java/org/apache/camel/processor/ThreadTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/StreamCachingTest.java;camel-core/src/test/java/org/apache/camel/util/MessageHelperTest.java;components/camel-jaxb/src/test/java/org/apache/camel/example/JAXBConvertTest.java;,0,0
1274,Bug,Closed,Fixed,camel-jetty,Minor,Gert Vanthienen,2009/01/19 23:02:36 +0100,2009/01/19 23:02:36 +0100,Gert Vanthienen,2009/01/19 23:49:11 +0100,0.032349537,0.032349537,Jetty HTTP SelectChannelConnector is not closed when CamelContext is stopped,When the camel-jetty component is shut down  it leaves Jetty SelectChannelConnector instances active.,1.5.0,1.6.0; 2.0-M1,0,0,13,1,2,2,0,0,0,0,1,0,1,2,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpEndpointDisconnectTest.java;,0,0
1277,Bug,Closed,Fixed,,Major,Charles Moulliard,2009/01/20 13:31:16 +0100,2009/01/20 13:56:14 +0100,Claus Ibsen,2009/01/20 13:56:14 +0100,0.017337963,0,Apache camel example reportincident dependency removed from pom.xml,Hi Someone has removed the following dependency from the camel pom.xml file : &lt;dependency&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-example-reportincident&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt;,2.0.0,,0,0,17,1,1,1,0,0,0,0,0,1,1,1,pom.xml;,0,0
1283,Bug,Closed,Fixed,,Major,Roman Kalukiewicz,2009/01/22 00:41:48 +0100,2009/01/22 00:41:48 +0100,Roman Kalukiewicz,2009/01/22 16:39:54 +0100,0.665347222,0.665347222,SQL component doesn't handle wrong number of parameters,NPE thrown when null body sent to to SQL endpoint. When to many parameters are set then exception is thrown but nothing wrong happens when to less parameters are set.It should be possible to set null as a body as there might be parameterless statement to execute. There should be consistent Exception thrown when wrong number of parameters is set.,1.5.0,2.0-M1,0,0,60,1,2,2,0,0,0,0,0,0,1,2,components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlProducer.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlRouteTest.java;,0,0
1296,Bug,Closed,Fixed,camel-ftp,Major,Claus Ibsen,2009/01/27 08:27:08 +0100,2009/01/27 08:27:08 +0100,Claus Ibsen,2009/01/27 08:28:30 +0100,0.000949,0.000949,camel-ftp : uri set on endpoint has stripped all parameters  that is wrong as they should be there as well,See nabblehttp://www.nabble.com/Camel-Remote-File-Producer---Recipient-List-Password-Issue-td21678952s22882.htmlThe bug is introduced with CAMEL-941,1.5.0,1.6.0; 2.0-M1,0,0,19,1,3,1,0,0,0,0,0,1,1,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpRemoteFileComponent.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerMultipleDirectoriesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java;,0,0
1297,Improvement,Closed,Fixed,camel-core,Major,Roman Kalukiewicz,2009/01/27 13:34:16 +0100,2009/01/27 13:34:16 +0100,Roman Kalukiewicz,2009/02/09 22:21:16 +0100,13.36597222,13.36597222,Seda component should configure its executor,Currently SEDA endpoint processes only using 1 thread so it is impossible to easily configure few concurrent processings on 1 seda endpoint. I believe SEDA endpoint could be configured with some executor and/or thread number that we would like to use to process given flows.,1.5.0,2.0-M1; 1.6.1,0,0,45,1,4,3,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaConfigureTest.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaConsumerStartStopTest.java;,0,0
1325,Bug,Closed,Fixed,camel-core,Major,Trev,2009/02/08 22:33:07 +0100,,Unassigned,2009/02/09 00:10:16 +0100,0.067465278,,Two more NullPointerExceptions when context classloader is null,When I applied the CAMEL-1301 fix (thanks Claus) I hit two more NullPointerExceptions caused by code that assumes that the context classloader will never be null.Here's the relevant part of one stack trace:java.lang.NullPointerException at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:97) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:91)And the other:java.lang.NullPointerException at org.apache.camel.util.ResolverUtil.getResources(ResolverUtil.java:402) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:313) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:290)A patch is attached.,1.5.0,1.6.0; 2.0-M1,0,1,51,0,3,2,0,0,0,1,0,0,0,0,,0,0
1337,Improvement,Closed,Fixed,camel-core,Major,Willem Jiang,2009/02/13 03:21:50 +0100,2009/02/13 03:21:50 +0100,Willem Jiang,2009/02/17 09:49:11 +0100,4.268993056,4.268993056,The xpath expression evaluations should rest the cached stream,&lt;route&gt; &lt;from uri='jetty:http://localhost:8084/services/simpleService'/&gt; &lt;choice&gt; &lt;when&gt; &lt;xpath&gt;/sim:GetCapabilitiesRequest&lt;/xpath&gt; &lt;/when&gt; &lt;when&gt; &lt;xpath&gt;/sim:GetMetadataRequest&lt;/xpath&gt; &lt;/when&gt; &lt;/choice&gt;&lt;/route&gt;A messages that matches the first when statement (I tested with both the route above and a version where I swapped the two xpath statements to make sure it was not dependent on the actual message) throws no errors and a call that matches the second when statement throws the Premature end of file error.,1.5.0,2.0-M1; 1.6.1,0,0,74,1,3,2,0,0,0,0,0,0,2,4,components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java;camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyWithXPathChoiceTest.java;,0,0
1357,Improvement,Closed,Fixed,,Major,Jonathan Anstey,2009/02/18 19:10:16 +0100,2009/02/18 19:10:16 +0100,Jonathan Anstey,2009/02/18 19:43:27 +0100,0.023043981,0.023043981,Add regexReplaceAll to builder support,... so we can do things likefrom('direct:start').setBody(regexReplaceAll(body()  'Foo'  'Bar'))...which essentially is equivalent to sed 's/Foo/Bar/g' on the body.,1.6.0,2.0-M1; 1.6.1,0,0,28,1,2,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/builder/Builder.java;camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/ValueBuilder.java;camel-core/src/test/java/org/apache/camel/processor/RegExRouteTest.java;,0,0
1366,Bug,Closed,Fixed,camel-jms,Major,Michael Chen,2009/02/20 23:28:22 +0100,2009/02/26 18:44:31 +0100,Claus Ibsen,2009/02/27 14:16:49 +0100,6.616979167,0.814097222,EndpointMessageListener should respect ExchangePattern,In all current releases  org.apache.camel.component.jms.EndpointMessageListener.onMessage() has the following logic (line 90 in 1.6.0 code):// send the replyif (rce == null &amp;&amp; body != null &amp;&amp; !disableReplyTo) { sendReply(replyDestination  message  exchange  body);}This logic should also respect ExchangePattern of the exchange  so I propose a change to:// send the replyif (rce == null &amp;&amp; body != null &amp;&amp; exchange.isOutCapable()) { sendReply(replyDestination  message  exchange  body);}This change allows a processing pattern where the route may change the ExchangePattern using methods like RouteBuilder.inOnly() to switch the MEP at will so that the reply is send at a later time (true asynchronous exchange). This processing pattern is particularly useful for integrating long running services. For example // Java DSLfrom('activemq:my_queue?exchangePattern=InOnly').to('predict_weather://?reply_later=true');// orfrom('activemq:my_queue2').inOnly().to('predict_weather://?reply_later=true');The flaw of the current logic makes it impossible to do true asynchronous exchange  because 1) it does not respect the ExchangePattern; 2) if property 'disableReplyTo' is used  the 'org.apache.camel.jms.replyDestination' property will not be set (see method createExchange in the same file)  thus downstream cannot find the reply destination.The proposed change can also deprecate the disableReplyTo property and put the MEP concept into good use.,1.6.0,2.0-M1,0,0,216,1,11,2,0,0,0,0,1,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestLateReplyTest.java;,0,0
1378,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/02/24 17:22:36 +0100,2009/02/24 17:22:36 +0100,Claus Ibsen,2009/02/24 17:58:14 +0100,0.02474537,0.02474537,@Header should have a value default so you do not have to set the name attribute,Doing this bean binding: public List&lt;String&gt; route(@XPath('/customer/id') String customerId  @Header('Location') String location  Document body) {The @Header does not have a default value  so you have to do this to get it to work: public List&lt;String&gt; route(@XPath('/customer/id') String customerId  @Header(name = 'Location') String location  Document body) {So we should support you do not have to set the name attribute.,1.6.0,2.0-M1,0,0,84,1,2,1,0,0,0,0,0,0,3,15,camel-core/src/main/java/org/apache/camel/Header.java;camel-core/src/main/java/org/apache/camel/InOnly.java;camel-core/src/main/java/org/apache/camel/InOut.java;camel-core/src/main/java/org/apache/camel/Property.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithAnnotationAndExchangeTest.java;camel-core/src/test/java/org/apache/camel/language/BeanTest.java;camel-core/src/test/java/org/apache/camel/processor/BeanWithExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/BodyInAggregatingStrategy.java;camel-core/src/test/java/org/apache/camel/processor/ClaimCheckTest.java;camel-core/src/test/java/org/apache/camel/processor/MethodFilterTest.java;camel-core/src/test/java/org/apache/camel/processor/MyAggregationStrategy.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRetryUntilTest.java;components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java;components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java;,0,0
1384,Bug,Closed,Fixed,camel-core,Major,Michael Chen,2009/02/25 18:54:15 +0100,2009/02/26 18:32:59 +0100,Claus Ibsen,2009/02/27 11:00:24 +0100,1.6709375,0.685706019,ExchangeHelper should respect ExchangePattern.InOptionalOut,The utility method org.apache.camel.util.ExchangeHelper.copyResults() is use by many core classes. However  this method does not properly support MEP InOptionalOut.Assuming in an InOptionalOut exchange  having no out message means just that &#8211; no out message should be sent  then the following lines in this method// Message out = source.getOut(false); if (out != null) { result.getOut(true).copyFrom(out); } else { // no results so lets copy the last inputshould be changed to:// Message out = source.getOut(false); if (out != null) { result.getOut(true).copyFrom(out); } else if (result.getPattern() == ExchangePattern.InOptionalOut) { result.setOut(null); } else { // no results so lets copy the last input,1.6.0,2.0-M1,0,0,130,1,2,1,0,0,1,1,1,0,1,5,camel-core/src/main/java/org/apache/camel/component/dataset/DataSetConsumer.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java;camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/test/java/org/apache/camel/processor/RouteMEPOptionalOutTest.java;,0,0
1401,Bug,Closed,Fixed,camel-jaxb,Critical,Ivan Dubrov,2009/02/27 07:31:24 +0100,2009/02/27 08:31:50 +0100,Claus Ibsen,2009/02/27 10:12:42 +0100,0.112013889,0.070046296,JaxbDataFormat is not thread-safe,JaxbDataFormat reuses the Marshaller/Unmarshaller instances.However  according to the https://jaxb.dev.java.net/faq/index.html#threadSafety  Marshaller/Unmarshaller instances are NOT thread safe  so you can't use them from separate threads at the same time.Due to this we are getting exceptions from the JAXB implementation (like ClassCastException or 'org.xml.sax.SAXException: FWK005 parse may not be called while parsing.'). Everything works nice with our custom JaxbDataFormat that creates new Unmarshaller/Marshaller instance on every request.Also  lazy-creating instances (like JAXBContext) in getter methods is not thread-safe as well (because explicit synchronization is required).,1.5.0; 1.6.0,2.0-M1; 1.6.1,0,0,84,1,3,1,0,1,0,0,0,0,1,6,components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbConverter.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java;components/camel-jaxb/src/test/java/org/apache/camel/example/DataFormatConcurrentTest.java;components/camel-jaxb/src/test/java/org/apache/camel/example/DataFormatDataSetTest.java;components/camel-jaxb/src/test/java/org/apache/camel/example/JAXBConvertTest.java;,0,0
1407,Improvement,Closed,Fixed,camel-quartz,Major,Claus Ibsen,2009/02/28 15:16:35 +0100,2009/02/28 15:16:35 +0100,Claus Ibsen,2009/02/28 16:11:26 +0100,0.038090278,0.038090278,Camel-quartz - improve setting of cron expression to be more cron like,See nabble:http://www.nabble.com/Re%3A-Camel-quartz-td22247508.html,1.6.0,2.0-M1,0,0,5,1,3,1,0,0,0,0,0,0,2,11,components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzCronUsingPlusAsSpaceRouteTest.java;components/camel-quartz/pom.xml;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/CamelJob.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzConstants.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/StatefulCamelJob.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzCronRouteTest.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzEndpointConfigureTest.java;components/camel-quartz/src/test/resources/log4j.properties;,0,0
1408,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/02/28 17:36:21 +0100,2009/02/28 17:36:21 +0100,Claus Ibsen,2009/02/28 18:38:00 +0100,0.0428125,0.0428125,File component - better support for absolute path,See nabble:http://www.nabble.com/File%3A-using-absolute-file-paths-with-moveExpressions-td22253199.html,2.0-M1,2.0-M1,0,0,5,1,2,1,0,0,0,0,0,0,2,13,camel-core/src/main/java/org/apache/camel/language/simple/FileExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/language/simple/FileLanguage.java;camel-core/src/test/java/org/apache/camel/language/FileLanguageTest.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileExchange.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameExclusiveReadLockStrategy.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerAbsolutePathTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerCommitRenameAbsolutePathStrategyTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerLocalWorkDirectoryAsAbsolutePathTest.java;,0,0
1411,Bug,Closed,Fixed,osgi,Critical,Claus Ibsen,2009/03/03 10:24:47 +0100,2009/03/03 14:16:16 +0100,Claus Ibsen,2009/03/03 17:59:02 +0100,0.315451389,0.154699074,CamelContext - Add ClassResolver to be used when you need to load a class instead of ObjectHelper.loadClass to work in OSGi environments,Add the skeleton and let Willem add the stuff in camel-osgi,1.6.0,2.0-M1,1,1,11,1,11,4,0,0,1,0,0,0,2,49,camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/ReportingTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/WebSpherePacakageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/model/dataformat/DataFormatType.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/LoadBalancerType.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/spi/ClassResolver.java;camel-core/src/main/java/org/apache/camel/spi/PackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/spi/PackageScanFilter.java;camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java;camel-core/src/main/java/org/apache/camel/util/WebSphereResolverUtil.java;camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java;camel-core/src/test/java/org/apache/camel/converter/JaxpTest.java;camel-core/src/test/java/org/apache/camel/converter/StringSourceTest.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyKeyValuePairFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/kvp/BindyKeyValuePairDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/util/AnnotationModelLoader.java;components/camel-jcr/src/test/java/org/apache/camel/component/jcr/JcrConverterTest.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiAnnotationTypeConverterLoader.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiPackageScanClassResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiResolverUtil.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/CamelOsgiTestSupport.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/OsgiAnnotationTypeConverterLoaderTest.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/OsgiResolverUtilTest.java;components/camel-scala/src/test/scala/org/apache/camel/scala/ScalaTypeConverterTest.scala;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/RouteBuilderFinder.java;tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/ConvertersMojo.java;camel-core/pom.xml;camel-core/src/main/java/org/apache/camel/impl/DefaultClassResolver.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaComponent.java;components/camel-spring/src/main/java/org/apache/camel/component/xslt/XsltComponent.java;components/camel-spring/src/main/java/org/apache/camel/spring/util/SimpleRouteBuilder.java;components/camel-web/src/main/java/org/apache/camel/web/resources/ConvertersResource.java;,0,0
1412,Bug,Closed,Fixed,camel-jms,Major,Willem Jiang,2009/03/03 10:58:51 +0100,2009/03/03 11:00:26 +0100,Willem Jiang,2009/03/06 08:35:54 +0100,2.900729167,2.89962963,Can not load the QueueBrowserStrategy in OSGI environment,Here is the mail thread which discusses about it.http://www.nabble.com/Classloading-and-OSGI-to22303475.html#a22303475,1.6.0,2.0-M1; 1.6.1,0,0,12,1,2,2,0,0,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;,0,0
1414,Bug,Closed,Fixed,camel-jms,Major,Nicolas Bouillon,2009/03/03 15:37:47 +0100,2009/03/03 15:59:14 +0100,Willem Jiang,2009/03/03 16:46:35 +0100,0.047777778,0.032881944,JMSMessage vanishes attachments,When using this kind of route&lt;from uri='activemq:queue:test'/&gt;&lt;camel:process ref='mailProcessor' /&gt;&lt;to uri='smtp://localhost:25?to=user@localhost' /&gt;and trying to enrich the message in the mailProcessor withexchange.getIn().addAttachment('attachement.txt'  new DataHandler('Hello world'  'text/plain'));The received mail doesn't contains any attachment.If the input 'from' is a 'direct' instead of activemq  it works fine.Inspecting source code  MessageSupport.copyFrom(Message that) doesgetAttachments().putAll(that.getAttachments());but the child class JmsMessage doesn't.,2.0.0,2.0-M1; 1.6.1,0,0,52,1,3,3,0,0,0,0,0,0,2,2,components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationMessage.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;,0,0
1417,Bug,Closed,Fixed,camel-core,Critical,Claus Ibsen,2009/03/04 09:26:41 +0100,2009/03/04 09:26:41 +0100,Claus Ibsen,2009/03/04 11:58:01 +0100,0.105092593,0.105092593,StreamCache causes to many type converters not possible,Since StreamCache is default turned on it cause to many convters attempt that fails in MessageSupport.No type converter available to convert from type: java.lang.Integer to the required type: org.apache.camel.StreamCache with value 1It hurts performance to much. See nabble:http://www.nabble.com/Performance-and-MessageSupport.getBody-%281.6.0%29-td22291841s22882.html,1.6.0,2.0-M1; 1.6.1,0,0,41,1,2,1,0,0,0,0,1,0,2,9,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java;camel-core/src/test/java/org/apache/camel/component/mock/MockEndpointTest.java;camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java;camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/StreamCachingInterceptor.java;camel-core/src/test/java/org/apache/camel/processor/Camel715ThreadProcessorTest.java;camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java;,0,0
1424,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/03/05 07:09:39 +0100,2009/03/13 10:59:36 +0100,Claus Ibsen,2009/03/26 13:01:11 +0100,21.24412037,13.08443287,Bean component - improve method selection logic for overloaded methods,If end users have overloaded methods with different types as method parameter Camel should try to find the method with exact type match from the payload.See nabble:http://www.nabble.com/Is-it-possible-to-overload-a-bean-method--td22338316s22882.html,1.6.0,1.6.1; 2.0-M2,0,0,30,1,5,1,0,0,0,0,0,0,4,9,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanConstants.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/ParameterMappingStrategy.java;camel-core/src/test/java/org/apache/camel/component/bean/CustomParameterMappingStrategyTest.java;camel-core/src/test/java/org/apache/camel/processor/BeanWithExceptionTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoAMoreComplexOverloadedTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;,0,0
1442,Bug,Closed,Fixed,camel-bindy,Major,Charles Moulliard,2009/03/09 16:37:35 +0100,2009/03/12 14:51:45 +0100,Hadrian Zbarcea,2009/03/12 14:59:54 +0100,2.932164352,0.005659722,unmarshaling of data always send the last occurence of the stream,The unmarshaling method of BindyDataFormat (CSV or Key Value Pair) does not create a new model object for each new line of the stream readed,2.0-M1,2.0-M1,0,0,25,1,7,3,0,0,0,0,0,0,0,0,,0,0
1443,Bug,Closed,Fixed,osgi,Major,Zhou,2009/03/10 05:14:36 +0100,2009/03/10 08:42:44 +0100,Willem Jiang,2009/03/12 08:47:48 +0100,2.148055556,2.003518519,Unable to resolve scripting languages in OSGi environment,The OsgiLanguageResolver.java created since CAMEL-1221 does not resolve scripting languages by using the default resolver declared in camel-script. The DefaultLanguageResolver  however in the non-osgi context  handles it properly.This leads to NullPointerException while launching a route in an OSGi container using a scripting language  e.g. javascript.Exception in thread 'SpringOsgiExtenderThread-2' java.lang.NullPointerException at org.apache.camel.model.language.ExpressionType.createPredicate(ExpressionType.java:145) at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:95) at org.apache.camel.model.WhenType.createProcessor(WhenType.java:57) at org.apache.camel.model.ChoiceType.createProcessor(ChoiceType.java:73)...,1.6.0,2.0-M1; 1.6.1,0,1,69,1,3,2,0,0,0,1,0,1,2,10,camel-core/src/main/java/org/apache/camel/impl/DefaultLanguageResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiLanguageResolver.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/OsgiLanguageResolverTest.java;components/camel-osgi/pom.xml;components/camel-osgi/src/main/java/org/apache/camel/osgi/Activator.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiLanguageResolver.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/CamelMockBundle.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/OsgiLanguageResolverTest.java;components/camel-osgi/src/test/resources/META-INF/services/org/apache/camel/language/resolver/default;components/camel-osgi/src/test/resources/log4j.properties;,0,0
1451,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/03/12 05:42:01 +0100,2009/03/12 05:42:01 +0100,Claus Ibsen,2009/03/12 06:30:09 +0100,0.033425926,0.033425926,IdempotentConsumer - should only add to repository after processing  so we know the processing was a success,Just as the file component does with its build in support for idempotent. It should add to it last  eg after processing.See nabble:http://www.nabble.com/Problem-with-IdempotentConsumer-td22467720s22882.html,1.5.0; 1.6.0,2.0-M1,0,0,26,1,2,1,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java;camel-core/src/test/java/org/apache/camel/processor/IdempotentConsumerTest.java;,0,0
1461,Bug,Closed,Fixed,camel-jms,Major,Michael Chen,2009/03/16 19:15:23 +0100,2009/03/23 17:00:35 +0100,Claus Ibsen,2009/03/24 12:19:23 +0100,7.711111111,0.804722222,A request route with a topic node incurs a 20 second wait and refers to the wrong MEP.,If a route contains a node that publishes to a topic  the route is incorrectly suspended for a default 20 seconds at the topic node. Further  JmsProducer.java checks the MEP of the original request Exchange and not the endpoint of the topic.For example  say I have a route built like this:from('activemq:queue:request'). to('generate_news'). to('activemq:topic:news'). to('do_something_else');The original request is expecting a reply. However  after the 'news' is pumped into the news topic  there is a default 20 second wait (requestTimeout). This wait always results in the exception: 'The OUT message was not received within: 20000 millis on the exchange...' After reading the JmsProducer code  I changed the route to the following:from('activemq:queue:request'). to('generate_news'). to('activemq:topic:news?exchangePattern=InOnly'). to('do_something_else');This reveals the root of the bug  which is in the first few lines of method org.apache.camel.component.jms.JmsProducer.process(Exchange):// public void process(final Exchange exchange) { final org.apache.camel.Message in = exchange.getIn(); if (exchange.getPattern().isOutCapable()) {The above if statement checks the MEP of the original request's Exchange and not the new endpoint of the news topic. This makes the above '?exchangePattern=InOnly' configuration useless  because the original request MEP is InOut. The result is that after that 20 second time-out  the temporary queue for the original request has expired  so the whole request failed. Note that the next node 'do_something_else' is never reached due to the time-out exception.,1.6.0,1.6.1; 2.0-M2,0,1,247,1,16,2,1,0,0,0,1,0,5,9,components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithInOnlyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/ActiveMQPropagateHeadersTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteWithInOnlyAndMultipleAcksTest.java;,0,0
1463,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/03/17 09:27:47 +0100,2009/03/17 18:18:48 +0100,Claus Ibsen,2009/03/18 08:05:38 +0100,0.942951389,0.574189815,JMX instrumentation - will add DeadLetterChannel even if you have defined to use NoErrorHandler,See nabble:http://www.nabble.com/StreamCaching-in-Camel-1.6-td22305654s22882.htmlI will add an unit test that demonstrates this:org.apache.camel.processor.ChoiceNoErrorHandlerTestThe route should at all time not contain any error handler at all  regardless wether JMX is enabled or not.,1.6.0,1.6.1; 2.0-M2,0,0,32,1,5,1,1,0,0,0,0,0,2,13,camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/main/java/org/apache/camel/util/ProcessorDefinitionHelper.java;camel-core/src/main/java/org/apache/camel/util/ProcessorTypeHelper.java;camel-core/src/test/java/org/apache/camel/processor/ChoiceNoErrorHandlerTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java;camel-core/src/main/java/org/apache/camel/impl/DefaultErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationInterceptStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/test/java/org/apache/camel/issues/BelasThreadErrorHandlerIssue901Test.java;camel-core/src/test/java/org/apache/camel/processor/ChoiceNoErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/NoErrorHandlerTest.java;,0,0
1465,Improvement,Closed,Fixed,,Minor,Willem Jiang,2009/03/18 07:40:33 +0100,2009/03/18 07:40:33 +0100,Willem Jiang,2009/03/18 07:56:49 +0100,0.011296296,0.011296296,Added a Spring configuration in the camel-example-reportincident,We should provide the Spring configuration which equals to the Java DSL route rule in camel-example-reportincident  as some user prefer to use Spring.,2.0.0,2.0-M2,0,1,23,1,3,3,1,0,0,0,0,0,1,6,examples/camel-example-reportincident/src/main/java/org/apache/camel/example/reportincident/MyBean.java;examples/camel-example-reportincident/src/main/java/org/apache/camel/example/reportincident/ReportIncidentRoutes.java;examples/camel-example-reportincident/src/main/resources/META-INF/spring/camel-context.xml;examples/camel-example-reportincident/src/main/resources/camel-config.xml;examples/camel-example-reportincident/src/test/java/org/apache/camel/example/reportincident/ReportIncidentRoutesSpringTest.java;examples/camel-example-reportincident/src/test/java/org/apache/camel/example/reportincident/ReportIncidentRoutesTest.java;,0,0
1480,Bug,Closed,Fixed,camel-jms,Major,Claus Ibsen,2009/03/24 08:10:42 +0100,2009/03/24 08:10:42 +0100,Claus Ibsen,2009/03/24 09:33:46 +0100,0.057685185,0.057685185,JMS - Sending a message with jmsTemplate102=true fails,See nabble:http://www.nabble.com/Apache-Camel-2.0-M1-java.lang.ClassCastException%3A-org.apache.camel.component.jms.JmsConfiguration%24CamelJmsTeemplate102-td22665483s22882.htmlThe ClassCastException is because of the old JMS API is used.Camel should test whether the template is 1.1 or 1.0.2 and cast to correct type.,2.0-M1,2.0-M2,0,0,29,1,2,1,1,0,0,0,0,1,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestReply102Test.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTransferExceptionTest.java;,0,0
1492,Bug,Closed,Fixed,camel-jms,Major,Dejan Bosanac,2009/03/26 19:35:32 +0100,2009/03/27 08:03:46 +0100,Claus Ibsen,2009/03/27 10:28:56 +0100,0.620416667,0.100810185,Allow parementer append for jms bindings with no endpoint,See test failures in https://issues.apache.org/activemq/browse/AMQ-2182,2.0-M1,2.0-M2,0,0,8,1,4,2,1,0,0,0,0,0,2,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;,0,0
1497,Bug,Closed,Fixed,camel-jms,Major,Claus Ibsen,2009/03/28 11:37:52 +0100,2009/03/28 11:37:52 +0100,Claus Ibsen,2009/06/23 06:37:30 +0100,86.79141204,86.79141204,JmsPollingConsumer - receive does not work,The timeout values to set on Spring JmsTemplate is wrong. We should uses the provided constants on JmsTemplate for this /** * Timeout value indicating that a receive operation should * check if a message is immediately available without blocking. */ public static final long RECEIVE_TIMEOUT_NO_WAIT = -1; /** * Timeout value indicating a blocking receive without timeout. */ public static final long RECEIVE_TIMEOUT_INDEFINITE_WAIT = 0;Is the correct values. Looks like the values was reverted in the camel-jms code,1.6.0,1.6.1; 2.0-M2,0,0,96,1,4,2,1,0,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsPollingConsumer.java;,0,0
1502,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/03/30 15:51:16 +0100,2009/03/30 15:51:16 +0100,Claus Ibsen,2009/03/31 06:21:01 +0100,0.603993056,0.603993056,Bean component should propagate headers,When doing a route an you invoke a bean that sets a response on the OUT body it does not propagate the headers from the IN body.,1.6.0,1.6.1; 2.0-M2,0,0,27,1,2,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanPropagateHeaderTest.java;camel-core/src/test/java/org/apache/camel/processor/SetExchangePatternTest.java;,0,0
1503,Improvement,Closed,Fixed,camel-core; camel-jms,Major,Claus Ibsen,2009/03/31 07:37:16 +0100,2009/03/31 07:37:16 +0100,Claus Ibsen,2009/04/01 14:36:40 +0100,1.29125,1.29125,javax.xml.transform.Source and StreamSource wrapped should be easier to route with JMS,See SM-1826What end users need to do is to use .convertBodyTo(String.class) before sending to a JMS queue with Camel when the payload is XML based  eg the javax.xml.transform.Source class that can be wrapped in a StreamCache as well.It should be able to route out of the box by converting to byte[] in the JMS producer,1.6.0,2.0-M2,0,0,60,1,2,1,1,0,1,0,0,0,2,28,camel-core/src/main/java/org/apache/camel/StreamCache.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/BytesSource.java;camel-core/src/main/java/org/apache/camel/converter/stream/FileInputStreamCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/InputStreamCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/ReaderCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/SourceCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamSourceCache.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java;camel-core/src/test/java/org/apache/camel/util/MessageHelperTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsXMLRouteTest.java;camel-core/src/main/java/org/apache/camel/converter/IOConverter.java;camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/main/java/org/apache/camel/converter/stream/FileInputStreamCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/ReaderCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/SourceCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamSourceCache.java;camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java;camel-core/src/test/java/org/apache/camel/issues/CacheInputStreamInDeadLetterIssue520Test.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageType.java;components/camel-jms/src/test/data/message1.xml;components/camel-jms/src/test/data/message2.xml;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsXMLRouteTest.java;,0,0
1504,Bug,Closed,Fixed,camel-http,Minor,Mathis Schwuchow,2009/03/31 09:47:08 +0100,2009/04/02 17:09:28 +0100,Claus Ibsen,2009/04/02 17:16:23 +0100,2.311979167,0.004803241,HTTP_URI and HTTP_PATH message headers not concatenated when sending messages to http endpoint,When a message is sent to an http endpoint  the path specified in the HTTP_PATH header is ignored.In the HttpProducer.createMethod() of the camel-http component  the URI is taken from the HTTP_URI header or the endpoint  but the HTTP_PATH header is not concatenated. See also the discussion on the mailing list: http://www.nabble.com/Setting-a-path-in-message-header-with-Camel-http-2.0M1-td22781504.html,2.0-M1,2.0-M2,0,0,54,1,4,2,1,0,0,1,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetWithPathHeaderTest.java;,0,0
1505,Bug,Closed,Fixed,,Major,Willem Jiang,2009/03/31 10:57:55 +0100,2009/03/31 10:57:55 +0100,Willem Jiang,2009/04/01 05:48:27 +0100,0.785092593,0.785092593,deploy the CamelContext with velocity endpoint into the Servicemix 4.0 will get the  NoClassDefFoundError,&#91;trace&#93; ******************************************************************* &#91;debug&#93; Starting Apache Velocity v1.5 (compiled: 2007-02-22 08:52:29) &#91;trace&#93; RuntimeInstance initializing. &#91;debug&#93; Default Properties File: org/apache/velocity/runtime/defaults/velocity.properties &#91;debug&#93; Trying to use logger class org.apache.velocity.runtime.log.Log4JLogChute &#91;debug&#93; Couldn't find class org.apache.velocity.runtime.log.Log4JLogChute or necessary supporting classes in classpath.org/apache/log4j/Layoutjava.lang.NoClassDefFoundError: org/apache/log4j/Layout at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:164) at org.apache.velocity.util.ClassUtils.getClass(ClassUtils.java:76) at org.apache.velocity.util.ClassUtils.getNewInstance(ClassUtils.java:95) at org.apache.velocity.runtime.log.LogManager.createLogChute(LogManager.java:147)We can get around this issue by replacing the org.apache.velocity.runtime.log.Log4JLogChute withorg.apache.velocity.runtime.log.Log4JLogChute  and also need to update the Servicemix Velocity bundle to 1.6.,1.6.0; 2.0-M1,1.6.1; 2.0-M2,0,0,75,1,2,2,0,1,0,0,0,0,1,1,components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;,0,0
1506,Bug,Closed,Fixed,camel-mail,Minor,Ryan Gardner,2009/03/31 22:18:17 +0100,2009/04/01 10:09:44 +0100,Willem Jiang,2009/04/02 08:43:19 +0100,1.434050926,0.939988426,Recursively scan multipart nodes of an email for attachments - not just top level nodes,The current code will only scan the top level of a multipart message. This misses any attachments that are under another node.All unit tests still run for me after applying this patch.,2.0.0,2.0-M2,0,0,32,1,7,3,1,0,0,0,0,0,1,5,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailMessage.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailUtils.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeTest.java;,0,0
1507,Improvement,Closed,Fixed,camel-mail,Major,Ryan Gardner,2009/04/01 01:50:08 +0100,2009/04/01 10:11:03 +0100,Willem Jiang,2009/04/02 08:42:27 +0100,1.286331019,0.938472222,Allow sending multipart/alternative MIME messages with both a plain-text and text/html body  and allow sending images inline,To send a multipart/alternative email you have to follow a pretty specific course.This adds a property (which is poorly named in this patch) to the MailConfiguration that names the header that contains the plaintext version of the email  and adds a property where you can embed images inline. If an attachment has a filename starting with 'cid:' then this will add the 'Content-ID' header to that multipart body - which will allow the email client to put the image in the appropriate place when it is viewed. (i.e. the html email has something like &lt;image src='cid:0001' /&gt; and the attachment is named 'cid:0001' - when it sees an inline attachment with 'Content-ID: 0001' it will put it in the right spot),2.0-M1,1.6.1; 2.0-M2,0,0,121,1,8,3,1,0,1,0,0,0,5,14,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailMessage.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailUtils.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConstants.java;components/camel-web/src/main/java/org/apache/camel/web/resources/RouteResource.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConstants.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeTest.java;,0,0
1512,Improvement,Closed,Fixed,camel-http,Major,Claus Ibsen,2009/04/02 14:59:58 +0100,2009/04/02 14:59:58 +0100,Claus Ibsen,2009/04/02 15:32:14 +0100,0.022407407,0.022407407,http component - allow failed responses to be returned on the exchange instead of HttpOperationsFailedException,It can be a bit cumbersome to eg handled 404 error codes if it gets thrown back as an exception. Sometimes you want to handle any response from the http producer in the exchange itself.,1.6.0,2.0-M2,0,0,35,1,2,1,1,0,0,0,0,0,2,6,components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHandle404Test.java;components/camel-jetty/src/test/resources/log4j.properties;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettySimplifiedHandle404Test.java;,0,0
1530,Improvement,Closed,Fixed,camel-http,Major,Claus Ibsen,2009/04/14 14:03:26 +0100,2009/12/20 15:11:13 +0100,Christian M?ller,2010/02/23 13:48:50 +0100,314.9898611,64.94278935,Upgrade camel-http to use httpclient 4.0,Upgrading httpclient from 3.1 to 4.0 requires changes in the camel-http code as the API has change quite a lot.,2.0-M1,2.3.0,0,2,20,2,80,5,1,0,1,0,0,0,7,91,platforms/karaf/features/src/main/resources/features.xml;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpPollingConsumer.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/test/java/org/apache/camel/component/http/helper/GZIPHelperTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/helper/HttpProducerHelperTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/helper/LoadingByteArrayOutputStreamTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpConcurrentTest.java;apache-camel/pom.xml;apache-camel/src/main/descriptors/common-bin.xml;components/camel-gae/src/main/java/org/apache/camel/component/gae/http/GHttpComponent.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/http/GHttpEndpoint.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/task/GTaskComponent.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/task/GTaskEndpoint.java;components/camel-http/pom.xml;components/camel-http/src/main/java/org/apache/camel/component/http/BasicAuthenticationHttpClientConfigurer.java;components/camel-http/src/main/java/org/apache/camel/component/http/CompositeHttpConfigurer.java;components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpClientConfigurer.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEntityConverter.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpMethods.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpOperationFailedException.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpPollingConsumer.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/ProxyHttpClientConfigurer.java;components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/GZIPHelper.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/HttpProducerHelper.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/LoadingByteArrayOutputStream.java;components/camel-http/src/test/data/logo.jpeg;components/camel-http/src/test/java/org/apache/camel/component/http/BaseHttpTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/BaseHttpsTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpAuthenticationTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpBodyTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpBridgeEndpointTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpCamelHeadersTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpCharsetTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpCompressionTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetWithHeadersTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetWithPathHeaderTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetWithQueryParamsTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpInvalidConfigurationTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpInvalidHttpClientConfigurationTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpMethodsTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpPathTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpPollingConsumerTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpPostWithBodyTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpProducerSelectMethodTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpProxyServerTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpProxyTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpQueryGoogleTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpQueryTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpReferenceParameterTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpSOTimeoutTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpServerTestSupport.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpThrowExceptionOnFailureTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpWithHttpUriHeaderTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpsAuthenticationTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpsGetTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpsServerTestSupport.java;components/camel-http/src/test/java/org/apache/camel/component/http/handler/AuthenticationValidationHandler.java;components/camel-http/src/test/java/org/apache/camel/component/http/handler/BasicValidationHandler.java;components/camel-http/src/test/java/org/apache/camel/component/http/handler/DelayValidationHandler.java;components/camel-http/src/test/java/org/apache/camel/component/http/handler/HeaderValidationHandler.java;components/camel-http/src/test/java/org/apache/camel/component/http/handler/ProxyAuthenticationValidationHandler.java;components/camel-http/src/test/resources/localhost.ks;components/camel-jetty/pom.xml;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpGetTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyHttpClientOptionsTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/MultiThreadedHttpGetTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/SpringHttpsRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/jettyproducer/JettyHttpProducerAsyncTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/jettyproducer/JettyHttpProducerTest.java;components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java;components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletEndpoint.java;components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java;parent/pom.xml;tests/camel-itest/src/test/java/org/apache/camel/itest/http/HttpEndpointTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/http/HttpMaxConnectionPerHostTest.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/http/HttpEndpointTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/http/HttpMaxConnectionPerHostTest-context.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
1543,Improvement,Closed,Fixed,camel-jms,Major,Frank Schwarz,2009/04/19 16:27:14 +0100,2009/04/28 06:04:38 +0100,Claus Ibsen,2009/04/28 06:54:34 +0100,8.602314815,0.034675926,Apply removeHeader also to the underying JMS message delegate,In case of a JMS message  header information is redundantly stored in org.apache.camel.component.jms.JmsMessage (here Camel-Message) and in its javax.jms.Message jmsMessage delegate (here JMS-Message). Currently you cannot remove effectively any header from the Camel-Message instance as in the next processing step those removed headers resurrect from the underlying JMS-Message.Please provide any means to remove or or at least mask out those headers from the underlying JMS-Message.,2.0-M1,1.6.1; 2.0-M2,0,0,65,1,4,2,0,0,0,1,0,0,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRemoveHeaderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/discovery/JmsDiscoveryTest.java;,0,0
1548,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/04/20 13:14:54 +0100,2009/04/20 13:14:54 +0100,Claus Ibsen,2009/04/21 12:14:53 +0100,0.958321759,0.958321759,ErrorHandler to be wrapped at every node incl children,ErrorHandler to be wrapped at every node incl children,2.0-M1,2.0-M2,0,0,1,1,4,1,0,0,0,0,0,0,1,22,camel-core/src/main/java/org/apache/camel/impl/DefaultErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationErrorHandlerWrappingStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationInterceptStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/processor/HandleFaultProcessor.java;camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java;camel-core/src/test/java/org/apache/camel/issues/BelasThreadErrorHandlerIssue901Test.java;camel-core/src/test/java/org/apache/camel/processor/ErrorHandlerWrappedEachNodeTest.java;camel-core/src/test/java/org/apache/camel/processor/FaultRetryRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/FaultRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/RollbackTest.java;camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorExceptionHandleTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/InterceptAlterMessageBeforeRedeliveryTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/discovery/JmsDiscoveryTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/AbstractTransactionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/DelayerInterceptorTest.java;components/camel-spring/src/test/resources/log4j.properties;,0,0
1568,Bug,Closed,Fixed,camel-core,Major,christian ohr,2009/04/27 10:43:33 +0100,2009/04/28 05:38:23 +0100,Claus Ibsen,2009/04/28 06:00:15 +0100,0.803263889,0.015185185,Converting from stream/reader to string changes line breaks other than '/n',The IOConverter#toString(Reader/Stream) copies the input data line by line. A line is considered to be terminated by any one of a line feed ('/n')  a carriage return ('/r')  or a carriage return followed immediately by a linefeed. Unfortunately  the lines are always concatenated with '/n'  so that HL7 messages (which use '/r') become unusable after conversion.Also see http://www.nabble.com/HL7-messages-become-unusable-after-convertBodyTo%28String.class%29-td23219748.html,1.6.0; 2.0-M1,1.6.1; 2.0-M2,0,0,61,1,5,2,0,1,0,0,0,0,2,2,camel-core/src/main/java/org/apache/camel/converter/IOConverter.java;camel-core/src/main/java/org/apache/camel/converter/IOConverter.java;,0,0
1581,Bug,Closed,Fixed,,Major,Willem Jiang,2009/05/02 08:07:59 +0100,2009/05/02 08:07:59 +0100,Willem Jiang,2009/05/03 02:55:04 +0100,0.782696759,0.782696759,ClassCastException when using camel-cxf and camel-jms in the InOut same flow,As per thread on FUSE forum http://fusesource.com/forums/thread.jspa?threadID=834&amp;tstart=0:[[I have a camel route that listens on a CXFEndpoint (for MESSAGE data as DOMSource) and routes the message to a JMS queue. Something like:&lt;route&gt;&lt;from uri='cxf:bean:passportRequestWS?dataFormat=MESSAGE'/&gt;&lt;to uri='soapProcessor'/&gt;&lt;convertBodyTo type='java.lang.String'/&gt;&lt;to uri='activemq:queue:blah'/&gt;&lt;convertBodyTo type='javax.xml.transform.dom.DOMSource'/&gt;&lt;/route&gt;My understanding is that the JMS producer will realize that the exchange is InOut  create a temporary queue for the response  and then wait for the response to arrive on the temporary queue before sending the original CXFExchange on along the pipeline. Indeed  this is what I observe! However  I?ve discovered a little nasty.When the JMSProducer gets in the incoming message  it sets the Out message of the original CXFExchange to a JmsMessage. Then  the pipeline processor calls exchange.getOut on the CXFExchange and BANG! we get a class-cast exception. Turns out that the CXFExchange.getOut() method always casts the message to a CxfMessage. Ouch. Surely this means then that camel-cxf can?t talk to any producer that does not produce a CXFMessage - very limiting.]]The response on the form from davsclaus was:[[Well spotted.If just the damn Exchange was final so we had one implementation of it. But I guess we have to thank Java generics for that so the first API had generics for per component.Could you create a ticket in JIRA for this?As a workaround you can add a processor where you have full access to the Exchange so you can set a CxfMessage as the payload.]],1.5.0; 1.6.0,1.6.1,0,0,234,1,2,1,0,1,0,0,0,0,1,4,tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/CamelGreeterConsumerTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/JmsPrepareRequest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/JmsPrepareResponse.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/greeter/CamelGreeterConsumerTest-context.xml;,0,0
1585,Bug,Closed,Fixed,camel-ftp,Major,Darryl Smith,2009/05/05 20:52:33 +0100,2009/05/06 04:42:04 +0100,Willem Jiang,2009/05/06 07:59:34 +0100,0.463206019,0.137152778,SFTP GenericFileProducer.createFileName produces OS normalized file name  that doesn't work with SFTP,The use of File.separator and FileUtil.normalizePath in GenericFileProducer.createFileName produce a OS normalized file name  that doesn't work with SFTPe.g. outboundout_20090501_091940_ACC.txt which will not work produce a file called outboundout_20090501_091940_ACC.txtThe proper name should be outbound/out_20090501_091940_ACC.txt,2.0-M1,2.0-M2,0,1,36,1,8,2,0,0,0,0,0,0,2,16,camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;camel-core/src/main/java/org/apache/camel/builder/RouteBuilder.java;camel-core/src/main/java/org/apache/camel/model/InterceptFromDefinition.java;camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java;camel-core/src/main/java/org/apache/camel/model/RoutesDefinition.java;camel-core/src/main/java/org/apache/camel/processor/DefaultChannel.java;camel-core/src/main/java/org/apache/camel/processor/Pipeline.java;camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromUriRegexTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromUriWildcardTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringInterceptFromUriRegexTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringInterceptFromUriWildcardTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringInterceptFromUriRegexTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringInterceptFromUriWildcardTest.xml;,0,0
1586,Bug,Closed,Fixed,,Major,Willem Jiang,2009/05/06 04:47:30 +0100,2009/05/06 04:47:30 +0100,Willem Jiang,2009/05/06 08:00:26 +0100,0.133981481,0.133981481,camel-cxf producer loses the content-type,camel-cxf doesn't put the Protocol-Header into the camel message header  so we lost the content-type message.Here is the mail thread for the discussion.http://www.nabble.com/camel-cxf-content-type-response-header-tt23370337.html,1.6.0,1.6.1; 2.0-M2,0,0,26,1,2,2,0,0,0,0,0,0,1,2,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java;,0,0
1589,Improvement,Closed,Fixed,,Major,Willem Jiang,2009/05/07 08:42:42 +0100,2009/05/07 08:43:07 +0100,Willem Jiang,2009/05/07 09:02:17 +0100,0.013599537,0.013310185,Clean up  the CamelTransportConstants.CONTENT_TYPE,Here is the mail thread about it.http://www.nabble.com/Re%3A-svn-commit%3A-r772054---in--camel-trunk-components-camel-cxf-src%3A--main-java-org-apache-camel-component-cxf-CxfHeaderFilterStrategy.java--test-java-org-apache-camel-component-cxf-CxfRawMessageRouterTest.java-tt23412367.html,2.0-M1,2.0-M2,0,0,10,1,4,2,0,0,0,0,0,0,2,7,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportConstants.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfHeaderHelper.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportConstants.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfHeaderHelper.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfRawMessageRouterTest.java;,0,0
1614,Bug,Closed,Fixed,camel-jms,Major,Frank Schwarz,2009/05/14 08:11:59 +0100,2009/05/14 08:28:30 +0100,Claus Ibsen,2009/05/14 09:44:26 +0100,0.064201389,0.052731481,Warning 'Disabling JMSReplyTo as this Exchange is not OUT capable' on false positives in JBossAS5,see: http://www.nabble.com/Disabling-JMSReplyTo-as-this-Exchange-is-not-OUT-capable-td23524909s22882.html,1.6.0; 2.0-M1,1.6.2; 2.0-M2,0,0,5,1,2,1,0,1,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;,0,0
1650,Bug,Closed,Fixed,camel-core,Major,Oliver Hecker,2009/05/27 13:38:36 +0100,2009/06/07 10:38:51 +0100,Claus Ibsen,2009/06/07 12:23:29 +0100,10.94783565,0.072662037,Race condition in IdempotentConsumer,A possible possible race condition exists in the IdempotentConsumer implementation:The code first checks in the MessageIdRepository if the message was already processed. If not then it processes the message andafterwards adds the id to the repository. (See also http://issues.apache.org/activemq/browse/CAMEL-1451). There is no lockingbetween the check with 'contains' and the insert with 'add'. So if multiple threads/instances try this in parallel for the same id  thenit might happen that more than one finds the id not yet contained in the repository and the same message is processed multipletimes.I enclose an extended version of IdempotentConsumerTest which illustrates the problem.It is important to note that even if the test demonstrates the issue with an MemoryIdempotentRepository a solution should alsoaddress the case of a database based respository in a clustered environment. So this might imply that some locking mechanism on thedatabase is required.,2.0-M1,2.0-M2,0,1,142,1,13,3,0,0,1,0,0,0,2,21,camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentOnCompletion.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/MemoryIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/spi/IdempotentRepository.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerIdempotentRefTest.java;camel-core/src/test/java/org/apache/camel/management/MultiInstanceProcessorTest.java;camel-core/src/test/java/org/apache/camel/processor/IdempotentConsumerConcurrentTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerIdempotentRefTest.java;components/camel-jpa/src/main/java/org/apache/camel/processor/idempotent/jpa/JpaMessageIdRepository.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaIdempotentConsumerTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/model/IdempotentConsumerDefinition.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentOnCompletion.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/MemoryIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/spi/IdempotentRepository.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerIdempotentRefTest.java;camel-core/src/test/java/org/apache/camel/processor/IdempotentConsumerEagerTest.java;components/camel-jpa/src/main/java/org/apache/camel/processor/idempotent/jpa/JpaMessageIdRepository.java;,0,0
1681,Improvement,Closed,Fixed,,Major,Willem Jiang,2009/06/08 09:09:45 +0100,2009/06/08 09:09:45 +0100,Willem Jiang,2009/06/16 05:47:24 +0100,7.859479167,7.859479167,Clean up the CamelNamespaceHandler,Since we use the JAXB to parse the Routes definitions so we can get ride of the unnecessary bean parser registry code.,1.5.0; 1.6.0; 2.0-M1; 1.6.1,1.6.2; 2.0-M2,0,0,22,1,2,2,0,1,0,0,0,0,1,2,components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelNamespaceHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;,0,0
1687,Improvement,Closed,Fixed,camel-http,Minor,S. Ali Tokmen,2009/06/09 09:26:21 +0100,2009/06/09 09:42:10 +0100,Claus Ibsen,2009/06/09 09:55:25 +0100,0.020185185,0.009201389,CAMEL-HTTP should copy system proxy settings,By standard  Java uses some properties for configuring proxies. Details are on http://java.sun.com/javase/6/docs/technotes/guides/net/proxies.html but in short the properties http.proxyHost and http.proxyPort are used for setting a global HTTP proxy.CAMEL-HTTP doesn't reuse this. I guess many would expect it to.,2.0-M1,2.0-M2,0,0,42,1,4,2,0,0,0,0,0,0,2,4,components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpProxyTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpProxyTest.java;,0,0
1688,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/06/09 09:30:44 +0100,2009/06/09 09:30:44 +0100,Claus Ibsen,2009/06/09 09:32:20 +0100,0.001111111,0.001111111,Enrich DSL - Add fluent builder for using default aggregation strategy,The fluent builder is missing the enrich(uri) method that uses the default agg strategy. That is to copy the result from the resource as input.This is also very useable.In Spring DSL this is already possible as you do not have to provide the strategyRef attribute.,2.0-M1,2.0-M2,0,0,45,1,2,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/test/java/org/apache/camel/processor/enricher/EnricherDefaultAggregationStrategyTest.java;,0,0
1689,Bug,Closed,Fixed,camel-jms,Major,Siegfried Wirth,2009/06/09 16:49:40 +0100,2009/06/29 07:34:03 +0100,Claus Ibsen,2009/07/01 13:46:55 +0100,21.87309028,2.258935185,JMS-Headers are ignored in Producer,Camel jms producer ignores some JMSHeaders. For example the header JMSPriority is ignored - due to the comment in the code  because it is set by the producer. But it should not only be set by the produer due to the received message  it should also be possible to set a priority using the JMSPriority header on the consumer. (See also the option preserveMessageQos on the jms endpoint - if every JMSHeader is ignored by the producer it is impossible to set Qos-Properties on the message.)The reason for the bug is in org.apache.camel.component.jms.JmsBinding#appendJmsProperty. The follwoing JMS message headers are useful for sending messages and therefore should be copied to the jms message: JMSDestination JMSDeliveryMode JMSExpiration JMSPriority JMSMessageID JMSTimestamp,2.0-M1,2.0-M3,0,1,120,1,13,2,0,0,0,0,0,0,2,9,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsProducerWithJMSHeaderTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConstants.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsProducerWithJMSHeaderTest.java;,0,0
1697,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/06/11 10:56:27 +0100,2009/06/11 10:56:27 +0100,Claus Ibsen,2009/06/12 10:00:51 +0100,0.961388889,0.961388889,Java DSL for multicast  split  aggregate does not use block explicit,When using one of the EIP that uses a nested route for sub processing  typically EIPs that does some sort of aggregation such as multicast (for aggregating a response) split aggregateAnd maybe a few othersThey should use pushBlock so the end() DSL to indicate end of sub route works correctly in Java DSL.,2.0-M1,2.0-M2,0,0,55,1,5,1,0,0,0,0,0,0,1,12,camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/model/ChoiceDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/TryDefinition.java;camel-core/src/test/java/org/apache/camel/processor/ChoiceWithEndTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitShouldSkipFilteredExchanges.java;camel-core/src/test/java/org/apache/camel/processor/SplitWithEndTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitWithNestedFilterShouldSkipFilteredExchanges.java;camel-core/src/test/java/org/apache/camel/processor/TryProcessorTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromWhenWithChoiceTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringComplexBlockWithEndTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringComplexBlockWithEndTest.xml;,0,0
1706,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/06/14 07:12:09 +0100,2009/06/14 07:12:09 +0100,Claus Ibsen,2009/06/15 05:56:16 +0100,0.947303241,0.947303241,DefaultErrorHandler - add support for redelivery,The new default error handler does currently not support redelivery. The error handling codebase has stabilized and we should allow this error handler to leverage the redelivery features we have in DeadLetterChannel.,2.0-M1; 2.0-M2,2.0-M3,0,0,32,1,2,1,0,0,0,1,0,0,3,40,camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/DefaultErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentOnCompletion.java;camel-core/src/test/java/org/apache/camel/builder/ContextErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderTest.java;camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderWithRetryLoggingLevelSetTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoSelectMethodTest.java;camel-core/src/test/java/org/apache/camel/component/bean/DefaultParameterMappingStrategyTest.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelUseOriginalInBodyTest.java;camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerRedeliveryTest.java;camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/CustomExceptionPolicyStrategyTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/ErrorOccuredInOnExceptionRoute.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionProcessorInspectCausedExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionProcessorInspectCausedExceptionWithDefaultErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRetryUntilWithDefaultErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRouteWithDefaultErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionSubRouteWithDefaultErrorHandlerTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsUseOriginalBodyTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpLineDelimiterUsingPlainSocketTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaTcpWithIoOutProcessorExceptionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringDefaultErrorHandlerNotHandledPolicyTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringDefaultErrorHandlerNotHandledPolicyTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/onExceptionSubRouteWithDefaultErrorHandlerTest.xml;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;camel-core/src/test/java/org/apache/camel/processor/onexception/ErrorOccuredInOnExceptionRoute.java;camel-core/src/test/java/org/apache/camel/processor/onexception/MyOwnHandlerBean.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRouteWithDefaultErrorHandlerTest.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/DefaultErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelRedeliveryTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java;,0,0
1716,Bug,Closed,Fixed,camel-core,Major,Oliver Hecker,2009/06/15 22:18:43 +0100,2009/06/16 05:54:44 +0100,Claus Ibsen,2009/06/16 06:04:54 +0100,0.323738426,0.007060185,Simple language support for AND / OR to concat multiple expressions fails if string constants are enclosed in single quotation marks,The current implementation for CAMEL-1637 fails if the string constants in the two expressions are enclosed in single quotation marks as given in the following example ${in.header.foo} == 'abc' and ${in.header.bar} == '123'This is due to an issue with the GROUP_PATTERN regular expression in SimpleLanguageSupport.java. The matching pattern in between the single quotes is greedy and thus does not match correctly.,2.0.0,2.0-M3,0,0,82,1,3,2,1,0,0,0,0,1,1,3,camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguageSupport.java;camel-core/src/test/java/org/apache/camel/language/SimpleOperatorTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;,0,0
1717,Improvement,Closed,Fixed,camel-core,Major,Christian Schneider,2009/06/16 07:21:02 +0100,2009/06/16 17:13:10 +0100,Claus Ibsen,2009/06/16 17:29:31 +0100,0.42255787,0.011354167,Remove cycle between model and util,Currently util and model reference each other what makes them difficult to understand separately. When you look closely at the references you see that model only needs one class ProcessorDefinitionHelper. As this class only needs other classes from model I think it should belong to model. As this class is only needed from model I think it does not need to be public. So it is also clear that the class does not belong to the camel model classes users should access.,2.0-M2,2.0-M3,0,0,82,1,3,2,1,0,0,0,0,0,2,9,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RoutingSlipDefinition.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipDataModificationTest.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipIgnoreInvalidEndpointsTest.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java;camel-core/src/main/java/org/apache/camel/model/TryDefinition.java;camel-core/src/main/java/org/apache/camel/util/ProcessorDefinitionHelper.java;,0,0
1719,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/06/16 12:47:15 +0100,2009/06/16 12:47:15 +0100,Claus Ibsen,2009/06/16 14:24:57 +0100,0.067847222,0.067847222,bean component should thrown NoTypeConverterException when bean parameter binding cannot convert to method signature type,See nabble:http://www.nabble.com/Error-not-raised-by-Camel-if-the-%40Header-type-define-in-a-bean-is-not--correct-td24051086s22882.html,2.0-M2,2.0-M3,0,0,5,1,2,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithHeadersAndBodyInject2Test.java;,0,0
1725,Improvement,Closed,Fixed,osgi,Major,Claus Ibsen,2009/06/17 14:04:41 +0100,2009/06/17 14:04:41 +0100,Claus Ibsen,2009/06/17 14:55:34 +0100,0.035335648,0.035335648,Better logging at startup if Camel uses camel-osgi or not,We should at least once at INFO level log whether OSGi was detected or not.And in the camel-osgi we should have more DEBUG / TRACE logging as well.,1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,28,1,2,1,1,1,0,0,0,0,2,15,camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/WebSpherePacakageScanClassResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiAnnotationTypeConverterLoader.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiPackageScanClassResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/Activator.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelContextFactory.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelNamespaceHandler.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiAnnotationTypeConverterLoader.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiComponentResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinderResolver.java;components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiPackageScanClassResolver.java;components/camel-osgi/src/main/resources/META-INF/spring.schemas;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;,0,0
1735,Bug,Closed,Fixed,examples,Minor,Claus Ibsen,2009/06/22 09:35:30 +0100,,Unassigned,2009/06/24 06:29:54 +0100,1.871111111,,camel-example-etl - bug in sample about type converter,camel-example-etl - bug in sample about type converter,2.0-M2,2.0-M3,0,0,1,0,4,1,1,0,0,0,0,0,3,8,components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaEndpoint.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaProducer.java;examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/EtlRoutes.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConstants.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaEndpoint.java;components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java;examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/CustomerTransformer.java;,0,0
1736,Bug,Closed,Fixed,camel-cxf,Major,Willem Jiang,2009/06/22 10:17:10 +0100,2009/06/22 10:17:10 +0100,Willem Jiang,2009/06/23 07:55:23 +0100,0.901539352,0.901539352,camel-cxf defaultHeaderFilterStrategy doesn't filter the Camel releates headers,Here is the mailing thread&#91;1&#93; which discuss this issue.&#91;1&#93; http://www.nabble.com/-camel-cxf--Stripping-headers-td24143323.html,1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,15,1,5,3,1,1,0,0,0,0,1,2,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerProtocalHeaderTest.java;,0,0
1744,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/06/23 09:32:52 +0100,2009/06/23 09:32:52 +0100,Claus Ibsen,2009/06/23 16:51:28 +0100,0.304583333,0.304583333,ScheduledPollConsumer - Should not throw polled exception on stop,See CAMEL-501And nabble:http://www.nabble.com/Bug-in-ScheduledPollingConsumer--td24151070s22882.htmlIf an exception occured during a poll Camel will handle it by a ExceptionHandler you can set on the DefaultConsumer. The default impl will log it at WARN level.But the ScheduledPollingConsumer will remember this and when it does a doStop in case of shutdown or the likes it will throw the first exception occurred during a poll.This will indicate in an ERROR when doing a shtudown and its not really related as the poll error could have happened like 3 months ago.We should not do this. But only handle the poll exception when it occurred. End users can configure their own ExceptionHandler if they want to do something differently than logging.,2.0-M2,2.0-M3,0,0,122,1,2,1,1,0,0,0,0,0,1,7,camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/processor/validation/DefaultValidationErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java;camel-core/src/main/java/org/apache/camel/processor/validation/ValidatorErrorHandler.java;camel-core/src/test/java/org/apache/camel/impl/MockScheduledPollConsumer.java;camel-core/src/test/java/org/apache/camel/impl/ScheduledPollConsumerTest.java;,0,0
1745,Improvement,Closed,Fixed,camel-core,Minor,Roman Kalukiewicz,2009/06/23 10:06:27 +0100,2009/06/23 10:06:27 +0100,Roman Kalukiewicz,2009/06/23 10:24:12 +0100,0.012326389,0.012326389,Validator component to use SaxSource internally,ValidatingProcessor uses DOMSource internally while SaxSource could perform better.,2.0-M2,2.0-M3,0,0,9,1,2,2,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/processor/validation/DefaultValidationErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java;camel-core/src/main/java/org/apache/camel/processor/validation/ValidatorErrorHandler.java;,0,0
1752,Bug,Closed,Fixed,camel-spring,Major,Willem Jiang,2009/06/24 02:38:56 +0100,2009/06/24 02:38:56 +0100,Willem Jiang,2009/06/24 11:27:05 +0100,0.366770833,0.366770833,SpringCamelContext will get into endless loop of calling start method if the route service calling the ApplicationContext refresh method in it's initial method,Here is the mail thread which discusses this issue.http://www.nabble.com/StackOverFlow-error-with-Camel-1.6.1-tp24172060p24172060.html,2.0-M1; 1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,12,1,2,2,0,1,0,0,1,0,1,1,components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java;,0,0
1755,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/06/24 12:14:47 +0100,2009/06/24 12:14:47 +0100,Claus Ibsen,2009/06/24 12:31:53 +0100,0.011875,0.011875,Failover load balancer - should prepare exchange before failover,When the failover load balancer does a fail over it only clears the exception.When you use dead letter channel or default error handler with redeliveries enabled they will have such information.This should also be cleared before failover. So we have a clean and fresh start.,2.0-M2,2.0-M3,0,0,45,1,2,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/loadbalancer/FailOverLoadBalancer.java;camel-core/src/test/java/org/apache/camel/processor/FailOverLoadBalanceWithRedeliveryTest.java;,0,0
1760,Bug,Closed,Fixed,camel-jetty,Major,Andres,2009/06/25 13:45:14 +0100,2009/06/25 14:59:16 +0100,Willem Jiang,2009/06/25 17:07:38 +0100,0.140555556,0.089143519,Unable to read post params from request,If consuming messsages from jetty endpoint there is no way to read post parameters from HttpServletRequest. In example getting HttpServletRequest from body :HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class);req.getParameterMap() returns allways empty mapThe problem is that jetty Request.extractParameters() method is trying to read post parameters from Request.getInputStream(). But unfortunately someone strips the input stream before and req.getInputStream() returns allways 0 bytesThe workaround for me is to extend DefaultHttpBinding as described in: http://camel.apache.org/jetty.htmlMyHttpBinding .javapublic class MyHttpBinding extends DefaultHttpBinding { public void readRequest(HttpServletRequest request  HttpMessage message) { request.getParameterMap(); super.readRequest(request message); }}calling request.getParameterMap() will cache parameters inside jetty Request and it's possible to query params later  without having inputStream,1.6.0,1.6.2; 2.0-M3,0,0,122,1,2,2,1,0,0,0,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpRouteTest.java;,0,0
1764,Bug,Closed,Fixed,,Major,Hadrian Zbarcea,2009/06/27 17:49:08 +0100,2009/06/27 17:49:08 +0100,Hadrian Zbarcea,2009/06/27 18:08:39 +0100,0.013553241,0.013553241,Camel builds should not use platform specific encoding,The builds on my Mac use the platform specific encoding thus leading to the following warngin:[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources  i.e. build is platform dependent!We should use the &lt;project.build.sourceEncoding&gt; property to specify a project specific encoding (UTF-8).,1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,49,1,2,2,1,1,0,0,0,0,0,0,,0,0
1765,Bug,Closed,Fixed,examples,Blocker,David Jencks,2009/06/27 19:04:46 +0100,2009/06/28 20:29:45 +0100,Hadrian Zbarcea,2009/07/03 08:05:44 +0100,5.542337963,4.483321759,License for One-JAR classes not included in camel-example-spring one-jar artifact. Also apache legal files missing,The license for the com/simontuffs/onejar files is at http://one-jar.sourceforge.net/index.php?page=documents&amp;file=license.When I build camel-example-spring neither this license nor the apache license nor apache notice file is in the one-jar.jar artifact.I'd suggest disabling the one-jar plugin until someone can figure out how to include these files.,2.0.0,2.0-M3,0,0,46,1,4,2,1,0,0,1,0,0,1,1,examples/camel-example-spring/pom.xml;,0,0
1766,Improvement,Closed,Fixed,bean-integration,Blocker,David Jencks,2009/06/27 19:09:41 +0100,2009/08/01 18:46:37 +0100,Hadrian Zbarcea,2009/08/08 06:56:07 +0100,41.4905787,6.506597222,Upgrade maven build to use apache 6 pom and related features.,Geronimo recently has had some problems due to unversioned snapshots of camel. Since nexus automatically cleans up old snapshots it's preferred to use unique timestamped snapshots when publishing to apache nexus.There are some other nice standard featrues of the apache 6 pom and related work such as automatic source archive creation. I'm attaching a patch that updates to apache 6 pom and cleans up a few other things.Since the build fails for me before the changes I can't be very sure that these changes break nothing.,2.0.0,2.0.0,0,0,86,1,8,2,1,0,0,0,0,0,0,0,,0,0
1778,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/07/01 09:54:30 +0100,2009/07/01 09:54:30 +0100,Claus Ibsen,2009/07/01 10:20:13 +0100,0.017858796,0.017858796,camel-file - consumer  starting directory should validate that its configured properly eg not containing dynamic expressions etc,You cannot use ${ } in the start path of file/ftp consumers. Use the fileName option for that. We should validate and thrown an exception about this so end users notices this immediately and can fix it.,2.0-M2,2.0-M3,0,0,37,1,2,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java;camel-core/src/test/java/org/apache/camel/component/file/FileInvalidStartingPathTest.java;,0,0
1783,Improvement,Closed,Fixed,camel-jms,Major,Claus Ibsen,2009/07/02 06:16:48 +0100,2009/07/02 06:16:48 +0100,Claus Ibsen,2009/07/02 12:00:37 +0100,0.238761574,0.238761574,camel-jms - allow a header like JMSDestination to override the destination to send to,We cannot use JMSDestination as it would not work when you do a route from(jms A) to (jms B) as it will go into round about as when received from jms A the header will contain JMSDestination = queue:A and thus Camel will send it back to itself.So we should a different nameCamelJmsDestination,1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,53,1,5,1,1,1,0,0,1,0,3,18,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsHeaderFilterStrategy.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsProducerWithJMSHeaderTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConstants.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsProducerWithJMSHeaderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestLateReplyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestReply102Test.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestReplyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsCustomJMSReplyToIssueTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsSendToAlotOfDestinationWithSameEndpointTest.java;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/broker.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/camelBrokerClient.xml;components/camel-jms/pom.xml;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsSendToAlotOfDestinationWithSameEndpointTest.java;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/broker.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/camelBrokerClient.xml;,0,0
1786,Bug,Closed,Fixed,,Minor,Stan Lewis,2009/07/02 18:54:04 +0100,2009/07/02 19:23:40 +0100,Jonathan Anstey,2009/07/02 19:23:40 +0100,0.020555556,0,camel-irc parsing of channel name and parameters is incorrect,If you try and pass some parameters to camel-irc it turns out that camel joins a different IRC channel than expected  for example a URI like:irc://camel-con@irc.codehaus.org:6667/#camel-test?nickname=camel-concauses camel to join #camel-test?nickname=camel-con and not #camel-test with a nickname of camel-con. Will attach a patch that addresses this and updates the unit test.,1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,53,1,5,3,1,1,0,0,0,0,1,2,components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConfiguration.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcRouteTest.java;,0,0
1793,Bug,Closed,Fixed,tests,Major,Jonathan Anstey,2009/07/03 14:12:10 +0100,2009/07/03 14:12:10 +0100,Jonathan Anstey,2009/07/03 14:34:10 +0100,0.015277778,0.015277778,CustomerServicesWsAddressingTest hangs sometimes,Sometimes I get the following error&#91;23:59:55&#93;: Running org.apache.camel.itest.customerrelations.CustomerServicesWsAddressingTest&#91;00:00:06&#93;: Exception in thread 'DefaultMessageListenerContainer-4' java.lang.NullPointerException&#91;00:00:06&#93;: at java.lang.String.indexOf(String.java:1564)&#91;00:00:06&#93;: at java.lang.String.indexOf(String.java:1546)&#91;00:00:06&#93;: at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)&#91;00:00:06&#93;: at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)&#91;00:00:06&#93;: at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)&#91;00:00:06&#93;: at java.lang.Thread.run(Thread.java:595)... which then causes a hang. Its a known issue in spring-jms 2.5.6 (http://jira.springframework.org/browse/SPR-5470). Happens when we try to do a shutdown of the context. Reverting back to 2.5.5 fixes this issue  but we probably don't want to do that,1.6.1,1.6.2; 2.0-M3,0,0,83,1,3,2,1,0,0,1,1,1,1,3,tests/camel-itest/src/test/resources/spring-config/jms-applicationContext.xml;tests/camel-itest/src/test/resources/spring-config/server-WsAddressingContext.xml;tests/camel-itest/src/test/resources/spring-config/server-applicationContext.xml;,0,0
1795,Bug,Closed,Fixed,camel-jms,Critical,Claus Ibsen,2009/07/03 15:54:34 +0100,2009/07/03 15:54:34 +0100,Claus Ibsen,2009/07/03 16:13:45 +0100,0.013321759,0.013321759,camel-jms - wrong defaults causes message listener to use new thread when receiving a message,JmsConfiguratiuon have a bad defaultmaxMessagesPerTask=1It should be -1 as we do not want to strict the DefaultMessageListenerContainer to only handle 1 message per thread.,1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,24,1,3,1,0,1,0,0,1,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;,0,0
1800,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/07/06 06:02:15 +0100,2009/09/21 07:53:40 +0100,Claus Ibsen,2009/09/21 12:53:21 +0100,77.28548611,0.208113426,EventDrivenConsumer - Wait starting them until all other processors / routes have been started,We should wait starting the input to the CamelContext until all child processors and other services have been started.Then at the end we should open the gates by starting all the input consumers.That should also help unit testing on slower boxes where these consumers might start a bit early and the remaining work starting the other processors is slow and thus the consumer is too fast.,2.0-M2,2.1.0,0,0,66,1,4,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelHandledPolicyTest.java;,0,0
1801,Improvement,Closed,Fixed,camel-ftp,Minor,Claus Ibsen,2009/07/06 06:06:22 +0100,2009/07/06 15:17:56 +0100,Claus Ibsen,2009/07/06 15:17:56 +0100,0.383032407,0,FTP component - add option to specify retry login attempts,When ftp component attempts login it does that once. We should add option to configure how many attempts should be done before giving up.For instance try 3 times with 1 sec apart.,2.0-M2,2.0-M3,0,0,32,1,2,1,1,0,0,0,0,0,2,7,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtoReconnectAttemptServerStoppedTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpReconnectAttemptUnknownHostTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtoReconnectAttemptServerStoppedTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpReconnectAttemptServerStoppedTest.java;,0,0
1808,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/07/07 15:42:04 +0100,2009/07/07 15:42:04 +0100,Claus Ibsen,2009/07/07 15:59:10 +0100,0.011875,0.011875,file component - markerFile read lock - do not use nio FileLock,In some situations in OSGi platforms the file lock can be kept and then you need to shutdown the JVM to clear the JDK FileLock.So better to not use them as we can just create the file and Camel will still back off reading the file as it can see the lock file exists.,2.0-M2,2.0-M3,0,0,54,1,3,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java;,0,0
1822,Improvement,Closed,Fixed,,Major,Hadrian Zbarcea,2009/07/10 15:42:15 +0100,2009/07/10 15:42:15 +0100,Hadrian Zbarcea,2009/08/01 18:39:57 +0100,22.12340278,22.12340278,Cleanup unnecessary copy related methods in Exchange,There are currently 4 apis related to copying exchanges that overlap for the most part  are confusing and unnecessary. The consensus is to replace: Exchange newInstance(); Exchange copy(); Exchange newCopy(boolean handoverOnCompletion); void copyFrom(Exchange source);with: Exchange copy(); Exchange copy(boolean handoverOnCompletion);newInstance() does not bring much value copyFrom() is semantically equivalent to copy()newCopy() will be just renamed to copy(boolean) See nabble thread:http://www.nabble.com/-DISCUSS--Exchange-copy-api-cleanup-td24400340.html,2.0-M2,2.0.0,0,0,61,1,3,1,1,0,0,0,0,0,0,0,,0,0
1828,Bug,Closed,Fixed,camel-jaxb,Major,Willem Jiang,2009/07/13 12:20:38 +0100,2009/07/13 12:20:38 +0100,Willem Jiang,2009/07/16 11:02:14 +0100,2.945555556,2.945555556,jaxb prettyPrint does not work,Here is the mail thread with discuss about it. http://www.nabble.com/JAXB-pretty-print-marshaling-td24449564.html,1.4.0; 1.5.0; 1.6.0; 2.0-M1; 1.6.1; 2.0-M2,1.6.2; 2.0-M3,0,0,13,1,2,2,1,1,0,0,0,0,1,2,components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java;components/camel-jaxb/src/test/java/org/apache/camel/example/DataFormatTest.java;,0,0
1838,Bug,Closed,Fixed,camel-ftp,Major,Claus Ibsen,2009/07/17 06:10:29 +0100,2009/07/17 06:10:29 +0100,Claus Ibsen,2009/07/18 06:56:14 +0100,1.031770833,1.031770833,camel-ftp - Recover from lost connection issue,See nabblehttp://www.nabble.com/FTP-Component-Network-Failure-Recovery-Problem-td24517828.html,2.0-M2,2.0-M3,0,0,5,1,2,1,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/impl/DefaultPollingConsumerPollStrategy.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFilePollingConsumerPollStrategy.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimulateNetworkIssueRecoverTest.java;,0,0
1839,Bug,Closed,Fixed,camel-web,Minor,Xueqiang Mi,2009/07/19 04:22:18 +0100,2009/07/19 04:22:18 +0100,Claus Ibsen,2009/07/19 04:34:02 +0100,0.008148148,0.008148148,camel-web can't process the endpoint with '://' schema  like /endpoints/mock://results,After improving the endpoint URI schema on http://issues.apache.org/activemq/browse/CAMEL-1756  camel-web's endpoint request URL is changed from http://localhost:8080/endpoints/mock:results into http://localhost:8080/endpoints/mock://results while '//' is a separator for URL  so camel-web will use only the 'mock:' to get the expected endpoint  which will throw an exception:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: mock: due to: Expected scheme-specific part at index 5: mock: at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:367) at org.apache.camel.web.resources.EndpointsResource.getEndpoint(EndpointsResource.java:75) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.invokeSubLocator(SubLocatorRule.java:135) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:89) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:105) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:71) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111) at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:63) at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:654) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:612) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:603) at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:309) at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:425) at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:737) at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:689) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:119) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:55) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)Caused by: java.net.URISyntaxException: Expected scheme-specific part at index 5: mock: at java.net.URI$Parser.fail(URI.java:2816) at java.net.URI$Parser.failExpecting(URI.java:2822) at java.net.URI$Parser.parse(URI.java:3025) at java.net.URI.&lt;init&gt;(URI.java:578) at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:354) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:365) ... 39 more,2.0-M2,2.0-M3,0,0,170,1,5,2,0,0,0,0,0,1,1,2,components/camel-web/pom.xml;components/camel-web/src/main/java/org/apache/camel/web/model/EndpointLink.java;,1,1
1849,Bug,Closed,Fixed,camel-core; camel-http,Major,Dave Stanley,2009/07/23 19:26:52 +0100,2009/07/26 11:53:16 +0100,Claus Ibsen,2009/07/26 13:34:51 +0100,2.755543981,0.070543981,CachedOutputStream not cleaning up tmp files when using file based caching,A recent feature of Camel's CachedOutputStream is to serialize any messages over 64k to disk. In some cases the *tmp message files are not being cleaned up.,1.6.1,1.6.2; 2.0.0,0,0,28,1,19,5,1,0,0,0,0,0,3,15,camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/main/java/org/apache/camel/util/IOHelper.java;camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java;camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/main/java/org/apache/camel/converter/stream/FileInputStreamCache.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamCacheConverter.java;camel-core/src/main/java/org/apache/camel/converter/stream/StreamSourceCache.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java;camel-core/src/test/java/org/apache/camel/converter/stream/StreamCacheConverterTest.java;camel-core/src/test/java/org/apache/camel/issues/CacheInputStreamInDeadLetterIssue520Test.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpStreamCacheFileTest.java;,0,0
1851,Bug,Closed,Fixed,camel-core,Major,Mark White,2009/07/24 09:20:08 +0100,2009/07/26 13:39:30 +0100,Claus Ibsen,2009/07/26 14:25:58 +0100,2.212384259,0.032268519,Route JMX attributes not being updated,Some routes are not getting instrumented using JMX and we get the following WARN for those on startup;InstrumentationLifecycleStrategy: Route has not been instrumented for endpoint: ...It turns out that its only those routes that have an onException handler as the first processor in the route  e.g.&lt;route id='per-msg-route' errorHandlerRef='RouteErrorHandler'&gt; &lt;from uri='jms:MSG_IN'/&gt; &lt;onException&gt; &lt;exception&gt;can.retry.Exception&lt;/exception&gt; &lt;redeliveryPolicy ref='UnlimitedRedeliveryPolicyConfig'/&gt; &lt;handled&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;/handled&gt; &lt;/onException&gt; &lt;bean ref='Formatter' method='formatInput'/&gt;...8&lt;... More info and proposed fix at http://www.nabble.com/Routes-JMX-attributes-not-updated-in-2.0-M2-td24631265.html#a24639433,2.0-M2; 2.0-M3,2.0.0,0,0,69,1,2,2,1,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteWithOnExceptionTest.java;,0,0
1858,Improvement,Closed,Fixed,camel-jms,Minor,Stan Lewis,2009/07/27 19:51:43 +0100,2009/07/28 05:07:51 +0100,Claus Ibsen,2009/07/28 05:43:39 +0100,0.411064815,0.024861111,Provide a flag to avoid mapping a JMS message to it's actual type,CAMEL-1853 adds the ability to use a custom Spring MessageConverter to map an incoming (or outgoing) JMS Message  and also makes it easier to do a pass through route where Camel does not try and deserialize a serialized object message. This improvement is to add a simple flag that achieves a similar effect but without having to supply a MessageConverter implementation.,1.6.1; 2.0-M3,1.6.2; 2.0.0,0,0,77,1,6,2,1,1,0,0,0,0,1,3,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/MapJmsMessageTest.java;,0,0
1862,Bug,Closed,Fixed,camel-cxf,Major,S. Ali Tokmen,2009/07/29 11:01:17 +0100,2009/07/29 12:26:43 +0100,Willem Jiang,2009/07/30 14:10:01 +0100,1.131064815,1.071736111,camel-cxf bundle doesn't specify any Import-Package version,The camel-cxf component is currently generated against CXF version 2.2.2.As a result  the camel-cxf module as well as the camel-cxf bundle require CXF 2.2. More importantly  that bundle does not work correctly with CXF 2.0 (note that this is an expected behavior  CXF has had API changes with its 2.2 version).Now  the trouble is that the camel-cxf JAR's MANIFEST has an Import-Package on org.apache.cxf.* components without specifying any version! As a result  when it looks for CXF and both CXF 2.0 and 2.2 are present on the platform  it sometimes chooses the wrong one.To solve this issue  version specifiers should be added to the Import-Package declarations of the camel-cxf bundle. I guess an import on version 2.2 would be enough (we don't need to specify 2.2.2 explicitely).CheersS. Ali Tokmenhttp://ali.tokmen.com/,2.0-M3,1.6.2; 2.0.0,0,0,132,1,9,3,1,0,0,0,0,0,1,1,components/camel-cxf/pom.xml;,0,0
1865,Bug,Closed,Fixed,camel-core,Major,Mark White,2009/07/30 12:40:27 +0100,2009/07/30 16:32:43 +0100,Claus Ibsen,2009/07/30 16:32:43 +0100,0.161296296,0,NPE thrown when DEBUG logging on,Stack trace;org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: doSplit on MySplitter due to: java.lang.NullPointerException at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:82) at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:87) at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)...Caused by: java.lang.NullPointerException at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:129) at org.apache.camel.impl.DefaultMessage.toString(DefaultMessage.java:38) at java.lang.String.valueOf(String.java:2827) at java.lang.StringBuilder.append(StringBuilder.java:115) at java.util.AbstractCollection.toString(AbstractCollection.java:422) at java.lang.String.valueOf(String.java:2827) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:139)Steps to reproduce;1. Create simple route with splitter pattern; e.g.&lt;route&gt; &lt;from uri='jms:IN_QUEUE'/&gt; &lt;split&gt;&lt;method bean='MySplitter' method='doSplit'/&gt; &lt;to uri='log:route.log'/&gt; &lt;/split&gt;&lt;/route&gt;2. Set DEBUG logging on for org.apache.camel classes  e.g.log4j.logger.org.apache.camel=DEBUG3. Fire message into route - message fails with NPE inside Camel,2.0-M3,2.0.0,0,0,72,1,5,2,1,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/util/MessageHelper.java;camel-core/src/test/java/org/apache/camel/issues/SplitterUsingBeanReturningMessageTest.java;,0,0
1867,Bug,Closed,Fixed,camel-jms,Major,Mark White,2009/07/30 16:11:50 +0100,2009/08/04 08:54:42 +0100,Claus Ibsen,2009/08/05 12:30:29 +0100,5.846284722,1.149849537,JmsKeyFormatStrategy not used consistently and JmsMessage.getHeader() not returning correct value,On entry to a route from a JMS endpoint configured with PassthroughJmsKeyFormatStrategy the headers with underscores (_) are passed through correctly.However  when any header value in the message is then changed  the original headers are added back into the message using the DefaultJmsKeyFormatStrategy. For example  sending a JMS message with headers;HEADER_1=VALUE_1HEADER_2=VALUE_1we do see just these two headers in the message received into the route.However  if we then set a header value in the route  say HEADER_1=VALUE_2  we now see the headers;HEADER.1=VALUE_1HEADER.2=VALUE_1HEADER_1=VALUE_2HEADER_2=VALUE_1For some reason in the set header process the original message headers and values get added into the message after being passed through the DefaultJmsKeyFormatStrategy. This has the implication of unnecessary duplication of the headers.Also  when a message header is accessed using the getHeader(key) method it also goes through the DefaultJmsKeyFormatStrategy to decode the key that is passed. In the example above  if after we have updated 'HEADER_1' to 'VALUE_2'  we do;message.getHeader('HEADER_1') this goes through the DefaultJmsKeyFormatStrategy and actually gets executed as message.getHeader('HEADER.1') which returns VALUE_1 (wrong!).Note: if instead we lookup the header through message.getHeaders() which returns the all headers in a Map  we can correctly access the 'HEADER_1' key. (Why is getHeader(key) even going through the KeyFormatStrategy anyway if setHeader() isn't?),2.0-M3,2.0.0,0,0,202,1,13,2,1,0,0,0,0,0,5,17,components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyUsingJmsConfigurationTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsProducerWithJMSHeaderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleInOnlyNoMutateTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestReplyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsXMLRouteTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsGetHeaderKeyFormatIssueTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsGetHeaderKeyFormatIssueWithContentTypeHeaderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsMutateMessageTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsMutateRemoveHeaderMessageTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyEndUserIssueTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyUsingJmsConfigurationTest.java;,0,0
1869,Improvement,Closed,Fixed,camel-mail,Minor,Claus Ibsen,2009/08/02 15:54:10 +0100,2009/08/04 09:23:57 +0100,Claus Ibsen,2009/08/05 12:31:23 +0100,2.859178241,1.130162037,camel-mail - Add option to ignore unsupported charset and fallback to platform default instead,See nabble:http://www.nabble.com/Camel-Mail-issue-with-unsupported-charset-td24755585.html,1.6.1; 2.0-M3,2.0.0,0,0,5,1,2,1,1,1,0,0,0,0,1,4,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailConsumerUnsupportedCharsetTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailProducerUnsupportedCharsetTest.java;,0,0
1871,Improvement,Closed,Fixed,camel-jms,Minor,Claus Ibsen,2009/08/03 11:42:12 +0100,2009/08/03 11:42:12 +0100,Claus Ibsen,2009/08/03 12:16:34 +0100,0.023865741,0.023865741,camel-jms - DefaultJmsKeyFormatStrategy should replace . with _DOT_ to avoid conflicting with end user using _,If an end user sends a JMS property asMY_KEYThen it should be preserved when Camel route it  so the receiver side using Camel as well will see it as: MY_KEY and not MY.KEY.The code should be: String answer = key.replace('.'  '_DOT_'); answer = answer.replace('_DOT_'  '.');,1.6.1; 2.0-M3,2.0.0,0,0,64,1,1,1,1,1,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/DefaultJmsKeyFormatStrategy.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/DefaultJmsHeaderKeyFormatStrategyTest.java;,0,0
1873,Bug,Closed,Fixed,camel-spring,Major,Willem Jiang,2009/08/03 13:52:36 +0100,2009/08/03 13:52:36 +0100,Willem Jiang,2009/08/03 15:17:09 +0100,0.058715278,0.058715278,template   consumerTemplate  service  proxy can't be set with right camel context if there are more than one camel context in the spring application context,Current camel support to define a producer template OUTSIDE a camel context  I think it works well just like the autowire function which is provided in Spring.If there more than two Camel context in the Spring Application context   the user should specify the camel context which the template should use.But I have a concern that even we put the template INSIDE the camel context  the template will not be set with a right version of camel context  since we use a CamelPostProcessor to inject CamelContext.So I did a quick test on the current Camel code and found there is a bug if there are more one CamelContext &#8211; CamelPostProcessor will inject the last create camel context into the CamelContextAware object. Since it is not easy to add the camelContext referece id into the template element attribute  we'd better just support to parser these elements inside the camel context.,1.4.0; 1.5.0; 1.6.0; 2.0-M1; 1.6.1; 2.0-M2; 2.0-M3,1.6.2; 2.0.0,0,0,149,1,4,2,1,1,0,0,0,0,2,13,components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelConsumerTemplateFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelProducerTemplateFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/test/java/org/apache/camel/spring/CamelContextAwareTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/SpringConsumerTemplateCAMEL1870Test.java;components/camel-spring/src/test/resources/org/apache/camel/spring/SpringConsumerTemplateCAMEL1870Test-context.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/camelContextAwareBean.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/remoting/spring-with-exporter-namespace.xml;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/test/java/org/apache/camel/spring/CamelContextAwareTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/camelContextAwareBean.xml;,0,0
1878,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/08/05 08:37:51 +0100,2009/08/05 08:37:51 +0100,Claus Ibsen,2009/08/05 13:50:21 +0100,0.217013889,0.217013889,Bean component - invokes onMessage from javax.jms.MessageListener even though a specific method name have been provided,This is only an issue when your bean implements javax.jms.MessageListener and then specify a specific method to use  then Camel will still prefer to use the onMessage method.,1.6.1; 2.0-M3,1.6.2; 2.0.0,0,0,28,1,4,1,1,1,0,0,0,0,1,11,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/BaseClass.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/BeanRouteToDerivedClassTest.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/DerivedClass.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/MyMessage.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/MyMessageListener.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/MyMessageToProcessorConverter.java;tests/camel-itest/src/test/java/org/apache/camel/itest/issues/BaseClass.java;tests/camel-itest/src/test/java/org/apache/camel/itest/issues/BeanCallDerivedClassTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/issues/DerivedClass.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/issues/BeanCallDerivedClassTest-context.xml;,0,0
1881,Improvement,Closed,Fixed,,Minor,Stan Lewis,2009/08/05 18:53:32 +0100,2009/08/08 14:53:15 +0100,Claus Ibsen,2009/08/08 14:53:15 +0100,2.833136574,0,camel-irc consumer only listens to messages on a channel and ignores direct messages,While camel-irc listens to events on a channel very nicely  if you send a camel-irc consumer a message directly it ignores it.,2.0-M3,2.0.0,0,0,22,1,5,3,1,0,0,0,0,0,1,2,components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConsumer.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcPrivmsgTest.java;,0,0
1884,Improvement,Closed,Fixed,,Minor,Stan Lewis,2009/08/06 21:36:16 +0100,2009/08/07 04:50:16 +0100,Willem Jiang,2009/08/07 05:14:55 +0100,0.318506944,0.017118056,XMPP producer and consumer don't share the same connection and Chat objects,It's actually not possible to produce and consume messages from the same XMPP endpoint  i.e. something like:from('xmpp://irc.jabber.org...').to('direct:out');from('direct:in').to('xmpp://irc.jabber.org...');typically what I see happen is that the consumer will work until the XMPP producer sends a message  at that point the consumer stops receiving messages. What's happening is that producers and consumers created from the endpoint also create their own connection object and then also create their own Chat object. The attached patch ties the XMPP connection to the endpoint  making a producer or consumer share this connection. If a consumer creates the Chat first the producer will look it up and connect to the existing Chat. If the producer creates the Chat then the consumer will attach itself as a listener to this Chat.I notice that the tests are turned off as they require a local Jabber server instance to run. Is it worth creating some accounts on jabber.org to run the test with? Currently I've been testing this patch using my own Google talk accounts  this is all working towards an IRC to Jabber bridge that I might submit later on as a more complicated demo...,2.0-M3,2.0.0,0,0,185,1,2,2,1,0,0,0,0,0,1,6,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppComponent.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRouteChatTest.java;,0,0
1895,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/08/09 06:33:26 +0100,2009/08/09 06:33:26 +0100,Claus Ibsen,2010/08/23 16:16:19 +0100,379.4047801,379.4047801,camel-file - Consume and pollEnrich another file should work transparent,See nabblehttp://www.nabble.com/Problem-with-FileConsumer-and-pollEnrich-td24795192.html,2.0-M3,2.5.0,0,0,5,1,4,1,1,0,0,0,0,0,5,22,camel-core/src/test/java/org/apache/camel/component/file/FileConsumePollEnrichFileUsingProcessorTest.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumePollEnrichFileTest.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java;camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumePollEnrichFileTest.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProcessStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java;camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumeMoveRelativeNameTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumePollEnrichFileTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerAbsolutePathWithAbsoluteMoveTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerAbsolutePathWithRelativeMoveTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerMultipleDirectoriesTest.java;,0,0
1914,Bug,Closed,Fixed,camel-xmpp,Major,Stan Lewis,2009/08/15 14:34:16 +0100,2009/08/25 14:51:51 +0100,Willem Jiang,2009/08/25 15:02:31 +0100,10.01961806,0.007407407,Xmpp consumer stops consuming after some time,Noticed after creating some more complicated routes that my xmpp consumers would stop receiving messages. This patch sorts that out  I also improved some of the logging in the producer and consumer classes and tweaked the XmppRouteChatTest to work properly.,2.0-M3,2.1.0,0,0,40,1,2,2,1,0,0,0,0,0,1,3,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRouteChatTest.java;,0,0
1924,Bug,Closed,Fixed,camel-core,Major,Christian Schneider,2009/08/20 14:37:15 +0100,2009/08/21 15:47:59 +0100,Willem Jiang,2009/08/24 13:28:33 +0100,3.952291667,2.903171296,Unit test failures on Windows in 2.0.0 release,3 failures in camel-core that do not seem to occur on linux and mac.Failure Details testCannotDeleteFile junit.framework.AssertionFailedError: Should have thrown an exceptionorg.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategyTest:125 testCacheStreamToFileAndNotCloseStream junit.framework.AssertionFailedError: we should have no temp file expected:&lt;1&gt; but was:&lt;0&gt;org.apache.camel.converter.stream.CachedOutputStreamTest:117 testRouteIsCorrectAtRuntime junit.framework.AssertionFailedError: expected:&lt;4&gt; but was:&lt;1&gt;org.apache.camel.processor.ChoiceWithEndTest:39,2.0.0,2.1.0,0,0,38,1,6,2,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/test/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategyTest.java;camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java;camel-core/src/test/java/org/apache/camel/processor/ChoiceWithEndTest.java;,0,0
1925,Bug,Closed,Fixed,camel-core; camel-http,Major,Srivatsa Katta,2009/08/21 07:51:11 +0100,2009/08/26 14:53:38 +0100,Willem Jiang,2009/09/13 11:00:12 +0100,23.13126157,17.83789352,HTTP component throwing IllegalArgumentException in M3 release while bridging between jetty and http,The CamelHttpUri header is not set to the right value while routing between jetty and http components. Because of which the construction of the HttpMethod in the http component fails and throws up an IllegalArgumentException.Detailed discussion regarding this issue can be found in this following thread.http://www.nabble.com/HTTP-component-throwing-IllegalArgumentException-in-M3-release.-tt25057133.html#a25057133,2.0-M3,2.1.0,0,1,49,1,7,3,1,0,0,0,0,0,1,12,components/camel-http/src/main/java/org/apache/camel/component/http/CamelServlet.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpBridgeRouteTest.java;components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java;components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java;components/camel-servlet/src/test/resources/log4j.properties;components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/multiServletWeb.xml;components/camel-servlet/src/test/resources/org/apache/camel/component/servlet/web.xml;,0,0
1931,Improvement,Closed,Fixed,camel-xmpp,Minor,Stan Lewis,2009/08/24 20:43:41 +0100,2009/08/25 01:15:34 +0100,Willem Jiang,2009/08/25 02:16:59 +0100,0.231458333,0.042650463,XmppBinding will add non-serializeable header values to the outgoing xmpp message,I started using velocity in my project which seems to add some headers to the message exchange  the values of which are apparently not serialize-able. As a result when a message in my route gets to the camel-xmpp component it fails in XmppBinding with an IllegalArgumentException as the binding tries to add the bad header. This patch that by not inserting any headers into the xmpp message that don't have serialize-able values.,2.0.0,2.1.0,0,0,72,1,2,2,1,0,0,0,0,0,1,1,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppBinding.java;,0,0
1934,Bug,Closed,Fixed,camel-jetty,Major,Christian Schneider,2009/08/25 09:00:28 +0100,2009/08/26 03:28:23 +0100,Willem Jiang,2009/08/26 09:46:04 +0100,1.031666667,0.262280093,Unit test failure in Windows for StreamCache. Temp file is not deleted,The temporary file is not deleted. I think the file is still open in some other stream. The problem is I have no idea how to find this place. Like in issue CAMEL-1924 this only happens on windows as on unix you can delete a file even if there are open streams.testStreamCacheToFileShouldBeDeletedInCaseOfException java.lang.AssertionError: There should be no files expected:&lt;1&gt; but was:&lt;0&gt;org.apache.camel.component.jetty.HttpStreamCacheFileTest:71,2.0.0,2.1.0,0,0,72,1,4,2,1,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpStreamCacheFileTest.java;,0,0
1944,Improvement,Closed,Fixed,,Minor,Stan Lewis,2009/08/26 16:47:30 +0100,2009/08/27 02:05:46 +0100,Willem Jiang,2009/08/27 03:51:53 +0100,0.461377315,0.07369213,Revamped IRC component event adapter logging,Currently only the camel-irc producer installs an event listener on the IRC connection to log incoming messages from the IRC server. This patch revamps the logging so that the component installs an event adapter to do logging before the connection is even established so it's easier to debug various issues that could be occurring with the connection to the IRC server.,2.0.0,2.1.0,0,0,61,1,2,2,1,0,0,0,0,0,1,4,components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcComponent.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcErrorLogger.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcLogger.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java;,0,0
1948,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/08/27 08:49:06 +0100,2009/08/27 08:49:06 +0100,Claus Ibsen,2009/08/27 08:50:18 +0100,0.000833,0.000833,ServiceSupport - incorrect state after restart,This hampers restart of services by example the overhauled JMX in CAMEL-1933.When a service was restarted it had the following incorrect state: started = true starting = false stopped = true stopping = falseThe stopped should have been changed to false as its started.,2.0.0,2.1.0,0,0,52,1,2,1,1,0,0,0,0,1,1,2,camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java;camel-core/src/test/java/org/apache/camel/impl/ServiceSupportTest.java;,0,0
1950,Improvement,Closed,Fixed,,Trivial,Stan Lewis,2009/08/27 14:34:34 +0100,2009/08/29 08:29:10 +0100,Willem Jiang,2009/08/29 10:19:09 +0100,1.822627315,0.076377315,Add server name to logging event adapter,When connected to multiple IRC servers it's a bit difficult to figure out what server incoming log messages from the event adapter are from. This patch adds the IRC server responsible for a given log message from the event adapter.,2.0.0,2.1.0,0,0,40,1,2,2,1,0,0,0,0,0,1,2,components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcComponent.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcLogger.java;,0,0
1951,Improvement,Closed,Fixed,camel-jms; jmx,Major,Ron Gavlin,2009/08/28 04:45:50 +0100,2009/08/28 07:55:27 +0100,Claus Ibsen,2009/09/02 09:32:46 +0100,5.199259259,5.067581019,camel-jms consumer endpoint should allow properties such as maxConcurrentConsumers and concurrentConsumers to be managed via JMX,camel-jms consumer endpoint should allow properties such as maxConcurrentConsumers and concurrentConsumers to be managed via JMX,2.0.0,2.1.0,0,0,1,1,2,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBrowsableEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;,0,0
1952,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2009/08/28 06:14:28 +0100,2009/08/28 06:14:28 +0100,Claus Ibsen,2009/08/28 06:16:08 +0100,0.001157407,0.001157407,Exchange - getIn and getOut with expected type parameter,It would be nice with a getIn(type) method so you can avoid ugly type cast and let Camel do type casting instead.CxfMessage cxf = exchange.getIn(CxfMessage.class);And the same for a getOut as well.,2.0.0,2.1.0,0,0,39,1,2,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/test/java/org/apache/camel/impl/DefaultExchangeTest.java;,0,0
1956,Improvement,Closed,Fixed,,Minor,Stan Lewis,2009/08/28 13:23:12 +0100,2009/08/29 08:28:57 +0100,Willem Jiang,2009/08/29 09:27:39 +0100,0.836423611,0.040763889,camel-irc should handle onReply callbacks,Currently it's not possible to receive the response from commands like WHO as irclib invokes onReply when it gets a response from the IRC server  which the IrcConsumer doesn't implement. This patch adds that and also turns on debug logging for the IRC component in the tests.,2.0.0,2.1.0,0,0,47,1,2,2,1,0,0,0,0,0,1,7,components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConfiguration.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConstants.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConsumer.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcOnReplyTest.java;components/camel-irc/src/test/resources/log4j.properties;,0,0
1963,Bug,Closed,Fixed,camel-spring,Major,Dado Comm,2009/08/31 08:03:23 +0100,2009/09/10 07:16:13 +0100,Claus Ibsen,2009/09/10 09:27:39 +0100,10.05851852,0.091273148,Graceful shutdown problem,While running camel-example-spring-jms in 2.0M3  I've noticed that GracefulShutdownService can't stop Camel. It calls Main.getInstance().stop();but this call blocks and never returns. With enabled debug logging for org.springframework.jms  console outputs&#91;aultMessageListenerContainer-1&#93; efaultMessageListenerContainer DEBUG Waiting for shutdown of message listener invokers&#91;aultMessageListenerContainer-1&#93; efaultMessageListenerContainer DEBUG Still waiting for shutdown of 1 message listener invokersRelated forum thread:http://www.nabble.com/Garceful-shutdown-bug-in-2.0M3--td25113519.htmlDado,2.0-M3,2.1.0,1,2,56,1,2,1,1,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/MainSupport.java;camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/processor/Pipeline.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;components/camel-spring/src/main/java/org/apache/camel/spring/Main.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringMainStartFailedIssueTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringMainStartFailedIssueTest.xml;,0,0
1976,Improvement,Closed,Fixed,camel-jms; jmx,Major,Claus Ibsen,2009/09/02 08:17:54 +0100,2009/09/02 08:17:54 +0100,Claus Ibsen,2009/09/02 08:53:06 +0100,0.024444444,0.024444444,Restarting JmsConsumer should pickup configuration changes,You should be able to using JMX to manage JMS endpoints and change configuration such as number of concurrent consumers.Then when restarting the jms consumers they should pickup any configuration changes done on the jms endpoint.,2.0.0,2.1.0,0,0,36,1,2,1,1,0,0,0,0,0,1,6,components/camel-jms/pom.xml;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConsumer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsConsumerRestartPickupConfigurationChangesTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;,0,0
1988,Improvement,Closed,Fixed,,Critical,Guillaume Nodet,2009/09/04 11:01:13 +0100,2009/09/15 14:27:39 +0100,Guillaume Nodet,2009/09/17 16:16:39 +0100,13.21905093,2.075694444,Better OSGi metadata to allow deploying multiple camel versions in the same OSGi framework,Better OSGi metadata to allow deploying multiple camel versions in the same OSGi framework,1.6.1; 2.0.0,1.6.2; 2.1.0,0,0,1,1,3,2,1,1,0,0,0,0,1,23,camel-core/pom.xml;components/camel-amqp/pom.xml;components/camel-atom/pom.xml;components/camel-cxf/pom.xml;components/camel-flatpack/pom.xml;components/camel-freemarker/pom.xml;components/camel-http/pom.xml;components/camel-jpa/pom.xml;components/camel-mina/pom.xml;components/camel-osgi/pom.xml;components/camel-osgi/src/main/java/org/apache/camel/osgi/Activator.java;components/camel-quickfix/pom.xml;components/camel-spring-integration/pom.xml;components/camel-spring-javaconfig/pom.xml;components/camel-spring/pom.xml;components/camel-stringtemplate/pom.xml;components/camel-velocity/pom.xml;components/camel-xmlbeans/pom.xml;components/camel-xmpp/pom.xml;parent/pom.xml;platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/features.xml;pom.xml;,0,0
1993,Improvement,Closed,Fixed,camel-spring,Minor,Claus Ibsen,2009/09/07 17:17:31 +0100,2009/09/07 17:17:31 +0100,Claus Ibsen,2009/09/09 12:02:42 +0100,1.781377315,1.781377315,Spring DSL - errorHandlerRef should only be support on camel context or route,It just makes it to confusing you can set it on a processor definition in the middle of a route.Only these 2 xml tags should support it camelContext route,2.0.0,2.1.0,0,0,31,1,3,1,1,0,1,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpPostWithBodyTest.java;,0,0
2016,Bug,Closed,Fixed,camel-jpa,Major,Guillaume Nodet,2009/09/15 13:12:11 +0100,2009/09/15 13:50:36 +0100,Claus Ibsen,2009/09/15 14:04:02 +0100,0.036006944,0.009328704,camel-jpa exports the org.apache.camel.processor.interceptor which leads to a split package,The package is already exported by camel-core  so the class in this package needs to be moved to another package.,2.0.0,2.1.0,0,0,20,1,3,1,1,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;components/camel-jpa/pom.xml;components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/JpaTraceEventMessage.java;components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/jpa/JpaTraceEventMessage.java;components/camel-jpa/src/test/java/org/apache/camel/processor/interceptor/JpaTraceEventMessageTest.java;components/camel-jpa/src/test/resources/META-INF/persistence.xml;,0,0
2020,Bug,Closed,Fixed,,Major,Willem Jiang,2009/09/17 10:21:34 +0100,2009/09/17 10:21:34 +0100,Willem Jiang,2009/09/17 11:32:46 +0100,0.049444444,0.049444444,NPE when the bundle is camel-osgi bundle is inactive,The stack trace. java.lang.NullPointerException atorg.apache.camel.osgi.OsgiFactoryFinder.getResource(OsgiFactoryFinder.java:85) atorg.apache.camel.osgi.OsgiFactoryFinder.findClass(OsgiFactoryFinder.java:51) atorg.apache.camel.component.file.GenericFileEndpoint.createGenericFileStrategy(GenericFileEndpoint.java:130) atorg.apache.camel.component.file.GenericFileEndpoint.getGenericFileProcessStrategy(GenericFileEndpoint.java:114) atorg.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:162) atorg.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120) atorg.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93) atorg.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) atjava.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Here is the mail thread&#91;1&#93; which discusses about this issue.&#91;1&#93;http://www.nabble.com/Error-using-camel-file-with-windows-tt25475829.html#a25486384,1.5.0; 1.6.0; 2.0-M1; 1.6.1; 2.0-M2; 2.0-M3; 2.0.0,1.6.2; 2.1.0,0,0,44,1,2,2,1,1,0,1,0,0,1,1,components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java;,0,0
2031,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/09/21 09:20:28 +0100,2009/09/21 09:20:28 +0100,Claus Ibsen,2009/09/21 09:24:42 +0100,0.002939815,0.002939815,DataSet - Add initial delay with a default of 1 sec,To avoid data set consumers starting spitting out messages before other routes have properly started.,2.0.0,2.1.0,0,0,15,1,2,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/dataset/DataSetConsumer.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;,0,0
2032,Bug,Closed,Fixed,camel-xmpp,Minor,Stan Lewis,2009/09/21 17:24:19 +0100,2009/09/21 18:27:33 +0100,Stan Lewis,2009/09/21 18:27:33 +0100,0.043912037,0,XmppMessages don't get converted to strings,This has been bugging me for awhile  when you have a route using XMPP you get instances of XmppMessage in your route rather than just a string containing the body of the XmppMessage. Tracked that down and took out the work arounds I had previously put in my contributed xmpp tests.,2.0.0,2.1.0,0,0,51,1,2,2,1,0,0,0,0,0,1,3,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppMessage.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRouteChatTest.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRouteMultipleProducersSingleConsumerTest.java;,0,0
2049,Bug,Closed,Fixed,camel-mina,Major,Dmytro Rud,2009/10/01 10:00:11 +0100,2009/10/03 09:08:03 +0100,Claus Ibsen,2009/10/08 07:23:36 +0100,6.891261574,4.927465278,Improper configuration of MINA connector and acceptor instances; Better producer,A sample scenario where both MINA producer(s) and consumer(s) are used in the same route (e.g. some kind of dispatching or proxying):from('mina:tcp://localhost:8888?lazySessionCreation=true&amp;sync=true') .to('mina:tcp://localhost:7777?lazySessionCreation=true&amp;sync=true');from('mina:tcp://localhost:7777?lazySessionCreation=true&amp;sync=true') .process(/prepare answer/);Due to improper configuration of MINA acceptor and connector instances in MinaComponent#createSocketEndpoint()  no more than 15 incoming threads can be served at port 8888 &#8211; the producer becomes unable to open an outgoing session. This is actually an issue of MINA  not of Camel &#8211; a test application written using 'raw' MINA shows the same behaviour.A solution is to apply configuration rules described  e.g.  at http://mina.apache.org/configuring-thread-model.html  as done in the attached patch.Moreover  the standard Camel-MINA producer is not thread-safe &#8211; actually a well-known point. A second attached file contains a thread pool-based reentrant version  which can be efficiently used for TCP endpoints with both parameters 'lazySessionCreation' and 'sync' set to true.,1.6.0,1.6.2; 2.0.0; 2.1.0,0,0,138,1,13,2,0,0,0,0,0,0,3,7,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;,0,0
2060,Bug,Closed,Fixed,,Major,Willem Jiang,2009/10/12 04:40:55 +0100,2009/10/12 04:40:55 +0100,Willem Jiang,2009/10/12 07:50:49 +0100,0.131875,0.131875,Camel Bean component should not remember the last called method name if the bean's method name is not explicitly specified.,Here is the mail thread which discuses this issue. http://www.nabble.com/Bean-endpoint-in-a-route-is-holding-reference-to-the-last-used-methodName-and-does-not-invoke-Camel%27s-Bean-binding-tp25838095p25838095.html,2.0-M3; 2.0.0,1.6.2; 2.1.0,0,0,13,1,2,2,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanImplicitMethodTest.java;,0,0
2063,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/10/12 18:36:26 +0100,2009/11/19 13:16:19 +0100,Claus Ibsen,2009/11/19 14:32:49 +0100,37.83082176,0.053125,DeadLetterChannel - Should pre check the endpointUri is valid and report failure on startup,If you misconfigure the DLC endpoint URI it will get created on demand and if case of a problem its logged. We should pre check this on route startup so we know the DLC queue works.,2.0.0,2.1.0,0,0,36,1,14,2,0,0,0,0,0,0,2,65,tests/camel-itest-karaf/pom.xml;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelAmqpTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelAtomTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelBamTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelBindyTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCacheTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCastorTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCometdTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCsvTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCxfTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelFlatpackTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelFreemarkerTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelFtpTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelGroovyTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelGuiceTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelHl7Test.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelHttpTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelIbatisTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelIrcTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJaxbTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJcrTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJdbcTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJettyTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJingTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJmsTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJosqlTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJpaTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJuelTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelJxpathTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelLdapTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelMailTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelMinaTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelMsvTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelMvelTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelOgnlTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelPrinterTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelQuartzTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelRestletTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelRmiTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelRssTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSaxonTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelScalaTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelScriptTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelServletTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSnmpTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSpringIntegrationTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSpringJavaconfigTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSqlTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelStreamTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelTagsoupTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelVelocityTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelXmlbeansTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelXmlsecurityTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelXmppTest.java;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelXstreamTest.java;tests/pom.xml;camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelBuilderWithInvalidDeadLetterUriTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringDeadLetterChannelInvalidDeadLetterUriTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringDeadLetterChannelInvalidOptionDeadLetterUriTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringDeadLetterChannelInvalidDeadLetterUriTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringDeadLetterChannelInvalidOptionDeadLetterUriTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/exceptionBuilderWithRetryLoggingLevelSet.xml;,0,0
2064,Bug,Closed,Fixed,camel-core,Major,Martin Krasser,2009/10/12 18:43:37 +0100,2009/10/12 18:53:21 +0100,Claus Ibsen,2009/10/12 18:53:21 +0100,0.006759259,0,Redundant interceptions when using interceptSendToEndpoint,See http://www.nabble.com/Issue-with-interceptSendToEndpoint-to25859201s22882.html,2.0.0,2.1.0,0,0,5,1,3,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java;camel-core/src/test/java/org/apache/camel/management/ManagedErrorHandlerOptionsTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointTest.java;,0,0
2070,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/10/16 06:16:07 +0100,2009/10/16 06:16:07 +0100,Claus Ibsen,2009/10/16 06:58:08 +0100,0.029178241,0.029178241,Dynamic Recipient List - Comma is always delimiter even if custom specified,See nabblehttp://www.nabble.com/Dynamic-RecipientList-delimeter-issue-td25917854.html,1.6.1; 2.0.0,2.1.0,0,0,5,1,2,1,0,1,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java;camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;camel-core/src/test/java/org/apache/camel/processor/RecipientListWithDelimiterTest.java;,0,0
2072,Bug,Closed,Fixed,camel-mail,Minor,Claus Ibsen,2009/10/16 16:47:53 +0100,2009/10/16 16:47:53 +0100,Claus Ibsen,2009/10/16 16:50:48 +0100,0.002025463,0.002025463,camel-mail - extracting mails with headers using multi values inserts duplicates,Sending a message with headers that contains 2 values such a String[] with 2 values will result on the other side when consuming that mail message to contain a header with 2 entries. There should only be 1 entry with the 2 values.,1.6.1; 2.0.0,2.1.0,0,0,43,1,2,1,0,1,0,0,0,0,1,2,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailCollectionHeaderTest.java;,0,0
2078,Improvement,Closed,Fixed,camel-jpa,Minor,Claus Ibsen,2009/10/19 12:05:32 +0100,2009/10/19 12:05:32 +0100,Claus Ibsen,2009/10/19 12:21:21 +0100,0.010983796,0.010983796,camel-jpa - JpaProducer should mandate body instead of creating a new empty instance,If you send an empty body to a JpaProducer it will create a new empty instance of that type which then gets inserted.Camel should thrown an exception indicate a body is missing,1.6.1; 2.0.0,2.1.0,0,0,32,1,2,1,0,1,0,0,0,0,1,2,components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaEndpoint.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaProducerNoBodyTest.java;,0,0
2084,Bug,Closed,Fixed,camel-http,Minor,Claus Ibsen,2009/10/20 12:02:12 +0100,2009/10/20 12:02:12 +0100,Claus Ibsen,2009/10/20 12:07:11 +0100,0.003460648,0.003460648,http polling consumer does not support timeout,When using the consumer template to receive from a remote http service using camel-http the method receive(5000) that uses a 5 sec timeout does not work as expected.Camel does not use the 5000 value.,1.6.1; 2.0.0,2.1.0,0,0,34,1,2,1,0,1,0,0,0,0,1,3,components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpPollingConsumer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpPollingConsumerTest.java;,0,0
2092,Bug,Closed,Fixed,,Major,Willem Jiang,2009/10/22 03:46:52 +0100,2009/10/22 03:46:52 +0100,Willem Jiang,2009/10/22 05:08:09 +0100,0.056446759,0.056446759,velocity endpoint should not remember the last used template uri,If there are two velocity endpoint linked with the pipeline  you will find the last velocity will not effect anymore.,2.0-M1; 2.0-M2; 2.0-M3; 2.0.0,2.1.0,0,0,20,1,2,2,0,1,0,0,0,0,1,4,components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityLetterWithoutHeaderTest.java;components/camel-velocity/src/test/resources/org/apache/camel/component/velocity/header.vm;components/camel-velocity/src/test/resources/org/apache/camel/component/velocity/letterWithoutHeader.vm;,0,0
2094,Improvement,Closed,Fixed,camel-core; camel-spring,Minor,Claus Ibsen,2009/10/22 07:01:59 +0100,2009/10/22 07:01:59 +0100,Claus Ibsen,2009/10/22 08:02:18 +0100,0.041886574,0.041886574,CamelContext should support autoStartup,We now have option autoStartup on routes. Lets also have this on the camel context itself so it replaces the shouldStartContext option that is a bit confusing. &lt;camelContext id='myCamel' xmlns='http://camel.apache.org/schema/spring' autoStartup='false'&gt; &lt;route&gt; &lt;from uri='direct:start'/&gt; &lt;to uri='mock:result'/&gt; &lt;/route&gt; &lt;/camelContext&gt;For example the code above will not start Camel on startup. You can then later start camel manually by SpringCamelContext camel = (SpringCamelContext) ac.getBean('myCamel'); camel.start();And then all runs.This also means that we will remove the option shouldStartContext! so if you use this option you must migrate to the autoStartup instead.,2.0.0,2.1.0,0,0,109,1,2,1,0,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextAutoStartupTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelContextAutoStartupTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelContextFactoryBeanTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/camelContextFactoryBean.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/CamelContextAutoStartupTestFalse.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/CamelContextAutoStartupTestTrue.xml;,0,0
2095,Bug,Closed,Fixed,camel-core,Major,Laurent Bovet,2009/10/22 08:04:20 +0100,2009/10/22 11:55:53 +0100,Claus Ibsen,2009/10/22 13:28:46 +0100,0.225300926,0.064502315,Support Issue: Routing a TextMessage from a  to a JMS queue,I did not find any example or documentation for using the &lt;camel:proxy&gt; with a simple send(String textMessage) method and a route sending the textMessage String as body to a JMS queue (for example).The thing is that &lt;camel:proxy&gt; creates a messages with body of type BeanInvocation. I would expect that Camel provides some builtin transformer/converter to change the body to the String argument  so that the message on the queue is of type TextMessage.Did I miss something?,2.0.0,2.1.0,0,0,77,1,7,2,0,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/component/bean/BeanConverter.java;camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java;camel-core/src/main/java/org/apache/camel/impl/converter/ToStringTypeConverter.java;camel-core/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-spring/src/test/java/org/apache/camel/spring/config/AnotherCamelProxyTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelProxyTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/MyProxySender.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/AnotherCamelProxyTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/CamelProxyTest.xml;,0,0
2113,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/10/27 10:22:03 +0100,2009/10/27 10:22:03 +0100,Claus Ibsen,2009/10/27 12:10:56 +0100,0.075613426,0.075613426,@Bean - Add method to the annotation so you can configure the method name,Its a bit more trivial for end users to know how to set bean name and method if having two attributes.Otherwise they have to know about you can use dot to separate the ben name for the method name.,2.0.0,2.1.0,0,0,39,1,4,1,0,0,0,0,0,0,2,8,camel-core/src/main/java/org/apache/camel/component/bean/RegistryBean.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanAnnotationExpressionFactory.java;camel-core/src/main/java/org/apache/camel/component/bean/RegistryBean.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/language/Bean.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanRegistryBeanTest.java;camel-core/src/test/java/org/apache/camel/converter/jaxp/XmlConverterTest.java;components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java;,0,0
2132,Bug,Closed,Fixed,camel-jms,Minor,Claus Ibsen,2009/11/04 11:12:18 +0100,2009/11/04 11:12:18 +0100,Claus Ibsen,2009/11/04 11:46:05 +0100,0.023460648,0.023460648,camel-jms - Sending Object message should fail if payload cannot be converted to serializable,If not a null message is created and send.See nabble:http://old.nabble.com/JPA%3A-Could-not-pass-Object-from-jpa-to-jms-to26160124.html,2.0.0,2.1.0,0,0,13,1,2,1,0,0,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;,0,0
2133,Bug,Closed,Fixed,camel-core,Major,Willem Jiang,2009/11/04 13:23:55 +0100,2009/11/04 13:23:55 +0100,Willem Jiang,2009/11/04 13:31:42 +0100,0.005405093,0.005405093,The converter's MandatoryConvert method doesn't throw the exception when the value is null,The converter's MandatoryConvert method doesn't throw the exception when the value is null,2.0-M1; 2.0-M2; 2.0-M3; 2.0.0,2.1.0,0,0,1,1,3,2,0,1,0,0,0,0,2,4,camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java;,0,0
2139,Bug,Closed,Fixed,camel-ftp,Major,Chris Gummer,2009/11/06 03:53:39 +0100,2009/11/06 06:26:36 +0100,Claus Ibsen,2009/11/06 06:49:57 +0100,0.122430556,0.016215278,Some methods of SftpOperations create streams that are never closed,Where SftpOperations creates streams for storing or retrieving files via ChannelSftp  these streams are not always closed. For example  the retrieveFileToStreamInBody method creates an OutputStream object  but never closes it.,2.0.0,2.1.0,0,1,30,1,3,1,0,0,0,0,1,0,1,2,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
2146,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/11/06 15:37:10 +0100,2009/11/06 15:37:10 +0100,Claus Ibsen,2009/11/06 15:38:37 +0100,0.001006944,0.001006944,Type converter - Should respect Future ExecutionException as not failed to convert but some other error,Type converter - Should respect Future ExecutionException as not failed to convert but some other error,2.0.0,2.1.0,0,0,1,1,2,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/FutureTypeConverter.java;camel-core/src/test/java/org/apache/camel/processor/ThrottlingInflightRoutePolicyTest.java;,0,0
2150,Bug,Closed,Fixed,camel-rss,Major,Ian de Beer,2009/11/09 10:35:45 +0100,2009/11/10 07:36:44 +0100,Claus Ibsen,2009/11/16 21:31:05 +0100,7.455092593,6.579409722,RSS Component - parameter filtering not working,I have tried to sort RRS feeds or to split the entries as described in the documentation. The problem is that the parameters that are to be consumed by Camel are passed through to the endpoint  who does not understand the parameters.Here is my code: from('rss:' + feedLocation+ '?sortEntries=true&amp;feedHeader=true').marshal().rss()...where feedLocation = 'http://www.iafrica.com/pls/cms/grapevine.xml'It results in:java.io.FileNotFoundException: http://www.iafrica.com/pls/cms/grapevine.xml?feedHeader=true&amp;sortEntries=true at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1311) at java.net.URL.openStream(URL.java:1010) at org.apache.camel.component.rss.RssUtils.createFeed(RssUtils.java:32) at org.apache.camel.component.rss.RssEntryPollingConsumer.createFeed(RssEntryPollingConsumer.java:54) at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:42) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:99) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637),2.0.0,2.1.0,0,0,88,1,19,2,0,0,0,0,0,0,3,9,components/camel-rss/src/test/java/org/apache/camel/component/rss/RssMultipleEndpointsIssueTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomComponent.java;components/camel-atom/src/test/java/org/apache/camel/component/atom/AtomHttpConsumerTest.java;components/camel-atom/src/test/java/org/apache/camel/component/atom/AtomHttpNoCamelParametersTest.java;components/camel-atom/src/test/java/org/apache/camel/component/atom/AtomPollingConsumerTest.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/RssComponent.java;components/camel-rss/src/test/java/org/apache/camel/component/rss/RssHttpNoCamelParametersTest.java;components/camel-atom/src/main/java/org/apache/camel/component/feed/FeedEndpoint.java;,0,0
2152,Improvement,Closed,Fixed,camel-mail,Major,Dan Checkoway,2009/11/09 15:24:01 +0100,2009/11/10 07:19:03 +0100,Claus Ibsen,2009/11/10 08:19:34 +0100,0.705243056,0.042025463,Workaround for UnsupportedEncodingException,Reference this discussion: http://old.nabble.com/Camel-Mail-issue-with-unsupported-charset-td24755585.htmlCamel-mail fails to process a message with an unsupported charset in the Content-Type. It throws an exception and can never get past that message...subsequent messages in the inbox never get processed.Claus and I came up with a fix  where we make a copy of the MimeMessage object and modify the Content-Type header  stripping the unrecognized charset.,2.0.0,2.1.0,0,1,62,1,3,2,0,0,0,0,0,0,1,3,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailMessage.java;,0,0
2153,Bug,Closed,Fixed,camel-ftp,Major,Marco Crivellaro,2009/11/09 15:37:25 +0100,2009/11/10 06:55:38 +0100,Claus Ibsen,2009/11/10 14:32:22 +0100,0.954826389,0.317175926,FTP Component issue with tempPrefix or tempFileName,using FTP component to push files via FTP I am facing issues pushing a file on subfolder when using tempPrefix or tempFileName. route sample: from('direct:start').to('ftp://username@ipaddress?password=mypass&amp;fileName=./camel/test/message.txt&amp;tempFileName=${file:name.noext}.tmp');no errors are raised if the final destination file doesn't exists  if it exists following error is raised: Exception in thread 'main' org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange&#91;Message: Message content&#93;  at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1055)  at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:446)  at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431)  at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:427)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:112)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:117)  at com.opta.camel.test.FTPTester.main(FTPTester.java:30) Caused by: java.lang.NullPointerException  at org.apache.camel.component.file.remote.FtpOperations.existsFile(FtpOperations.java:372) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:92)  at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52)  at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:86)  at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:84)  at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)  at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:83)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)  at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)  at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:85)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:232)  at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:162)  at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)  at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)  at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:201)  at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)  at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)  at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)  at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)  at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)  at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)  at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)  at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)  at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98)  at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97)  at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:110)  ... 2 more,2.1.0,2.1.0,0,0,169,1,5,2,0,0,0,1,0,0,2,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/ToFtpTempFileTargetFileExistTest.java;,0,0
2156,Bug,Closed,Fixed,camel-bam,Minor,Karl Palsson,2009/11/11 02:39:03 +0100,2009/11/11 02:39:03 +0100,Claus Ibsen,2009/11/21 12:39:27 +0100,10.41694444,10.41694444,ActivityMonitorEngine uses ?1 parameters in JPAQL  which don't work with (at least) the hibernate JPA provider.,Trying to just replace my RouteBuilder with a ProcessBuilder to start moving towards using BAM. I converted everything over to JPA  to make bam happy  but then found that it still explodes  (Full stack trace below)Line 80 of ActivityMonitorEngine has this JPAQL  List&lt;ActivityState&gt; list = template.find('select x from ' + ActivityState.class.getName() + ' x where x.timeOverdue &lt; ?1'  timeNow);The ?1 named/numbered parameter seems to not be supported by hibernate's JPA provider.I can't find much of any documentation on this  could this just be made a normal positional? I can't even try out the BAM module without this 2009-11-11 01:33:53 815 ERROR &#91;org.apache.camel.bam.processor.ActivityMonitorEngine:ActivityMonitorEngine&#93; - &lt;Caught: org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;&gt;org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93;; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:271) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:97) at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212) at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:189) at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:151) at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:311) at org.apache.camel.bam.processor.ActivityMonitorEngine$1.doInTransactionWithoutResult(ActivityMonitorEngine.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) at org.apache.camel.bam.processor.ActivityMonitorEngine.run(ActivityMonitorEngine.java:77) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:206) at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:261) at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:316) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184) ... 7 moreCaused by: org.hibernate.QueryParameterException: could not locate named parameter &#91;1&#93; at org.hibernate.engine.query.ParameterMetadata.getNamedParameterDescriptor(ParameterMetadata.java:99) at org.hibernate.engine.query.ParameterMetadata.getNamedParameterExpectedType(ParameterMetadata.java:105) at org.hibernate.impl.AbstractQueryImpl.determineType(AbstractQueryImpl.java:437) at org.hibernate.impl.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:407) at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:201) ... 10 moreLine 80,2.0.0,2.1.0,0,1,228,1,5,2,0,0,0,0,0,0,1,5,components/camel-bam/src/main/java/org/apache/camel/bam/ProcessBuilder.java;components/camel-bam/src/main/java/org/apache/camel/bam/model/ProcessDefinition.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/ActivityMonitorEngine.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/JpaBamProcessorSupport.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/ProcessContext.java;,0,0
2165,Bug,Closed,Fixed,camel-ftp,Minor,Karl Palsson,2009/11/12 16:33:19 +0100,2009/11/12 17:55:59 +0100,Claus Ibsen,2009/11/18 09:47:47 +0100,5.71837963,5.660972222,ftp uploads can fail: File operation failed:  Connection closed without indication.. Code: 421,Looks like something that was fixed for CAMEL-444 didn't make it into 2.0?On 2.0.0  this is not a warning  this is a fatal.SEVERE: Exception occured during execution on the exchange: Exchange&#91;Message: XXXXXX&#93;org.apache.camel.CamelExecutionException: Exception occured during execution on the exchange: Exchange&#91;Message: XXXXX&#93; at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1027) at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:479) at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:106) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:122) at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:266) at... into my code here...Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: Connection closed without indication.. Code: 421 at org.apache.camel.component.file.remote.FtpOperations.disconnect(FtpOperations.java:167) at org.apache.camel.component.file.remote.RemoteFileProducer.disconnect(RemoteFileProducer.java:77) at org.apache.camel.component.file.remote.RemoteFileProducer.handleFailedWrite(RemoteFileProducer.java:66) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:104) at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52) at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81) at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61) at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88) at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148) at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:170) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:156) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:155) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:111) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:105) ... 37 moreCaused by: org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication. at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:297)This is 'not what I want' and there doesn't seem to be any keep alive or other option on the ftp2 component.,2.0.0,2.1.0,0,0,165,1,21,2,0,0,0,0,0,1,4,8,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;,0,0
2168,Bug,Closed,Fixed,camel-core,Minor,Patrick Savage,2009/11/12 20:26:25 +0100,2009/11/12 20:36:40 +0100,Jonathan Anstey,2009/11/12 20:36:40 +0100,0.007118056,0,Logger logs INFO level messages at DEBUG level,The Camel logger logs INFO level messages at the DEBUG level. CAMEL-1048 fixed the problem in one of two cases (logging without an exception)  but it is still broken for logging with an exception. Patch to fix this is attached.,1.6.1; 2.0.0,1.6.2; 2.1.0,0,0,58,1,3,2,0,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/processor/Logger.java;,0,0
2170,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/11/14 17:45:25 +0100,2009/11/14 17:45:25 +0100,Claus Ibsen,2009/11/14 18:10:55 +0100,0.017708333,0.017708333,UnitOfWorkProcessor - Should wrap more EIPs such as Aggregator  Splitter  RecipientList on their child routes,This ensures these exchanges have an UoW when they are routed  which allows for synchronization tasks to run on completion,2.0.0,2.1.0,0,0,20,1,2,1,0,0,0,0,0,0,2,5,camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java;camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java;camel-core/src/main/java/org/apache/camel/processor/OnCompletionProcessor.java;camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;,0,0
2174,Improvement,Closed,Fixed,camel-spring,Major,Claus Ibsen,2009/11/16 08:44:12 +0100,2009/11/16 08:44:12 +0100,Claus Ibsen,2009/11/16 09:24:58 +0100,0.028310185,0.028310185,Remove dependency on spring core in PatternBasedPackageScanFilter,The dependency scan is using Springs ANT path matcher but the java code is in camel-core.We should moved that code to camel-spring so camel does not have any dep on spring code at all. (except for JMX annotations  which you is optional to use at runtime),2.0.0,2.1.0,0,0,46,1,2,1,0,0,0,0,0,0,2,28,camel-core/src/main/java/org/apache/camel/impl/scan/PatternBasedPackageScanFilter.java;camel-core/src/test/java/org/apache/camel/impl/scan/DefaultPackageScanClassResolverTest.java;camel-core/src/test/java/org/apache/camel/impl/scan/PackageScanFiltersTest.java;camel-core/src/test/java/org/apache/camel/impl/scan/PatternBasedPackageScanFilterTest.java;camel-core/src/test/java/org/apache/camel/impl/scan/ScanTestSupport.java;camel-core/src/test/java/org/apache/camel/impl/scan/test/ScannableOne.java;camel-core/src/test/java/org/apache/camel/impl/scan/test/ScannableTwo.java;camel-core/src/test/java/org/apache/camel/impl/scan/test/a/ScanTargetOne.java;camel-core/src/test/java/org/apache/camel/impl/scan/test/b/ScanTargetTwo.java;camel-core/src/test/java/org/apache/camel/impl/scan/test/c/NotAScanTarget.java;camel-core/src/test/java/org/apache/camel/impl/scan/test/c/ScanTargetThree.java;camel-core/src/test/resources/package+scan+test.jar;camel-core/src/test/resources/package_scan_test.jar;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/PatternBasedPackageScanFilter.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/DefaultPackageScanClassResolverTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/PackageScanFiltersTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/PatternBasedPackageScanFilterTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/ScanTestSupport.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/ScannableOne.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/ScannableTwo.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/a/ScanTargetOne.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/b/ScanTargetTwo.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/c/NotAScanTarget.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/c/ScanTargetThree.java;components/camel-spring/src/test/resources/package+scan+test.jar;components/camel-spring/src/test/resources/package_scan_test.jar;camel-core/pom.xml;,0,0
2180,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/11/17 08:01:22 +0100,2009/11/17 08:01:22 +0100,Claus Ibsen,2009/11/17 08:02:12 +0100,0.000579,0.000579,TryProcessor - Do not use local copy Exchange in doCatch,There is no need to use a local copy when processing in doCatch.See nabblehttp://old.nabble.com/To-Roman---About-TryProcessor-to26377903s22882.html,1.6.1; 2.0.0,2.1.0,0,0,17,1,2,1,0,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;,0,0
2183,Bug,Closed,Fixed,camel-cxf,Major,Claus Ibsen,2009/11/17 11:03:36 +0100,2009/11/17 11:03:36 +0100,William Tam,2009/11/17 18:35:09 +0100,0.313576389,0.313576389,camel-cxf - Empty body causes http error 500 even for GET when using cxfbean,CxfSoapBinding has a bug that it mandates a body to exist. But when you send a GET then there is of course no body.The code below fixed this in the method getCxfInMessage // body can be empty in case of GET etc. InputStream body = message.getBody(InputStream.class); if (body != null) { answer.setContent(InputStream.class  body); } else if (message.getBody() != null) { // fallback and set the body as what it is answer.setContent(Object.class  body); }Willem Tam can you review if that is okay? Maybe the code can be more finer to check the HTTP method and in cases of GET etc. it allows no body.I will commit my fix to get the unit tests passing.,2.0.0,2.1.0,0,0,129,1,4,2,0,0,0,0,0,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapBinding.java;,0,0
2188,Bug,Closed,Fixed,camel-jcr,Major,Paul Mietz Egli,2009/11/18 00:24:31 +0100,2009/11/19 04:40:53 +0100,Hadrian Zbarcea,2010/01/26 20:12:12 +0100,69.82478009,68.64674769,JcrProducer node creation throws javax.jcr.PathNotFoundException when using exchange ID as node name,To reproduce  use the camel-jcr component without specifying a node name in the message properties. JcrProducer will attempt to use the exchange ID as the node name  but in ServiceMix 4  this ID contains path separator characters  which results in a PathNotFound exception when the producer attempts to create the node. IMHO  the producer should attempt to create parent nodes as needed when the value of either the exchange ID or the property named JcrConstants.JCR_NODE_NAME contain path separators.,1.6.0,2.1.0,0,0,78,1,10,4,0,0,0,0,0,0,0,0,,0,0
2189,Improvement,Closed,Fixed,tooling,Minor,Chris Love,2009/11/18 02:06:02 +0100,2009/11/19 05:06:01 +0100,Hadrian Zbarcea,2009/11/19 05:12:47 +0100,1.1296875,0.004699074,Improvment in example archtypes,Made changes to improve application context xml to improve schema usage. Also replaced log4j.properties fles with log4j.xml files.,2.0.0,2.1.0,0,0,18,1,9,3,0,0,0,0,0,0,0,0,,0,0
2194,Improvement,Resolved,Fixed,camel-restlet,Major,Ron Gavlin,2009/11/18 10:10:22 +0100,2011/04/14 22:49:57 +0100,Claus Ibsen,2011/04/14 23:05:46 +0100,512.5384722,0.010983796,RestletProducer should support native async request/response semantics,RestletProducer should support native async request/response semantics like the recent changes made to the camel-jetty producer.,2.0.0,2.8.0,0,0,16,1,1,1,0,0,0,0,0,0,1,2,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerGetTest.java;,0,0
2195,Improvement,Closed,Fixed,camel-cxf,Major,Claus Ibsen,2009/11/18 11:30:58 +0100,2009/11/18 11:30:58 +0100,Willem Jiang,2009/12/16 09:13:20 +0100,27.9044213,27.9044213,camel-cxf - CxfProducer should check parameters more strictly to ensure we have the number of parameters required,The method getParams in CxfProducer does not check for correct number of parameters and that we have data when its mandatory.,2.0.0,2.2.0,0,0,21,1,1,1,0,0,0,0,0,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;,0,0
2201,Bug,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2009/11/19 05:58:52 +0100,2009/11/19 05:58:52 +0100,Claus Ibsen,2009/11/19 06:48:26 +0100,0.034421296,0.034421296,RedeliveryPolicy - Setting delay > maxDelay should should also set max value,See nabblehttp://old.nabble.com/maximumRedeliveryDelay-applies-even-if-you-are-not-using-exponential-back-off-to26415728.html,2.0.0,2.1.0,0,0,5,1,2,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;,0,0
2205,Improvement,Closed,Fixed,camel-core,Major,Karl Palsson,2009/11/19 18:29:03 +0100,2009/11/20 09:01:12 +0100,Claus Ibsen,2009/11/20 11:49:33 +0100,0.722569444,0.116909722,When the 'from' endpoint is improperly set  it can be very hard to work out why/where,I have static routes configured using the java DSL  but use bean properties on my route builder to provide custom endpoints for different environments  like so... from(sourceUriProperty) .to('bean:fileParser') .beanRef('conanCore'  'updateOperationFailure') ;If you forget to set the from URI property  the exception you get at application startup just says: 'java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1' (Full stack trace below..... but probably not really important... note that it never once mentions any of my own classes)It would be nice if throw could be somewhere like in: RouteDefinition.java public List&lt;RouteContext&gt; addRoutes(CamelContext context  Collection&lt;Route&gt; routes) throws Exception { // other parts snipped... for (FromDefinition fromType : inputs) { // Throwing here would be nice  fromType.description already has 'no uri or ref!' so it already knows it's broken. RouteContext routeContext = addRoutes(routes  fromType); answer.add(routeContext); }}The RouteDefinition at that stage already contains things like: {{this = {org.apache.camel.model.RouteDefinition@5751}'Route[[From&#91;no uri or ref supplied!&#93;] -&gt; [To&#91;bean:fileParser&#93;  Bean&#91;ref:conanCore method: updateOperationFailure&#93;]]'}}So if we can explode there  you can clearly see what route you've screwed up.Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1 at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1011) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:469) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:42) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:173) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:197) ... 18 moreCaused by: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1 at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:117) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:74) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:432) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901) at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:119) ... 29 more,2.0.0,2.1.0,0,0,281,1,4,1,0,0,0,0,0,0,1,12,camel-core/src/main/java/org/apache/camel/FailedToCreateRouteException.java;camel-core/src/main/java/org/apache/camel/model/BeanDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/test/java/org/apache/camel/component/timer/TimerWithTimeOptionTest.java;camel-core/src/test/java/org/apache/camel/model/ProcessorTypeConfigurationTest.java;camel-core/src/test/java/org/apache/camel/model/StartingRoutesErrorReportedTest.java;camel-core/src/test/java/org/apache/camel/processor/CreateRouteWithNonExistingEndpointTest.java;components/camel-spring/src/test/java/org/apache/camel/component/xslt/InvalidXsltFileTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringMainStartFailedIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringCamelContextStartingFailedEventTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringDeadLetterChannelInvalidDeadLetterUriTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringDeadLetterChannelInvalidOptionDeadLetterUriTest.java;,0,0
2215,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/11/24 06:37:35 +0100,2009/11/24 06:37:35 +0100,Claus Ibsen,2009/11/24 07:05:15 +0100,0.019212963,0.019212963,CaseInsensitiveMap should be serializable,CaseInsensitiveMap should be fully serializableSee nabblehttp://old.nabble.com/DataSet-header-%7BCamelDataSetIndex%3D0%7D-causes-failure-to26487985.html,2.0.0,2.1.0,0,0,9,1,2,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/util/CaseInsensitiveMap.java;camel-core/src/test/java/org/apache/camel/util/CaseInsensitiveMapTest.java;,0,0
2220,Improvement,Closed,Fixed,camel-jdbc,Minor,Claus Ibsen,2009/11/24 10:39:18 +0100,2009/11/24 10:39:18 +0100,Claus Ibsen,2009/11/24 11:31:28 +0100,0.036226852,0.036226852,camel-jdbc - Allow properties to be set on Statement such as fetchSize  maxRows etc,Just like the SQL component offers a template. to set any property on the Spring JdbcTemplate we should do the same for this component for its Statement class.,2.0.0,2.1.0,0,0,28,1,2,1,0,0,0,0,0,0,1,4,components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcComponent.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcStatementParametersTest.java;,0,0
2222,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/11/24 15:10:40 +0100,2009/11/24 15:10:40 +0100,Claus Ibsen,2009/11/24 18:07:46 +0100,0.122986111,0.122986111,camel-bean - Classes enhanced by CGLIB should skip cglib methods,See nabblehttp://old.nabble.com/AmbiguousMethodCallException-on-transactional-spring-bean-to26496269.html,2.0.0,2.1.0,1,1,5,1,6,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;,0,0
2227,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/11/25 11:22:46 +0100,2009/11/25 11:22:46 +0100,Claus Ibsen,2009/11/25 12:28:11 +0100,0.045428241,0.045428241,Mock component - expectedBodiesReceived(List) does not work as expected,Java chooses the varargs methods always instead of the List method.,2.0.0,2.1.0,0,0,11,1,3,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/test/java/org/apache/camel/component/mock/MockExpectedBodiesAsListTest.java;,0,0
2231,Bug,Closed,Fixed,camel-mail,Major,Christopher Hunt,2009/11/26 12:13:36 +0100,2009/11/26 12:19:11 +0100,Claus Ibsen,2009/11/26 12:50:59 +0100,0.025960648,0.022083333,Exception during mail connection requires folder to be reset,I think that this problem may still be around with 2.1-SNAPSHOT:http://fusesource.com/forums/thread.jspa?threadID=746&amp;tstart=0I noticed that I had a pop3 server outage and then subsequently had a similar problem i.e. IllegalStateException  folder not open.Here's when the outage started.2009-11-26 11:57:55 316 [: MailComponent] WARN ultPollingConsumerPollStrategy - Consumer Consumer[pop3://...] could not poll endpoint: pop3://... caused by: Connect failedjavax.mail.MessagingException: Connect failed; nested exception is: java.net.NoRouteToHostException: No route to host at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:161) at javax.mail.Service.connect(Service.java:288) at org.apache.camel.component.mail.MailConsumer.ensureIsConnected(MailConsumer.java:241) at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:79) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Caused by: java.net.NoRouteToHostException: No route to host at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366) at java.net.Socket.connect(Socket.java:519) at java.net.Socket.connect(Socket.java:469) at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:233) at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:189) at com.sun.mail.pop3.Protocol.&lt;init&gt;(Protocol.java:94) at com.sun.mail.pop3.POP3Store.getPort(POP3Store.java:214) at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:157) ... 13 moreThis went on for about a minute or so and there was no more in the log file until several hours later - in fact when an email appeared in the INBOX. I know this because my personal email account was copied on the email and so I have the timestamp.I then get the following message every time I poll the server and have to re-start my application to get over it:2009-11-26 19:19:57 293 [: MailComponent] ERROR MailConsumer - Folder not openjava.lang.IllegalStateException: Folder not open at javax.mail.Folder.getMessages(Folder.java:938) at javax.mail.Folder.search(Folder.java:1226) at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:107) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)I took a look at MailConsumer.java and note the following code:236 if (!connected) {237 if (LOG.isDebugEnabled()) {238 LOG.debug('Connecting to MailStore: ' + endpoint.getConfiguration().getMailStoreLogInformation());239 }240 store = sender.getSession().getStore(config.getProtocol());241 store.connect(config.getHost()  config.getPort()  config.getUsername()  config.getPassword());242 }If you're not connected then how is it possible to have a folder? Following this logic my recommendation is to insert the following at line 242:241 store.connect(config.getHost()  config.getPort()  config.getUsername()  config.getPassword()); folder = null;242 },1.6.2; 2.0.0,1.6.3; 2.1.0,0,0,337,1,8,2,0,1,0,0,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;,0,0
2234,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/11/27 14:17:16 +0100,2009/11/27 14:17:16 +0100,Claus Ibsen,2009/11/27 14:47:03 +0100,0.02068287,0.02068287,file producer - NIO transferTo 2gb bug in jdk,It appears that the JDK have a limitation that transferTo with large files.http://72.5.124.102/thread.jspa?threadID=5205184&amp;messageID=9822064See nabblehttp://old.nabble.com/camel-casts-exception-when-there-is-nothing-to-fetch-from-the-ftp-endpoint-to26541447.htmlThe code should be in a loop and transfer in chunks.,2.0.0,2.1.0,0,0,30,1,2,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileToFileNioLowBufferTest.java;,0,0
2237,Bug,Closed,Fixed,camel-mina,Major,Dmytro Rud,2009/11/30 10:46:44 +0100,2009/11/30 13:39:08 +0100,Martin Krasser,2009/12/01 15:31:16 +0100,1.197592593,1.07787037,Improper ordering of MINA filters,When we want to use SSL on the consumer side  MINA's SSLFilter must be inserted as the very first filter into the chain (or  at least  as the second one after an ExecutorFilter)  but it is currently not possible  because MinaComponent#createSocketEndpoint() always inserts a ProtocolCodecFilter at the very beginning by calling configureCodecFactory().A proposed workaround is to introduce an additional URL parameter noDefaultCodec which prohibits the installation of the default protocol codec filter. The protocol codec must be then configured manually  e.g. using Spring:&lt;bean id='sslFilter' class='org.apache.mina.filter.SSLFilter'&gt; &lt;constructor-arg&gt; &lt;bean class='javax.net.ssl.SSLContext' factory-method='getDefault' /&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;&lt;bean id='codecFilter' class='org.apache.mina.filter.codec.ProtocolCodecFilter'&gt; &lt;constructor-arg ref='hl7codec' /&gt;&lt;/bean&gt;&lt;bean id='hl7codec' class='org.apache.camel.component.hl7.HL7MLLPCodec' /&gt;&lt;bean id='minaFilters' class='java.util.ArrayList'&gt; &lt;constructor-arg&gt; &lt;list value-type='org.apache.mina.common.IoFilter'&gt; &lt;ref bean='sslFilter' /&gt;  &lt;ref bean='codecFilter' /&gt;  &lt;/list&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;After that  the consumer endpoint URL can look likefrom('mina:tcp://0.0.0.0:8888?sync=true&amp;lazySessionCreation=true&amp;noDefaultCodec=true&amp;filters=#minaFilters').I am not sure whether this approach is optimal  therefore I call it 'workaround' and not 'solution'. The corresponding patch is attached.,2.1.0,2.2.0,0,0,143,1,10,2,0,0,0,0,0,0,1,4,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConfiguration.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaFiltersTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaNoDefaultCodecTest.java;,0,0
2240,Improvement,Closed,Fixed,,Major,Hadrian Zbarcea,2009/12/01 03:24:45 +0100,2009/12/01 03:24:45 +0100,Hadrian Zbarcea,2009/12/01 04:20:29 +0100,0.038703704,0.038703704,Ridiculously long release time due to the javadoc plugin,Ridiculously long release time due to the javadoc plugin,2.1.0,2.1.0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,,0,0
2245,Bug,Closed,Fixed,,Major,Jonathan Anstey,2009/12/01 20:11:08 +0100,2009/12/01 20:11:08 +0100,Jonathan Anstey,2009/12/01 20:20:05 +0100,0.006215278,0.006215278,Routing slip does not stop when Exchange is failed,Routing slip does not stop when Exchange is failed,1.6.2; 2.0.0,1.6.3; 2.2.0,0,0,1,1,5,2,0,1,0,0,0,1,1,3,camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipWithErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipWithExceptionTest.java;,0,0
2255,Bug,Closed,Fixed,,Major,Willem Jiang,2009/12/04 09:20:59 +0100,2009/12/04 09:20:59 +0100,Willem Jiang,2009/12/04 09:36:58 +0100,0.011099537,0.011099537,camel-example-etl throw error when running it.,Here is the stack trace.[ Camel thread 0: JpaComponent] JuelExpression DEBUG Noimpl class for juel ExpressionFactory defined in'META-INF/services/org/apache/camel/component/el'org.apache.camel.NoFactoryAvailableException: Could not find factory classfor resource: META-INF/services/org/apache/camel/component/juel atorg.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:135) atorg.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:77) atorg.apache.camel.language.juel.JuelExpression.getExpressionFactory(JuelExpression.java:81) atorg.apache.camel.language.juel.JuelExpression.evaluate(JuelExpression.java:70) atorg.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:94) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) atorg.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) atorg.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223) atorg.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153) atorg.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91) atorg.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) atorg.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206) at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) atorg.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) atorg.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) atorg.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) atorg.apache.camel.component.jpa.JpaConsumer.processBatch(JpaConsumer.java:133) atorg.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:86) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:81) atorg.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184) atorg.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:147) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:79) atorg.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) atorg.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:77) atorg.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:70) atorg.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108) atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) atjava.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) atjava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619),2.2.0,2.2.0,0,0,77,1,1,1,0,0,0,0,0,0,1,1,components/camel-juel/src/main/java/org/apache/camel/language/juel/JuelExpression.java;,0,0
2269,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/12/09 06:47:29 +0100,2009/12/09 06:47:29 +0100,Claus Ibsen,2009/12/09 08:40:13 +0100,0.078287037,0.078287037,doCatch() - Without any exception given should report that as a problem,Code like this .doTry() .to('mock:b') .throwException(new IllegalArgumentException('Damn')) .doCatch() .to('mock:catch') .end();Should report a failure in the route as doCatch must have at least 1 exception as parameter.It should correctly be .doCatch(Exception.class)We could also consider using Excpetion.class as default but in Java you must also provide the exception to catch and thus its more intuitive if its 100% like Java,2.0.0; 2.1.0,2.2.0,0,0,70,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/CatchDefinition.java;camel-core/src/test/java/org/apache/camel/processor/TryCatchMustHaveExceptionConfiguredTest.java;,0,0
2276,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2009/12/10 12:24:19 +0100,2009/12/10 12:24:19 +0100,Claus Ibsen,2009/12/10 12:32:28 +0100,0.005659722,0.005659722,seda component - Support no timeout for task to complete using timeout 0 or negative,See nabblehttp://old.nabble.com/SEDA-Timeout-ts26724664.html,2.1.0,2.2.0,0,0,5,1,1,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducer.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaTimeoutDisabledTest.java;,0,0
2292,Bug,Closed,Fixed,,Major,Hadrian Zbarcea,2009/12/15 16:18:02 +0100,2009/12/16 08:51:55 +0100,Claus Ibsen,2009/12/29 03:01:00 +0100,13.44650463,12.75630787,RejectedExecutionException after restarting camel context,User reported over the #camel channel the following exception trying to send a message after the context was stopped and restarted 'Failed to create Producer for endpoint:'. Thats the exception I'm gettingReason: java.util.concurrent.RejectedExecutionExceptionException in thread 'core' org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[activemq://queue:request.lavaOrderProducer.powerTraderServer]. Reason: java.util.concurrent.RejectedExecutionException at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116) at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175) at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179) at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97) at com.wjb.producer.lavaData.dispatcher.ServerRequestDispatcher.requestSymbolSectorArray(ServerRequestDispatcher.java:122) at com.wjb.producer.core.LavaDataManager.initialize(LavaDataManager.java:64) at com.wjb.producer.core.ProducerCore.run(ProducerCore.java:98) at java.lang.Thread.run(Thread.java:619)Caused by: java.util.concurrent.RejectedExecutionException at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1760) at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767) at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:216) at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:366) at org.apache.camel.util.DefaultTimeoutMap.schedulePoll(DefaultTimeoutMap.java:156) at org.apache.camel.util.DefaultTimeoutMap.&lt;init&gt;(DefaultTimeoutMap.java:52) at org.apache.camel.component.jms.requestor.Requestor.&lt;init&gt;(Requestor.java:68) at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:107)The following unit tests seems to reproduce the problem:ublic final class StartStopTest { private final GenericApplicationContext applicationContext = new GenericApplicationContext(); private final int testCount = 3; @Test public void test() throws Exception { //Initialize final File propertiesFile = new File(Constants.RESOURCE_DIRECTORY_NAME  Constants.PROPERTIES_FILE_NAME); PropertyConfigurator.configure(propertiesFile.getPath()); final File applicationContextFile = new File(Constants.RESOURCE_DIRECTORY_NAME  Constants.CONTEXT_FILE_NAME); final Resource applicationContextResource = new FileSystemResource(applicationContextFile); final AbstractBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(this.applicationContext); beanDefinitionReader.loadBeanDefinitions(applicationContextResource); this.applicationContext.refresh(); //Begin Testing for (int i = 0; i &lt; this.testCount; i++) { this.startSendStop(); Thread.sleep(3000); } } private void startSendStop() throws Exception { final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME); final ProducerTemplate producerTemplate; final Endpoint serverRequestQueue; springCamelContext.start(); producerTemplate = springCamelContext.createProducerTemplate(); serverRequestQueue = springCamelContext.getEndpoint('serverRequestQueue'); final Exchange exchange = producerTemplate.send(serverRequestQueue  new Processor() { public void process(final Exchange exchange) throws Exception { exchange.setPattern(ExchangePattern.InOut); exchange.getIn().setHeader(ServerJmsServices.REQUEST  ServerJmsServices.GET_SYMBOL_INFO); exchange.getIn().setBody(''); } }); final String responseString = (String)exchange.getOut().getBody(); Assert.assertTrue(responseString.length() &gt; 0); springCamelContext.stop(); }}&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;beans xmlns='http://www.springframework.org/schema/beans'  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:camel='http://camel.apache.org/schema/spring' xsi:schemaLocation='http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd'&gt; &lt;!-- ActiveMQ component for Camel to use --&gt; &lt;bean id='activemq' class='org.apache.activemq.camel.component.ActiveMQComponent' &gt; &lt;property name='connectionFactory'&gt; &lt;bean class='org.apache.activemq.ActiveMQConnectionFactory'&gt; &lt;property name='brokerURL' value='tcp://192.168.5.10:61616?daemon=true' /&gt; &lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- Camel Context --&gt; &lt;camelContext id='camelContext' xmlns='http://camel.apache.org/schema/spring' autoStartup='false'&gt;  &lt;camel:endpoint id='serverRequestQueue' uri='activemq:queue:request.lavaOrderProducer.powerTraderServer' /&gt; &lt;/camelContext&gt;&lt;/beans&gt;,2.1.0,2.2.0,1,0,357,1,5,2,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsInOutWithSpringRestartIssueTest.java;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/JmsInOutWithSpringRestartIssueTest.xml;,0,0
2295,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/12/16 13:34:30 +0100,2009/12/16 13:34:30 +0100,Claus Ibsen,2009/12/16 15:44:09 +0100,0.090034722,0.090034722,ExceptionHandler - Let it be able to log additional information such as a custom message or current exchange,This will output better exceptions in the logs when using the default exception handler which just logs it.The ExceptionHandler is used in consumers (polling  event driven) which cant send the exception back to a client and thus must handle it somehowand best shot is to log it  but you can plugin your own handler if you like,2.1.0,2.2.0,0,0,57,1,1,1,0,0,0,0,0,0,1,14,camel-core/src/main/java/org/apache/camel/CamelExchangeException.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java;camel-core/src/main/java/org/apache/camel/impl/LoggingExceptionHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/spi/ExceptionHandler.java;camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/test/java/org/apache/camel/issues/CharlesSplitAndTryCatchRollbackIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStopOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/MulticastStopOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/RollbackCustomMessageTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterParallelStopOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterStopOnExceptionTest.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;,0,0
2303,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2009/12/18 13:10:15 +0100,2009/12/18 13:10:15 +0100,Claus Ibsen,2009/12/18 14:12:44 +0100,0.043391204,0.043391204,GroupedExchange in Aggregator is not working correctly,See nabblehttp://old.nabble.com/Help%21-org.apache.camel.impl.GroupedExchange-does-not-exist-in-the-latest-download-ts26841584.html,2.0.0; 2.1.0,2.2.0,0,0,5,1,1,1,0,0,0,0,0,1,1,5,camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateGroupedExchangeBatchSizeTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateGroupedExchangeMultipleCorrelationTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateGroupedExchangeTest.java;,0,0
2308,Improvement,Closed,Fixed,camel-ftp,Major,Edson CImionatto,2009/12/21 15:39:38 +0100,2009/12/22 06:31:36 +0100,Claus Ibsen,2009/12/22 06:40:54 +0100,0.62587963,0.006458333,StrictHostKeyChecking Url Option,Camel users will appreciate a new url option that sets JSch Session StrictHostKeyChecking to 'no' . Preferably  this new option will work just like URI Options knownHosts. This improvement will facilitate bypass sftp/ssh key authentication.,2.0.0; 2.1.0,2.2.0,0,0,36,1,7,2,0,0,0,0,0,0,1,2,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConfiguration.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
2310,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2009/12/22 12:07:57 +0100,2009/12/22 12:07:57 +0100,Claus Ibsen,2009/12/22 12:11:36 +0100,0.002534722,0.002534722,UnitOfWork - Must be done in finally to ensure even when java.lang.Error is thrown fore reliable shutdown,This helps to keep in flight registry up-to-date even when java.lang.Error is thrown  such as when people use JUnit assertions.,2.1.0,2.2.0,0,0,20,1,1,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java;,0,0
2318,Bug,Closed,Fixed,camel-bindy,Minor,Willem Jiang,2009/12/24 10:25:29 +0100,2009/12/24 10:25:29 +0100,Willem Jiang,2009/12/24 10:35:10 +0100,0.006724537,0.006724537,camel-bindy dataformat KeyValue DSL can't work,When you set the bindy dataformat with below DSL   you will get the error that camel can't find the DataFormat.   public void configure() { from('direct:start').marshal() .bindy(BindyType.KeyValue  'org.apache.camel.dataformat.bindy.model.fix.simple') .to('mock:result'); },2.0-M1; 2.0-M2; 2.0-M3; 2.0.0; 2.1.0,2.2.0,0,0,45,1,1,1,1,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/model/dataformat/BindyDataFormat.java;,0,0
2319,Bug,Closed,Fixed,,Minor,Claus Ibsen,2009/12/24 10:42:04 +0100,2009/12/24 10:42:04 +0100,Claus Ibsen,2009/12/24 10:42:43 +0100,0.000451,0.000451,camel-cache - Missing some classes in .jar,See nabblehttp://old.nabble.com/Camel-Cache%3A-Processors-not-released--ts26908653.html,2.1.0,2.2.0,0,0,5,1,1,1,1,0,0,0,0,0,1,1,components/camel-cache/pom.xml;,0,0
2320,Bug,Closed,Fixed,camel-jdbc,Minor,Pradeep Elankumaran,2009/12/24 19:11:03 +0100,2009/12/25 09:50:46 +0100,Claus Ibsen,2009/12/25 09:53:21 +0100,0.612708333,0.001793981,JDBC component doesn't preserve headers,JDBC component doesn't preserve any of the headers that are sent into it,2.1.0,2.2.0,0,1,13,1,4,2,1,0,0,0,0,0,1,2,components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcPreserveHeadersTest.java;,0,0
2327,Bug,Closed,Fixed,,Minor,Willem Jiang,2010/01/02 05:59:03 +0100,2010/01/02 05:59:03 +0100,Willem Jiang,2010/01/02 06:13:25 +0100,0.009976852,0.009976852,The NP check of the remote service is wrong in CamelServiceExporter,We should check the export service instead of the camelContext.&#8212; components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(revision 895109)+++ components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(working copy)@@ -83 7 +83 7 @@ } Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext  uri); notNull(camelContext  'service');+ notNull(getService()  'service'); Object proxy = getProxyForService(); consumer = endpoint.createConsumer(new BeanProcessor(proxy  camelContext));,1.4.0; 1.5.0; 1.6.0; 2.0-M1; 1.6.1; 1.6.2; 2.0-M2; 2.0-M3; 2.0.0; 2.1.0,1.6.3; 2.2.0,0,0,38,1,1,1,1,1,0,0,0,0,1,1,components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.java;,0,0
2335,Improvement,Closed,Fixed,,Minor,Claus Ibsen,2010/01/05 15:18:38 +0100,2010/01/05 15:29:55 +0100,Claus Ibsen,2010/01/05 15:50:50 +0100,0.022361111,0.014525463,The  in Spring XML should support using serviceRef to lookup a reference for an endpoint,Even though people can use the ref component  but that is hardly technique.So you can do using serviceRef to refer to the endpoint &lt;!-- create a proxy that will route to the direct:start endpoint when invoked --&gt; &lt;proxy id='myProxySender' serviceInterface='org.apache.camel.spring.config.MyProxySender' serviceRef='cool'/&gt; &lt;!-- define the endpoint we want to proxy --&gt; &lt;endpoint id='cool' uri='direct:start'/&gt;,2.1.0,2.2.0,0,0,70,1,1,1,1,0,0,0,0,0,1,5,components/camel-spring/src/main/java/org/apache/camel/spring/CamelProxyFactoryDefinition.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelProxyFactoryBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelProxyUsingRefTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/CamelProxyUsingRefTest.xml;,0,0
2338,Improvement,Closed,Fixed,camel-spring,Trivial,Claus Ibsen,2010/01/06 12:26:59 +0100,2010/01/06 12:26:59 +0100,Claus Ibsen,2010/01/06 12:35:24 +0100,0.005844907,0.005844907,package will log WARN that you should use packageScan instead. We should keep both options so remove the WARN,&#91;2010-01-06 11:32:35.494&#93; server-dm-7 org.apache.camel.spring.CamelContextFactoryBean.unknown W Using a packages element to specify packages to search has been deprecated. Please use a packageScan element instead.,2.0.0; 2.1.0,2.2.0,0,0,24,1,1,1,1,1,0,0,0,0,2,14,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/UseOriginalAggregationStrategy.java;camel-core/src/main/java/org/apache/camel/util/AsyncProcessorHelper.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointMulticastFineGrainedErrorHandlingTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointMulticastTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointRecipientListFineGrainedErrorHandlingTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointSplitTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointSplitUseLatestAggregationStrategyTest.java;camel-core/src/test/java/org/apache/camel/processor/async/MyAsyncProducer.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;,0,0
2344,Improvement,Closed,Fixed,camel-mail,Trivial,Joern Kottmann,2010/01/07 21:15:35 +0100,2010/01/08 06:54:37 +0100,Claus Ibsen,2010/01/08 06:54:37 +0100,0.402106481,0,MailConsumer should log exception in processRollback,The MailConsumer logs in the rollback case the exchange (line 162 in revision 893983) but the exchange contains (usually ?) an exception which is not logged.In my case the exception is thrown from a custom Expression which splits a mail message.Only a rollback warning which contains the headers of the mail message is logged which makes finding the actual cause difficult.,2.0.0,2.2.0,0,0,61,1,1,1,0,0,0,0,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;,0,0
2348,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/01/11 14:32:41 +0100,2010/01/11 14:32:41 +0100,Claus Ibsen,2010/01/11 15:52:44 +0100,0.055590278,0.055590278,EventNotifier - Make it easy to ignore unwanted event categories,The current EventNotifier is a bit sparse. It should have a bunch of ignoreXXX events to filter by category. In case you do not want certain types etc.Also it can be used to configure it to only report failures which is interesting if you want to alert that to a monitoring system.,2.1.0,2.2.0,0,0,52,1,1,1,1,0,0,0,0,0,1,18,camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/management/DefaultEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/EventNotifierSupport.java;camel-core/src/main/java/org/apache/camel/management/LoggingEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/event/ExchangeCompletedEvent.java;camel-core/src/main/java/org/apache/camel/management/event/ExchangeCreatedEvent.java;camel-core/src/main/java/org/apache/camel/management/event/ExchangeFailureEvent.java;camel-core/src/main/java/org/apache/camel/management/event/ExchangeFailureHandledEvent.java;camel-core/src/main/java/org/apache/camel/spi/EventNotifier.java;camel-core/src/main/java/org/apache/camel/util/EventHelper.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierEventsTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierFailreHandledEventsTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierServiceStoppingFailedEventTest.java;camel-core/src/test/java/org/apache/camel/management/LoggingEventNotifierTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/management/MyEventNotifier.java;components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.xml;,0,0
2352,Improvement,Closed,Fixed,camel-jdbc,Minor,Claus Ibsen,2010/01/12 08:15:07 +0100,2010/01/12 08:15:07 +0100,Claus Ibsen,2010/01/12 08:26:52 +0100,0.008159722,0.008159722,camel-jdbc - Add option to select between JDBC 4 or 3 column label / name semantics,JDBC drivers is often a pain when it comes to compliance.If you use SQL SELECT with aliases then you may have issues with camel-jdbc as it retrieves the column name use ResultSetMetaData which behaves different according to the JDBC spec.See more at:http://fusesource.com/forums/thread.jspa?messageID=5623&amp;#5623Introduce a new option useJDBC4ColumnNameAndLabelSemantics where you can configure which option to use. Will by default use JDBC 4,1.6.2; 2.1.0,1.6.3; 2.2.0,0,0,63,1,1,1,1,1,0,0,0,0,1,5,components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcComponent.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteUsingSqlSelectAliasJdbc3Test.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteUsingSqlSelectAliasTest.java;,0,0
2361,Improvement,Closed,Fixed,camel-core,Minor,Simon,2010/01/14 12:46:40 +0100,2010/01/15 09:32:59 +0100,Claus Ibsen,2010/01/15 10:04:12 +0100,0.887175926,0.021678241,Keep the lastModified timestamp when writing a file,&gt;&gt; I do the following:&gt;&gt;&gt; 'ftp://tata@.../ftp.input?&amp;recursive=true&amp;binary=true&amp;consumer.delay=1000')&gt; .to('file://M:/FTP.INPUT/');&gt;&gt; I would like to have my file in transfered and keeping their&gt; lastModifiedTime. I wonder if a flag is available for that ? Another&gt; solution would be to get it from the Message and do it programmatically.&gt;... &#91;show rest of quote&#93;HiGood idea. Notice that the timestamp from the FTP library is often not100% accurate down to the seconds.Could you create a ticket in JIRA for this feature request?http://issues.apache.org/activemq/browse/CAMEL,2.1.0,2.2.0,0,0,79,1,1,1,1,0,0,0,0,0,1,8,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/builder/FileExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileKeepLastModifiedTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpKeepLastModifiedTest.java;,0,0
2363,Bug,Closed,Fixed,,Major,Ashwin Karpe,2010/01/14 19:42:51 +0100,2010/01/14 19:42:51 +0100,Ashwin Karpe,2010/01/15 06:06:52 +0100,0.433344907,0.433344907,Remove sample caches from Camel Cache component,Camel Cache has sample caches created by the component via its ehCache settings.These should not be created in order to avoid unnecessary taking up of ports by the sample caches.,2.1.0,2.2.0,0,0,30,1,2,2,1,0,0,0,1,0,1,1,components/camel-cache/src/main/resources/ehcache.xml;,0,0
2368,Improvement,Closed,Fixed,camel-core,Minor,Michael Mathers,2010/01/16 01:08:06 +0100,2010/01/16 13:45:13 +0100,Claus Ibsen,2010/01/16 14:00:22 +0100,0.536296296,0.010520833,Bean Expression for Non Registry beans can't reference an instance,The documentation at the bottom of this page: http://camel.apache.org/bean-language.html says that I can use the bean expression DSL to work with beans that are not in the registry in two different ways (2.0-M2+). Specify Class/method and Camel will create a new instance of the bean and call the method. Specify instance/method and Camel will use the the specified instance and call the method.In fact  the doc shows examples of both:Method 1) from('activemq:topic:OrdersTopic'). filter().expression(bean(MyBean.class  'isGoldCustomer')). to('activemq:BigSpendersQueue');Method 2) private MyBean my; from('activemq:topic:OrdersTopic'). filter().expression(bean(my  'isGoldCustomer')). to('activemq:BigSpendersQueue');I am unable to do the latter (#2) as the methods are not defined. I'm using Camel 2.1.0 but I've tried 2.0.0 as well. So either the doc is wrong or the methods are missing/not visible. My code specifically is:private Object list;...from (getErrorEndpoint()) .recipientList(list  'getRecipients');Yes  there are easy ways to avoid this. But I prefer not to have to create more XML and/or specify a Class name here.Finally  is there a good reason '.recipientList()' isn't overloaded to take an Endpoint[] instead of only an Expression? The @RecipientList annotation seems to anticipate this form but there doesn't seem to be a good way to plug the @RecipientList annotated bean into the route definition. Even if the bean is in the registry it looks as if you still have to supply the method name anyway despite that its already annotated (unless you also annotate with @Handler which might be undesirable). Ideally  I could have...Object list = new Object() { @RecipientList public Collection&lt;Endpoint&gt; getRecipents(Object body) {... }}...from (endpoint).recipientList(&lt;any instance annotated with @RecipientList&gt;)or even// Look for method 'errors' then look for annotation @RecipientList('errors')from (endpoint).recipientList( bean  'errors' )Is this making any sense? (I'm still very wet behind the ears),2.0.0; 2.1.0,2.2.0,0,0,337,1,8,2,1,1,0,0,0,0,3,9,camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListNoMethodNameTest.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/FilterBeanLanguageNonRegistryTest.java;camel-core/src/main/java/org/apache/camel/builder/Builder.java;camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionClause.java;camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/FilterBeanNonRegistryTest.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/FilterBeanRegistryTest.java;,0,0
2375,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/01/18 16:39:09 +0100,2010/01/18 16:39:09 +0100,Claus Ibsen,2010/01/18 18:15:58 +0100,0.067233796,0.067233796,Let ExpressionClause be reusable by other builders which are not route based,Allows you to use all the expressions from ExpressionClause which has many  on other builders which are not tied to the route models.For example at mock  notify builder and elsewhere,2.0.0; 2.1.0,2.2.0,0,0,30,1,1,1,1,1,0,0,0,0,1,14,camel-core/src/main/java/org/apache/camel/builder/ExpressionClause.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionClauseSupport.java;camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;camel-core/src/main/java/org/apache/camel/component/mock/AssertionClause.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/model/language/ExpressionDefinition.java;camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/main/java/org/apache/camel/model/language/NamespaceAwareExpression.java;camel-core/src/main/java/org/apache/camel/model/language/TokenizerExpression.java;camel-core/src/main/java/org/apache/camel/model/language/XPathExpression.java;camel-core/src/main/java/org/apache/camel/model/language/XQueryExpression.java;camel-core/src/test/java/org/apache/camel/builder/NotifyBuilderTest.java;camel-core/src/test/java/org/apache/camel/component/mock/MockAssertionClauseTest.java;,0,0
2384,Improvement,Closed,Fixed,camel-core,Major,Preben Asmussen,2010/01/20 20:29:22 +0100,2010/01/29 07:11:59 +0100,Claus Ibsen,2010/01/29 09:01:25 +0100,8.522256944,0.07599537,camel-bean - CGLIB proxied classed having trouble using annotated bean bindings,Header value (and body) is not bound in pojo method:Route definiton: camel:route trace='true' id='RapNotificationRoute'&gt; &lt;camel:from uri='oracleQueue:queue:FURTHERELEMENTS_TEST?jmsMessageType=Text'/&gt; &lt;camel:transacted ref='PROPAGATION_REQUIRED'/&gt; &lt;camel:wireTap uri='seda:audit'/&gt; &lt;camel:to uri='mock:result'/&gt; &lt;/camel:route&gt; &lt;camel:route id='AuditRoute'&gt; &lt;camel:from uri='seda:audit'/&gt; &lt;camel:bean ref='auditMessageDAO' method='audit'/&gt; &lt;/camel:route&gt;auditMessageDAO interface: public void audit(@Body String body  @Header(value='JMSMessageID' String jmsMessageId)Trace from log when running: &#91;Camel thread 0: seda://audit&#93; 20 jan. 2010 - 12:22:09 858 INFO org.apache.camel.processor.interceptor.Tracer[42a5443b-0a62-4477-885f-c6f6c40274b1 &gt;&gt;&gt; (AuditRoute) from(seda://audit) --&gt; ref:auditMessageDAO method: audit &lt;&lt;&lt; Pattern:InOnly  Headers:{JMSDestination=PLAYLISTE.FURTHERELEMENTS_TEST  JMS_OracleDelay=0  JMSDeliveryMode=2  JMSRedelivered=true  JMS_OracleTimestamp=1263986526156  JMSType=null  JMSCorrelationID=null  JMSXRecvTimestamp=1263986529858  JMSXState=0  JMSXDeliveryCount=2  JMSMessageID=ID:7D97CBE346B7CAA2E040650A0A103AC2  JMSTimestamp=1263986526156  JMSPriority=1  JMSXGroupID=null  JMS_OracleDeliveryMode=2  JMSXUserID=playliste  JMSExpiration=0  JMSReplyTo=null}  BodyType:byte[]  Body:&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;&lt;Publication&gt;hidden&lt;/Publication&gt;]The exchange gets send (Evenen when using Oracle AQ)  to the seda:audit endpoint and the auditMessageDAO gets called. Body is bound to correct payload but the header element JMSMessageID is null. If i change the parameter to include @Headers Map the parameter is still null.Current workaround is to use the Message  or Exchange as parameter  but then my pojo will have dependencies on Camel - ok for now.See thread : http://old.nabble.com/wiretap-getting-header-value-ts27238444.html for further details.,2.1.0,2.2.0,0,1,172,1,14,2,1,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;components/camel-spring/pom.xml;components/camel-spring/src/test/java/org/apache/camel/spring/aop/ExceptionInterceptor.java;components/camel-spring/src/test/java/org/apache/camel/spring/aop/MyCoolAopBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/aop/SpringAopClassLevelCamelBeanTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/aop/SpringAopClassLevelCamelBeanTest.xml;,0,0
2388,Improvement,Closed,Fixed,camel-cxf,Major,Christian Schneider,2010/01/21 22:15:32 +0100,2010/01/22 02:32:19 +0100,Willem Jiang,2010/01/22 14:04:45 +0100,0.659178241,0.480856481,Remove some dependencies,While checking the dependencies of camel-cxf I found that some dependencies are at least not necessary to compile the project.I have attached a patch with the removed dependencies. The dependencies are:camel-springcxf-rt-transports-http-jetty,2.1.0,2.2.0,0,0,31,1,2,1,1,0,0,0,0,0,1,1,components/camel-cxf/pom.xml;,0,0
2392,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/01/22 12:17:10 +0100,2010/01/22 12:17:10 +0100,Claus Ibsen,2010/01/22 16:20:18 +0100,0.168842593,0.168842593,DefaultTypeConverterRegistry - Let it load upfront,This allows it to pre load all type converters on startup instead on demand. This also removes the need for synchronization at runtime as the converters are loaded up front.,2.1.0,2.2.0,0,0,30,1,1,1,0,0,0,0,1,0,3,9,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java;camel-core/src/test/java/org/apache/camel/converter/JaxpTest.java;camel-core/src/test/java/org/apache/camel/converter/StringSourceTest.java;camel-core/src/test/java/org/apache/camel/impl/MultipleLifecycleStrategyTest.java;examples/camel-example-cxf-async/src/main/resources/META-INF/spring/camel-client.xml;components/camel-jcr/src/test/java/org/apache/camel/component/jcr/JcrConverterTest.java;components/camel-scala/src/test/scala/org/apache/camel/scala/ScalaTypeConverterTest.scala;,0,0
2395,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/01/24 14:38:44 +0100,2010/01/24 14:38:44 +0100,Claus Ibsen,2010/01/24 17:23:26 +0100,0.114375,0.114375,file component - Using fileName option should better detect constant vs dynamic name,eg using fileName=header.txt makes Camel think its header with the name txt you want to use.,2.1.0,2.2.0,0,0,16,1,1,1,0,0,0,0,0,0,2,4,camel-core/src/test/java/org/apache/camel/component/file/FromFileMulticastToFilesTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerFilenameConstantTest.java;camel-core/src/test/java/org/apache/camel/component/file/FromFileMulticastToFilesTest.java;,0,0
2398,Improvement,Closed,Fixed,camel-core,Major,Kostyantyn Oliynyk,2010/01/25 04:00:26 +0100,2010/01/27 20:35:54 +0100,Claus Ibsen,2010/01/27 21:20:39 +0100,2.722372685,0.031076389,DefaultCamelContext starts route services out of order,org.apache.camel.impl.DefaultCamelContext uses HashMap to hold route servicesIn start() method it uses routeServices.values() to list route services.It does not work for Esper.Camel-extra Esper demo example for Esper  http://code.google.com/p/camel-extra/wiki/EsperDemo  creates 3 routes:1: Route[[From&#91;activemq:EventStreamQueue&#93;] -&gt; [To&#91;esper://feed&#93;]]2: Route[[From&#91;esper://feed?eql=insert into TicksPerSecond select feed  count(*) as cnt from com.iona.ps.demos.MarketDataEvent.win:time_batch(1 sec) group by feed&#93;] -&gt; [To&#91;esper://feed&#93;]]3: Route[[From&#91;esper://feed?eql=select feed  avg(cnt) from TicksPerSecond.win:time(10 sec) group by feed + having cnt &lt; avg(cnt) * 0.75&#93;] -&gt; [To&#91;esper://feed&#93;  process&#91;com.iona.ps.demos.MyRouteBuilder$1@1274069&#93;]]3-rd route depends on 2-nd route  it uses TicksPerSecond event type that gets created in route 2.DefaultCamelContext starts 3-rd route before 2-nd route  as a result Esper fails to resolve event type:com.espertech.esper.epl.expression.ExprValidationException: Failed to resolve event type: Event type or class named 'TicksPerSecond' was not found at com.espertech.esper.epl.spec.FilterStreamSpecRaw.resolveType(FilterStreamSpecRaw.java:189) at com.espertech.esper.epl.spec.FilterStreamSpecRaw.compile(FilterStreamSpecRaw.java:99) at com.espertech.esper.core.StatementLifecycleSvcImpl.compile(StatementLifecycleSvcImpl.java:956) at com.espertech.esper.core.StatementLifecycleSvcImpl.createStopped(StatementLifecycleSvcImpl.java:195) ... As a workaround  it is possible to change startup order by assigning custom ids to routes  so routeServices HashMap would return values in different order. Please  be advise that 3-rd route's From URI: 'esper://feed?eql=select feed  avg(cnt) from TicksPerSecond.win:time(10 sec) group by feed + having cnt &lt; avg(cnt) * 0.75' is modified original From URI from svn:'esper://feed?eql=select feed  avg(cnt) as avgCnt  cnt as feedCnt from TicksPerSecond.win:time(10 sec) group by feed + having cnt &lt; avg(avgCnt) * 0.75' It was done to resolve Esper compiling issue with avgCnt and feedCnt and has no impact on this reported Camel issue .,2.1.0,2.2.0,0,2,230,1,4,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRouteStartupOrder.java;camel-core/src/test/java/org/apache/camel/processor/RouteServicesStartupOrderTest.java;,0,0
2434,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2010/02/01 13:17:24 +0100,2010/02/01 13:17:24 +0100,Claus Ibsen,2010/02/01 13:21:46 +0100,0.003032407,0.003032407,Mock component - expected header and property should output the name that fails,So you know the name of the header which failed. Currently it just say: Header of message bla bla,2.0.0; 2.1.0,2.2.0,0,0,19,1,1,1,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/test/java/org/apache/camel/component/mock/MockEndpointTest.java;,0,0
2436,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/02/02 10:14:31 +0100,2010/02/02 10:14:31 +0100,Claus Ibsen,2010/02/02 12:59:10 +0100,0.114340278,0.114340278,BeanProcessor - Should differentiate between void and method returning null values,When invoking a bean method it should better detect whether the bean is a void or has a return type.And if it returns null it should be regarded as a valid response and set as body.See nabblehttp://old.nabble.com/filtering-messages-ts27403559.html,2.0.0; 2.1.0,2.2.0,0,0,40,1,1,1,0,1,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInvokeTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithPropertiesAndHeadersAndBodyInjectionTest.java;camel-core/src/test/java/org/apache/camel/component/bean/issues/FilterPojoIssueTest.java;,0,0
2447,Bug,Closed,Fixed,camel-cxf,Major,Willem Jiang,2010/02/04 03:45:52 +0100,2010/02/04 03:45:52 +0100,Willem Jiang,2010/02/04 04:38:16 +0100,0.036388889,0.036388889,cxfbean should  propagate CONTENT_TYPE for other camel component to use,There is no 'content-type' header return from the below route &lt;route&gt; &lt;from uri='jetty:http://localhost:9006/employeesBase?matchOnUriPrefix=true'/&gt; &lt;to uri='cxfbean:EmployeesPOJO'/&gt; &lt;/route&gt;,2.0-M3; 2.0.0; 2.1.0,2.2.0,0,0,27,1,1,1,0,1,0,0,0,0,1,2,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/DefaultCxfBeanBinding.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/cxfbean/CxfBeanTest.java;,0,0
2452,Bug,Closed,Fixed,camel-http,Major,Christian M?ller,2010/02/06 14:56:38 +0100,2010/02/06 14:56:38 +0100,Christian M?ller,2010/11/03 23:04:04 +0100,270.3384954,270.3384954,HttpHeaderFilterStrategy dosn't filters out 'Cache-Control'  'Connection'  'Pragma'  'Trailer'  'Transfer-Encoding'  'Upgrade'  'Via' and 'Warning' in method applyFilterToCamelHeaders,HttpHeaderFilterStrategy uses the HTTP headers with upper case characters on the beginning (e. g. 'Transfer-Encoding' instead of 'transfer-encoding').,2.1.0,2.3.0,0,0,18,1,11,3,0,0,0,0,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/HttpHeaderFilterStrategy.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpHeaderFilterStrategyTest.java;,0,0
2456,Bug,Closed,Fixed,camel-jms,Minor,Willem Jiang,2010/02/10 03:13:00 +0100,2010/02/10 03:13:00 +0100,Willem Jiang,2010/02/12 08:09:03 +0100,2.205590278,2.205590278,WARNING log of JmsTemporaryTopicEndpoint   JmsTemporaryQueueEndpoint don't have the ManagedResource annotation,Here is the mail thread which discusses about this issue.http://old.nabble.com/Attemp-to-send-message-to-activemq-temporary-queue-using-producerTemplate%3A-InvalidMetadataException-tp27520096p27520096.html,2.1.0,2.3.0,0,0,13,1,9,2,0,0,0,0,0,0,2,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryQueueEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryTopicEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryQueueEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryTopicEndpoint.java;,0,0
2458,Bug,Closed,Fixed,camel-http,Minor,Christian M?ller,2010/02/10 18:39:09 +0100,2010/02/10 18:39:09 +0100,Christian M?ller,2010/02/11 06:39:20 +0100,0.500127315,0.500127315,HttpHeaderFilterStrategy should filter the HTTP 'Date' header when applyFilterToCamelHeaders is called,See rfc2616.,2.1.0,2.3.0,0,0,5,1,3,3,0,0,0,0,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/HttpHeaderFilterStrategy.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpHeaderFilterStrategyTest.java;,0,0
2471,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/02/15 18:27:52 +0100,2010/02/18 15:01:36 +0100,Claus Ibsen,2010/02/18 15:01:36 +0100,2.856759259,0,seda endpoint - Let it be easily to configure size option to use an unbounded queue,Instead of having 1000 as the default size we should let it be unbounded by default and let people set a size if they really want that,2.0.0; 2.1.0; 2.2.0,2.3.0,0,0,27,1,4,1,0,1,0,0,0,0,2,6,camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaDefaultUnboundedQueueSizeTest.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaEndpointTest.java;,0,0
2476,Bug,Closed,Fixed,camel-velocity,Minor,Abdellatif,2010/02/17 10:01:27 +0100,2010/02/17 13:21:12 +0100,Christian M?ller,2010/02/17 16:55:59 +0100,0.28787037,0.149155093,Camel Velocity: change the case of all fields properties Header,Using the velocity component doesn't respect the case matching of all fields of the header.For example: the exchange of properties CorrelationID change the case matching  after using velocity component  it puts the property in lowercase correlationid.,2.1.0,2.3.0,0,0,36,2,5,3,0,0,0,0,0,0,1,2,components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityTemplateInHeaderTest.java;,0,0
2477,Bug,Closed,Fixed,,Minor,Abdellatif,2010/02/17 10:04:20 +0100,2010/02/17 13:42:09 +0100,Christian M?ller,2010/02/17 17:06:33 +0100,0.293206019,0.141944444,Camel Freemarker: change the case of all fields properties Header,Using the Freemarker component doesn't respect the case matching of all fields of the header.For example: the exchange of properties CorrelationID change the case matching  after using Freemarker component  it puts the property in lowercase correlationid.,2.1.0,2.3.0,0,0,36,2,5,3,0,0,0,0,0,0,1,2,components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/FreemarkerEndpoint.java;components/camel-freemarker/src/test/java/org/apache/camel/component/freemarker/FreemarkerTemplateInHeaderTest.java;,0,0
2483,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/02/18 08:54:28 +0100,2010/02/18 08:54:28 +0100,Claus Ibsen,2010/02/18 08:55:05 +0100,0.000428,0.000428,NotifyBuilder - add reset method,Add a reset() method,2.2.0,2.3.0,0,0,4,1,2,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;camel-core/src/test/java/org/apache/camel/builder/NotifyBuilderTest.java;,0,0
2486,Bug,Closed,Fixed,camel-core,Minor,Michael Mathers,2010/02/18 21:37:04 +0100,2010/02/19 09:59:35 +0100,Claus Ibsen,2010/02/19 11:45:49 +0100,0.589409722,0.073773148,DefaultCamelContext throws NPE in start() for route with no destination,Not easy to track down when you have a lot of routes. This might be new with the introduction of StartupRouteHolder (I think that was introduced in 2.1  right?)public class TriggerNPETest extends CamelTestSupport { @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() { // This will generate an NPE on DefaultCamelContext.start() (line 973) // If this is an invalid route a proper message should be given far before  // this and/or NPE should be tested on line 973 from('direct:psd.nowhere'); } }; } @Test public void testme() throws Exception { Thread.sleep(10000); }}java.lang.NullPointerException at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:973) at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:145) at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:98) // now start the inputs for all the route services as we have prepared Camel // yeah open the floods so messages can start flow into Camel for (Map.Entry&lt;Integer  StartupRouteHolder&gt; entry : inputs.entrySet()) { Integer order = entry.getKey(); Route route = entry.getValue().getRoute(); // &lt;&lt;&lt;------- Right here.,2.1.0,2.3.0,0,1,187,1,2,1,0,0,0,1,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/bean/BeanExpression.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/test/java/org/apache/camel/impl/FromHasNoOutputRouteTest.java;,0,0
2492,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/02/22 13:10:14 +0100,2010/02/22 13:10:14 +0100,Claus Ibsen,2010/02/22 14:08:15 +0100,0.040289352,0.040289352,PollingConsumerPollStrategy - Should support boolean on begin to support skipping polling,See nabblehttp://old.nabble.com/File-Consumer-with-dynamic-list-of-files-to-poll-ts27683938.htmlAnd wiki pagehttp://camel.apache.org/polling-consumer.html,2.0.0; 2.1.0; 2.2.0,2.3.0,1,1,10,1,2,1,1,1,0,0,0,0,1,8,camel-core/src/main/java/org/apache/camel/impl/DefaultPollingConsumerPollStrategy.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/spi/PollingConsumerPollStrategy.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyNotBeginTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyRollbackThrowExceptionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyStopOnRollbackTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyTest.java;camel-core/src/test/java/org/apache/camel/impl/ScheduledPollConsumerTest.java;,0,0
2514,Bug,Closed,Fixed,karaf,Major,Freeman Fang,2010/03/02 08:37:10 +0100,2010/03/02 08:47:11 +0100,Willem Jiang,2010/03/02 09:44:38 +0100,0.046851852,0.039895833,karaf features.xml  should use servicemix commons-pool bundle,as commons-pool/commons-pool/1.5.4 osgi manifest header isn't correct  which shouldn't import org.apache.commons.pool package.SMX4-491&#91;1&#93; create servicemix wrapper bundle to fix this issue  so the karaf features.xml should use servicemix wrapper bundle&#91;1&#93;https://issues.apache.org/activemq/browse/SMX4-491,1.6.2; 2.0-M2; 2.0-M3; 2.0.0; 2.1.0; 2.2.0,1.6.3; 2.3.0,0,0,42,1,3,3,0,1,0,0,0,0,1,2,platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
2526,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2010/03/05 10:09:56 +0100,2010/04/02 13:13:18 +0100,Ashwin Karpe,2010/04/02 17:27:16 +0100,28.3037037,0.176365741,SedaConsumer - Add check to limit the concurrentConsumer to < 1000 to prevent mistypes,If you enter concurrentConsumers=99999999 then Camel creates a lot of threads for concurrent consumers on the SEDA queue.We should validate the size is a reasonable value  at least &lt; 1000. Maybe limit to &lt; 500,2.0.0; 2.1.0; 2.2.0,2.3.0,0,0,35,1,7,2,0,1,0,0,1,0,2,2,camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;,0,0
2528,Bug,Closed,Fixed,karaf,Major,Freeman Fang,2010/03/08 04:36:23 +0100,2010/03/08 04:40:50 +0100,Willem Jiang,2010/03/10 11:02:16 +0100,2.267974537,2.264884259,should use servicemix jaxws 2.1 spec bundle but not the geronimo one,otherwise will see the exception like javax.xml.ws.spi.FactoryFinder$ConfigurationError: Provider org.apache.axis2.jaxws.spi.Provider not foundat javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java:122)at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:42)at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)at javax.xml.ws.spi.Provider.provider(Provider.java:39)at javax.xml.ws.Service.&lt;init&gt;(Service.java:36),2.2.0,2.3.0,0,1,20,1,3,3,0,0,0,0,0,0,1,2,platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
2529,Bug,Closed,Fixed,camel-jms,Major,Willem Jiang,2010/03/08 11:18:12 +0100,2010/03/08 11:18:12 +0100,Willem Jiang,2010/03/08 14:35:25 +0100,0.136956019,0.136956019,ConsumerTemplate don't support the jms uri with selector,This unit test can shows the issue that selector option don't work for ConsumerTemplate@Test public void testConsumerTemplate() throws Exception { template.sendBodyAndHeader('activemq:queue:consumer'  'Message1'  'SIZE_NUMBER'  1505); template.sendBodyAndHeader('activemq:queue:consumer'  'Message3'  'SIZE_NUMBER'  1300); template.sendBodyAndHeader('activemq:queue:consumer'  'Message2'  'SIZE_NUMBER'  1600); // process every exchange which is ready. If no exchange is left break // the loop while (true) { Exchange ex = consumer.receiveNoWait('activemq:queue:consumer?selector=SIZE_NUMBER&lt;1500'); if (ex != null) { Message message = ex.getIn(); int size = message.getHeader('SIZE_NUMBER'  int.class); assertTrue('The message header SIZE_NUMBER should be less than 1500'  size &lt; 1500); assertEquals('The message body is wrong'  'Message3'  message.getBody()); } else { break; } } }And here is mail thread which discusses about it.,2.0.0; 2.1.0; 2.2.0,2.3.0,0,1,140,1,2,2,1,1,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsPollingConsumer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSelectorOptionTest.java;,0,0
2537,Improvement,Closed,Fixed,camel-core,Major,Jeff Sprankle,2010/03/10 22:06:57 +0100,2010/03/11 06:56:47 +0100,Claus Ibsen,2010/06/07 05:39:51 +0100,88.31451389,87.94657407,Batch Resequencer issues with JMSPriority,My project uses ActiveMQ and we have a requirement to support priority queues for one or more of our configured queues. One of the suggestions under the ActiveMQ FAQ is to use a Resequencer  so I followed the link and applied the &lt;resequence&gt; element to my XML-based route. While testing this functionality we uncovered a couple issues that seem like they should be addressed in a future release of camel-core. The JMSPriority header is not a unique field and internally the Resequencer class uses java.util.Set to collect messages into a batch. This means that a given batch cannot contain multiple messages with the same JMSPriority. For example  if I use the default batch config and submit five messages with JMSPriority=6 to the queue within a second  only one of those message is delivered to the configured endpoint. According to the JMS API  priority has ten values where 0 is the lowest and 9 is the highest. This means that messages with higher priorities should be processed before messages with lower priorities. When I configure my resequencer with &lt;header&gt;JMSPriority&lt;/header&gt;  however  it by default orders the messages within the batch in ascending order which means that messages with lower priorities are processed first.If there are any known workarounds to these issues please document them  because the current Resequencer documentation that uses JMSPriority as an example is misleading.,2.0.0,2.4.0,0,0,225,1,11,3,1,0,0,0,0,0,4,15,camel-core/src/main/java/org/apache/camel/model/ResequenceDefinition.java;camel-core/src/main/java/org/apache/camel/model/config/BatchResequencerConfig.java;camel-core/src/main/java/org/apache/camel/processor/Resequencer.java;camel-core/src/test/java/org/apache/camel/processor/BatchResequencerJMSPriorityTest.java;camel-core/src/main/java/org/apache/camel/model/ResequenceDefinition.java;camel-core/src/main/java/org/apache/camel/model/config/BatchResequencerConfig.java;camel-core/src/main/java/org/apache/camel/processor/Resequencer.java;camel-core/src/main/java/org/apache/camel/util/Ordered.java;camel-core/src/test/java/org/apache/camel/processor/BatchResequencerAllowDuplicatesTest.java;camel-core/src/test/java/org/apache/camel/processor/BatchResequencerWithDuplicateTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringBatchResequencerAllowDuplicatesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/BatchResequencerAllowDuplicatesTest.xml;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsBatchResequencerJMSPriorityTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringBatchResequencerJMSPriorityTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/BatchResequencerJMSPriorityTest.xml;,0,0
2540,Bug,Closed,Fixed,camel-core; camel-mina,Major,Anand,2010/03/11 16:33:58 +0100,2010/03/22 09:27:10 +0100,Claus Ibsen,2010/03/22 10:28:05 +0100,10.74591435,0.042303241,async route not working with Mina,here is my route: from('mina:tcp://localhost:6202?textline=true&amp;sync=true').process(new Processor() { public void process(Exchange exchange) throws Exception { String body = exchange.getIn().getBody(String.class); Thread.sleep(5000); exchange.getOut().setBody('Bye 1' + body); } }); from('file:///test/test/response') .convertBodyTo(String.class)//.threads(1) .toAsync('mina:tcp://localhost:6202?sync=true&amp;textline=true' 10) .to('log:+++ reply++++'); here is the output  you can see all reply logs have a same message body and async process is releasing all threads at the first response  this is probably Mina component bug in the context of aync route.2010-03-11 10:21:16 405 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG Total 3 files to consume2010-03-11 10:21:16 405 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93;]2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; DefaultManagementAgent DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest type=producers name=MinaProducer(0x2e6c66)2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; MinaProducer DEBUG Starting producer: Producer&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93;2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; ProducerCache DEBUG Adding to producer service pool with key: Endpoint&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93; for producer: Producer&#91;mina://tcp://localhost:6202?sync=true&amp;textline=true&#93;2010-03-11 10:21:16 452 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 452 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93;]2010-03-11 10:21:16 467 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 467 &#91;Camel thread 11: FileComponent&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93;]2010-03-11 10:21:16 467 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.2010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.1&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.0] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33622010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.1] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33632010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.0&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 499 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33742010-03-11 10:21:16 499 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;amel thread 22: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33632010-03-11 10:21:16 514 &#91;amel thread 24: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33622010-03-11 10:21:16 514 &#91;amel thread 23: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello22010-03-11 10:21:16 514 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello32010-03-11 10:21:16 514 &#91;amel thread 26: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33742010-03-11 10:21:16 514 &#91;amel thread 25: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Writing body : hello12010-03-11 10:21:16 514 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:16 514 &#91;3: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 &#91;2: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 &#91;4: SendAsyncProcessor-Producer&#93; MinaProducer DEBUG Waiting for response2010-03-11 10:21:16 530 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter DEBUG Launching thread for /127.0.0.1:33742010-03-11 10:21:16 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:16 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello22010-03-11 10:21:21 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello22010-03-11 10:21:21 530 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:21 530 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello22010-03-11 10:21:21 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:21 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello32010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 530 &#91;:6202?sync=true&amp;textline=true&#93;] SendProcessor DEBUG Async reply received now routing the Exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] DefaultManagementAgent DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest type=producers name=Producer(0x16321e6)2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] ProcessorEndpoint$1 DEBUG Starting producer: Producer&#91;log://+++ reply++++&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] ProducerCache DEBUG Adding to producer cache with key: Endpoint&#91;log://+++ reply++++&#93; for producer: Producer&#91;log://+++ reply++++&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 546 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/Copy (2) of New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] +++ reply++++ INFO Exchange&#91;BodyType:String  Body:Bye 1hello2&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; using exchange: Exchange&#91;Message: Bye 1hello2&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/Copy of New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/Copy (2) of New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/Copy (2) of New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/New Text Document (3).txt.camelLock with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/Copy of New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/Copy of New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/New Text Document (3).txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/New Text Document (3).txt&#93;2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/Copy (2) of New Text Document (3).txt to: C:/test/test/response/.camel/Copy (2) of New Text Document (3).txt with result: true2010-03-11 10:21:21 561 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/Copy of New Text Document (3).txt to: C:/test/test/response/.camel/Copy of New Text Document (3).txt with result: true2010-03-11 10:21:21 577 &#91;:6202?sync=true&amp;textline=true&#93;] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/New Text Document (3).txt to: C:/test/test/response/.camel/New Text Document (3).txt with result: true2010-03-11 10:21:26 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello32010-03-11 10:21:26 530 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Received body: hello12010-03-11 10:21:26 530 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:26 530 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello32010-03-11 10:21:26 530 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:62022010-03-11 10:21:31 531 &#91;amel thread 26: MinaThreadPool&#93; MinaConsumer DEBUG Writing body: Bye 1hello12010-03-11 10:21:31 531 &#91;SocketConnectorIoProcessor-0.2&#93; ExecutorFilter DEBUG Launching thread for localhost/127.0.0.1:62022010-03-11 10:21:31 531 &#91;amel thread 26: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for /127.0.0.1:33742010-03-11 10:21:31 531 &#91;amel thread 27: MinaThreadPool&#93; MinaProducer DEBUG Message received: Bye 1hello12010-03-11 10:21:31 531 &#91;amel thread 27: MinaThreadPool&#93; ExecutorFilter DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202,2.2.0,2.3.0,0,0,1070,1,2,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/SendAsyncProcessor.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaToAsyncTest.java;,0,0
2554,Bug,Closed,Fixed,,Major,Willem Jiang,2010/03/16 16:58:51 +0100,2010/03/16 16:58:51 +0100,Willem Jiang,2010/03/19 04:11:01 +0100,2.466782407,2.466782407,IndexOutOfBoundsException occur in UnsafeUriCharactersEncoder.class,Here is the mail thread for the detail discussion.,1.3.0; 1.4.0; 1.5.0; 1.6.0; 2.0-M1; 1.6.1; 1.6.2; 2.0-M2; 2.0-M3; 2.0.0; 2.1.0; 2.2.0,1.6.3; 2.3.0,0,0,12,1,1,1,1,1,0,0,0,0,2,4,components/camel-web/src/main/java/org/apache/camel/web/util/UriCharactersEncoder.java;components/camel-web/src/test/java/org/apache/camel/web/util/UriCharachersEncoderTest.java;camel-core/src/main/java/org/apache/camel/util/UnsafeUriCharactersEncoder.java;camel-core/src/test/java/org/apache/camel/util/UnsafeCharactersEncoderTest.java;,0,0
2566,Bug,Closed,Fixed,,Major,Freeman Fang,2010/03/22 09:58:41 +0100,2010/03/22 12:31:39 +0100,Claus Ibsen,2010/03/22 13:22:05 +0100,0.14125,0.035023148,camel-http component should set Transfer-Encoding as chunked header for response message when checkChunked is true,so that the client side which send request will know this is a chunked message.It's important when the response http headers is more than 4096 and we want to use chunked response message,2.2.0,2.3.0,0,0,33,1,3,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/Exchange.java;components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpClientRouteEnableChunkedTest.java;,0,0
2567,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/03/22 11:17:16 +0100,2010/03/22 11:17:16 +0100,Claus Ibsen,2010/03/22 12:23:07 +0100,0.045729167,0.045729167,Allow recipientList to be used inside a CBR using Java DSL,RecipientList is now offering fluent builders for parallel support.We should allow it to work in CBR with having end() being able to return the Type it came from  eg ChoiceDefinition.See nabblehttp://old.nabble.com/RecipientList-%2B-Choice-no-longer-work-together-in-Camel-2.2.0--ts27983922.html,2.2.0,2.3.0,0,1,34,1,4,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java;camel-core/src/test/java/org/apache/camel/processor/CBRWithRecipientListTest.java;,0,0
2575,Bug,Closed,Fixed,camel-cxf,Major,Jejomar Dimayuga,2010/03/26 04:00:20 +0100,2010/03/26 05:12:15 +0100,Willem Jiang,2010/03/29 04:00:09 +0100,2.999872685,2.949930556,CXFRS Routing in 2.2.0 does not behave like in 2.0.0,CXFRS Routing in Camel 2.0.0 works well with these endPoints:&lt;cxf:rsServer id='restRouter' address='/restRouter/'  serviceClass='com.project.service.impl.ServiceManagerImpl' /&gt; &lt;cxf:rsClient id='restEndpoint' address='http://localhost:8080/services/rest' serviceClass='com.project.service.impl.ServiceManagerImpl' /&gt;In Camel 2.2.0  Routing fails with error causing the CXF Client to invoke a 404 not found Rest Service which is 'http://localhost:8080/services/rest/restRouter/Path'.The address of cxf:rsClient is being appended by the cxf:rsServer's address,2.2.0,2.3.0,0,0,51,1,4,3,0,0,0,0,0,1,1,3,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsRouterTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringRouter.xml;,0,0
2587,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/03/28 09:10:29 +0100,2010/03/28 09:10:29 +0100,Claus Ibsen,2010/03/28 09:17:29 +0100,0.004861111,0.004861111,Graceful shutdown - Add option to shutdown routes in reverse order as they were started,As its more intuitive this way.And it should be the new default in 2.3 onwards. The old behavior can be enabled by turning off the shutdownRoutesInReverseOrder option.,2.2.0,2.3.0,0,0,27,1,2,1,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;camel-core/src/main/java/org/apache/camel/spi/ShutdownStrategy.java;camel-core/src/test/java/org/apache/camel/processor/RouteShutdownNotReverseOrderTest.java;camel-core/src/test/java/org/apache/camel/processor/RouteShutdownReverseOrderTest.java;,0,0
2603,Improvement,Closed,Fixed,,Major,Anand,2010/03/30 14:35:23 +0100,2010/04/28 09:50:47 +0100,Claus Ibsen,2010/04/28 09:50:47 +0100,28.80236111,0,support get operation for cache,Please support get operation on cache component.here is the discussion.http://old.nabble.com/read-from-cache-component-ts28071593.html,2.2.0,2.3.0,0,0,13,1,6,2,0,0,0,0,0,0,1,13,components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheComponent.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheConfiguration.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheConstants.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheConsumer.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheEndpoint.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheManagerFactory.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/factory/CacheManagerFactory.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedMessageBodyReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedTokenReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedXPathReplacer.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheConsumerTest.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheProducerTest.java;,0,0
2606,Improvement,Closed,Fixed,camel-gae,Minor,Martin Krasser,2010/04/01 14:20:34 +0100,2010/04/01 14:20:34 +0100,Martin Krasser,2010/04/04 13:53:49 +0100,2.981423611,2.981423611,Make use of testing mocks of the the GAE SDK,Replace existing GAE service mocks with those coming with the GAE SDK.,2.2.0,2.3.0,0,0,12,1,1,1,0,0,0,0,0,0,1,24,components/camel-gae/src/main/java/org/apache/camel/component/gae/task/GTaskComponent.java;components/camel-gae/src/test/java/com/google/appengine/api/labs/taskqueue/TaskOptionsAccessor.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/TestConfig.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/auth/GAuthAuthorizeBindingTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/auth/GAuthTestUtils.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/auth/GAuthUpgradeBindingTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/http/GHttpBindingTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/http/GHttpCombinedRouteBuilder.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/http/GHttpCombinedRouteBuilderTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/http/GHttpOutboundRouteBuilder.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/http/GHttpOutboundRouteBuilderTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/http/GHttpTestUtils.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/login/GLoginEndpointTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/login/GLoginTestUtils.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/mail/GMailBindingTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/mail/GMailEndpointTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/support/ServletTestSupport.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/task/GTaskBindingTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/task/GTaskCombinedRouteBuilder.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/task/GTaskCombinedRouteBuilderTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/task/GTaskEndpointTest.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/task/GTaskTestUtils.java;components/camel-gae/src/test/java/org/apache/camel/component/gae/task/MockQueue.java;components/camel-gae/src/test/resources/org/apache/camel/component/gae/task/context-combined.xml;,0,0
2622,Bug,Closed,Fixed,camel-core,Minor,Sergey Zolotaryov,2010/04/07 10:45:06 +0100,2010/04/07 11:40:57 +0100,Claus Ibsen,2010/04/07 11:40:57 +0100,0.038784722,0,Invocation of hasNext() on org.apache.camel.util.ObjectHelper.createIterator(...).new Iterator() {...} return different results,public boolean hasNext() { // empty string should not be regarded as having next return ++idx == 0 &amp;&amp; ObjectHelper.isNotEmpty(s); } public String next() { return s; }This is incorrect. Should be: public boolean hasNext() { // empty string should not be regarded as having next return idx+1 == 0 &amp;&amp; ObjectHelper.isNotEmpty(s); } public String next() { idx++; return s; },2.2.0; 2.3.0,2.3.0,0,1,90,1,3,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/converter/ObjectHelperTest.java;camel-core/src/test/java/org/apache/camel/impl/CustomProducerServicePoolTest.java;,0,0
2629,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/04/11 08:09:04 +0100,2010/04/11 08:09:04 +0100,Claus Ibsen,2010/04/11 08:10:40 +0100,0.001111111,0.001111111,Aggregator - Completion by batch consumer should trigger completion for the batch group if multiple correlation keys was used,Yeah its really an odd use case if you use multiple correlation keys for the same batch consumer  but its still possible to do.,2.3.0,2.3.0,0,0,24,1,2,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/component/file/FileConcurrentAggregateBatchConsumerTest.java;,0,0
2636,Bug,Closed,Fixed,camel-core,Major,raymond domingo,2010/04/12 16:17:53 +0100,2010/04/16 04:37:18 +0100,Willem Jiang,2010/05/21 07:30:05 +0100,38.63347222,35.11998843,IOException: Bad file descriptor and FileNotFoundException,When I try to stream BINARY (pdf) file using camel-http I get the java.io.IOException: Bad file descriptorThe pdf isn't recieved succesfully by reciever (0kb)This seems to be caused by a bug in java (on linux systems)  closing inputstream twice causes problems. It seemed to me this is exactly what is happening  see also link:http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtmlI fixed this by (checking out apache camel-core and camel-http 2.2.0):In FileInputStreamCache.java:In method close() wrapped getInputStream().close() in if:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}In method reset() also:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}Second I needed to fix a filenotfoundexception  the tempfile created by camel was deleted to early.I changed CachedOutputStream.java Reimplemented constructor:public CachedOutputStream(Exchange exchange) { String hold = exchange.getContext().getProperties().get(THRESHOLD); String dir = exchange.getContext().getProperties().get(TEMP_DIR); if (hold != null) { this.threshold = exchange.getContext().getTypeConverter().convertTo(Long.class  hold); } if (dir != null) { this.outputDir = exchange.getContext().getTypeConverter().convertTo(File.class  dir); } // add on completion so we can cleanup after the exchange is done such // as deleting temporary files exchange.addOnCompletion(new SynchronizationAdapter() { @Override public void onDone(Exchange exchange) { try { // close the stream and FileInputStreamCache // close(); // for (FileInputStreamCache cache : fileInputStreamCaches) // { // cache.close(); // } // cleanup temporary file if (tempFile != null) { System.err.println('####################################################'); System.err.println('DISABLED tempFile.delete:89'); System.err.println('####################################################'); // boolean deleted = tempFile.delete(); // if (!deleted) { // LOG.warn('Cannot delete temporary cache file: ' + // tempFile); // } else if (LOG.isTraceEnabled()) { // LOG.trace('Deleted temporary cache file: ' + // tempFile); // } tempFile = null; } } catch (Exception e) { LOG.warn('Error deleting temporary cache file: ' + tempFile  e); } } @Override public String toString() { return 'OnCompletion[CachedOutputStream]'; } }); }Reimplemented close():public void close() throws IOException { System.err.println('####################################################'); System.err.println('outputStream.close:119 -&gt; delete tempFile'); System.err.println('####################################################'); new Exception().printStackTrace(); currentStream.close(); boolean deleted = tempFile.delete(); if (!deleted) { LOG.warn('Cannot delete temporary cache file: ' + tempFile); } else if (LOG.isTraceEnabled()) { LOG.trace('Deleted temporary cache file: ' + tempFile); } },2.2.0,2.3.0,0,2,326,1,13,4,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/converter/stream/CachedOutputStream.java;camel-core/src/main/java/org/apache/camel/converter/stream/FileInputStreamCache.java;camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/issues/JettyHttpFileCacheTest.java;,0,0
2642,Bug,Closed,Fixed,camel-core,Minor,Christian M?ller,2010/04/14 10:26:59 +0100,2010/04/15 08:08:00 +0100,Claus Ibsen,2010/06/07 12:39:08 +0100,54.09177083,53.18828704,Inconsistency between IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty(),IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty() work in an inconsistency way:ExampleBean bean = new ExampleBean();Date date = new Date(0);bean.setDate(date);assertSame(date  IntrospectionSupport.getProperty(bean  'date')); // succeedMap&lt;String  Object&gt; map = new HashMap&lt;String  Object&gt;();IntrospectionSupport.getProperties(bean  map  null);assertSame(date  map.get('date')); // fails,2.3.0,2.4.0,0,0,50,1,5,2,0,0,0,0,0,0,3,6,camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/test/java/org/apache/camel/util/AnotherExampleBean.java;camel-core/src/test/java/org/apache/camel/util/IntrospectionSupportTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;,0,0
2656,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/04/18 15:46:27 +0100,2010/04/19 09:52:04 +0100,Claus Ibsen,2010/04/21 07:41:59 +0100,2.663564815,1.909664352,Aggregator - Add option to specify if completionInterval to have interval based completion,This allows for example the stock quote example to use 5 sec interval to trigger completions to spit out current quotes every 5th seconds.,2.3.0,2.3.0,0,0,24,1,3,1,0,0,0,0,0,0,3,15,platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/features.xml;camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/MemoryAggregationRepository.java;camel-core/src/main/java/org/apache/camel/spi/AggregationRepository.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateCompletionIntervalTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateProcessorTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/aggregator/SpringAggregateCompletionIntervalTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/aggregator/SpringAggregateCompletionIntervalTest.xml;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBAggregationRepository.java;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBCamelMarshaller.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateCompletionIntervalTest.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateNotLostRemovedWhenConfirmedTest.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateNotLostTest.java;,0,0
2663,Bug,Closed,Fixed,camel-core,Major,Christoph Dittberner,2010/04/21 11:21:23 +0100,2010/04/22 09:57:53 +0100,Willem Jiang,2010/05/07 08:18:32 +0100,15.87302083,14.93100694,DefaultPackageScanClassResolver can't read entries in an eclipse rcp app because it can't handle bundleresource - protocol,scenario:I have an eclipse rcp based app and use the apache camel libs within my plugin  i.e. the libs are one classpath of the plugin. I use a route using camel-mail to process some mailqueues.CamelContext context = new DefaultCamelContext();context.addRoutes(new RouteBuilder() { public void configure() { from('imaps://mailserver?username=user&amp;password=password&amp;consumer.delay=5000&amp;delete=false&amp;unseen=true') .to('log: new mail'); }}); context.start();When I start my app all seems to be ok. But in my log I get a lot of error messages regarding the loading of converters. If I ask my context to find a converter f.i. to converty to byte[] form inputstream (as I did see in another mail example reagding attachments) I get null because the context can't find one.I debugged deeper into the camel code and it seems that the DefaultPackageScanClassResolver can't load from urls starting with bundleresource like 'bundleresource://109.fwk32380043:4/org/apache/camel/component/file/'using camel-osgi didn't worked because all camel libs are loaded as inner libs of my single plugin and not as plugins. (loading as plugins didn't worked but thats another problem/bug)LOG Messages:2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.converter.DefaultTypeConverter loadTypeConverters - Loading type converters ...2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver findAnnotated - Searching for annotations of org.apache.camel.Converter in packages: &#91;org.apache.camel.component.file  org.apache.camel.component.bean  org.apache.camel.converter  org.apache.camel.component.mail  org.apache.camel.component.spring.integration.converter&#93;2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getClassLoaders - The thread context class loader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff is used to load the class2010-04-21 11:15:34 829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Searching for: annotated with @Converter in package: org/apache/camel/component/file using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder2010-04-21 11:15:39 954 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getResources - Getting resource URL for package: org/apache/camel/component/file with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff2010-04-21 11:16:44 970 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - URL from classloader: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/2010-04-21 11:17:01 642 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Decoded urlPath: /org/apache/camel/component/file/ with protocol: bundleresource2010-04-21 11:23:59 814 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - isLocalFileSystem: false2010-04-21 11:24:00 470 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Scanning for classes in &#91;/org/apache/camel/component/file/&#93; matching criteria: annotated with @Converter2010-04-21 11:24:16 079 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Loading from jar using http/https: /org/apache/camel/component/file/2010-04-21 11:24:26 626 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Cannot read entries in url: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/java.net.MalformedURLException: no protocol: /org/apache/camel/component/file/ at java.net.URL.&lt;init&gt;(URL.java:567) at java.net.URL.&lt;init&gt;(URL.java:464) at java.net.URL.&lt;init&gt;(URL.java:413) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:264) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180) at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:63) at org.apache.camel.impl.converter.DefaultTypeConverter.loadTypeConverters(DefaultTypeConverter.java:361) at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:384) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53) at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49) at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1174) at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:644) at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:691) at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:68),2.2.0,2.3.0,0,0,334,1,10,3,0,0,0,0,0,0,3,10,apache-camel/pom.xml;apache-camel/src/main/descriptors/common-bin.xml;camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;components/camel-eclipse/src/main/java/org/apache/camel/component/eclipse/EclipsePackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;components/camel-eclipse/pom.xml;components/camel-eclipse/src/main/java/org/apache/camel/component/eclipse/EclipsePackageScanClassResolver.java;components/pom.xml;parent/pom.xml;,0,0
2669,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/04/22 11:10:01 +0100,2010/04/23 12:10:15 +0100,Claus Ibsen,2010/05/11 17:20:50 +0100,19.25751157,18.21568287,XPath - Add type converters from the pesky XPath types to String  InputStream etc.,See nabblehttp://old.nabble.com/XPath-Splitter-Problem-ts28325959.htmlThen its easier for Camel end users as they wont have as many problems with the bad XPath result types for NODESET and whatnot.,2.0.0; 2.1.0; 2.2.0,2.3.0,0,0,28,1,6,2,0,1,0,0,0,0,3,11,camel-core/src/test/java/org/apache/camel/builder/xml/XPathTest.java;components/camel-saxon/src/test/java/org/apache/camel/builder/saxon/XPathTest.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/DomConverter.java;camel-core/src/test/java/org/apache/camel/component/file/XPathToFileTest.java;camel-core/src/test/java/org/apache/camel/converter/jaxp/DomConverterTest.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/DomConverter.java;camel-core/src/test/java/org/apache/camel/builder/xml/XPathTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithXPathInjectionUsingResultTypeTest.java;camel-core/src/test/java/org/apache/camel/component/file/XPathToFileTest.java;camel-core/src/test/java/org/apache/camel/converter/jaxp/DomConverterTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.java;,0,0
2683,Improvement,Closed,Fixed,camel-smpp,Major,Cott Lang,2010/04/29 22:47:52 +0100,2010/04/30 01:32:38 +0100,Willem Jiang,2010/04/30 02:05:29 +0100,0.137233796,0.0228125,Smpp component schedule delivery time should default to null,In testing this component  I ran into a problem where the calculated SCHEDULE_DELIVERY_TIME in SmppBinding ends up off for my time zone  so all my SMS messages are delivered an hour later. I'm not quite sure why I'm seeing this problem  it almost appears that TimeZone is not properly adjusting the raw offset for DST.However  in reading the SMS v3.4 spec  there's no reason to attempt to define a default delivery time of 'now'  because transmitting null indicates the message is to be delivered immediately.Therefore  it seems like SmppBinding should be updated not to attempt to set a default date of 'now'. This solved my problem  and avoids any potential date miscalculations for the overwhelming majority of cases where people want the message delivered immediately.P.S. There is no camel-smpp Component defined in Jira.,2.2.0,2.3.0,0,0,141,1,2,2,0,0,0,0,0,0,1,1,components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java;,0,0
2694,Bug,Closed,Fixed,,Major,Willem Jiang,2010/05/05 14:06:43 +0100,2010/05/05 14:06:43 +0100,Willem Jiang,2010/05/07 08:15:35 +0100,1.756157407,1.756157407,HttpEntityConverter should not create a InputStreamEntity by using the GZIPHelper.toGZIPInputStream(),GZIPHelper.toGZIPInputStream() is used for uncompress the zip date and not for compress the data.,1.6.0; 2.0-M1; 1.6.1; 1.6.2; 2.0-M2; 2.0-M3; 2.0.0; 2.1.0; 2.2.0,1.6.3; 2.3.0,0,0,14,1,1,1,0,1,0,0,0,0,1,11,camel-core/src/main/java/org/apache/camel/Exchange.java;components/camel-http/src/main/java/org/apache/camel/component/http/CamelServlet.java;components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpConverter.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/GZIPHelper.java;components/camel-http/src/test/java/org/apache/camel/component/http/helper/GZIPHelperTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpConverterTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpGZipEncodingTest.java;components/camel-osgi/src/test/java/org/apache/camel/osgi/test/MyTypeConverter.java;,0,0
2697,Improvement,Closed,Fixed,camel-spring,Major,Claus Ibsen,2010/05/06 09:40:31 +0100,2010/05/10 04:11:35 +0100,Willem Jiang,2010/05/14 12:02:37 +0100,8.098680556,4.327106481,camel-spring - Spring 3.0.x - Add depends-on in the namespace handler to make it easy for end users to use Spring and Camel without considering ordering of their beans,Spring 3.0.x behaves differently when discovering bean dependencies. For example if you have a &lt;routeBuilder ref='xxx'/&gt; in &lt;camelContext/&gt; than the xxx bean will not by default be dependent on the &lt;camelContext/&gt;. This causes Spring maybe to create the xxx before the camelContext. And you most likely want CamelContext to be created beforehand  so IoC allows you to inject CamelContext into that xxx or whatnot.See nabblehttp://old.nabble.com/Spring-3.0-and-Camel-2.2---Route-configure%28%29-called-before-Spring-beans-injected-ts28415437.htmlWe do already have logic for this in the namespace handler  but we need to add it to more places to have it working for all kind of camel types.,2.2.0; 2.3.0,2.3.0,0,0,97,1,3,2,0,0,0,0,0,0,2,6,components/camel-spring/src/test/java/org/apache/camel/spring/issues/CamelRouteRefInjectionIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/MyInjectionRouteBuilder.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/CamelRouteRefInjectionIssueTest.xml;components/camel-spring/src/test/java/org/apache/camel/spring/issues/MyInjectionRouteBuilder.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/MyProcessor.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/CamelRouteRefInjectionIssueTest.xml;,0,0
2700,Bug,Closed,Fixed,camel-cxf,Major,Jonathan Anstey,2010/05/06 14:29:30 +0100,2010/05/06 14:29:30 +0100,Jonathan Anstey,2010/05/06 14:47:08 +0100,0.01224537,0.01224537,cxfbean component should ignore the wsdlLocation in the POJO,cxfbean component should ignore the wsdlLocation in the annotation in the POJO when starting the service. It should be using the JAXWS bean to create the service. Came across this bug when I (mistakenly) set the wsdlLocation to the http one published by the service  which of course wasn't up yet and I got the exception below. Fix for this coming soon.For Googlers out there  this ticket may fix this error message you may be getting:Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://jaxwsBean due to: Failed to create service. at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115) at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63) at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57) at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87) at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286) at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640) ... 32 moreCaused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service. at org.apache.cxf.wsdl11.WSDLServiceFactory.&lt;init&gt;(WSDLServiceFactory.java:93) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:396) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:521) at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:271) at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:177) at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100) at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105) at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167) at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:104) at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86) at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416) ... 42 moreCaused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:226) at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179) at org.apache.cxf.wsdl11.WSDLServiceFactory.&lt;init&gt;(WSDLServiceFactory.java:91) ... 54 moreCaused by: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:983) at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:217) ... 56 more,2.2.0,2.3.0,0,0,195,1,2,2,0,0,0,0,0,0,1,4,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanEndpoint.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/cxfbean/CxfBeanWithWsdlLocationInBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/wsdl_first/PersonImplWithWsdl.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/cxfbean/CxfBeanWithWsdlLocationInBeanTest-context.xml;,0,0
2704,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/05/08 14:26:16 +0100,2010/05/27 08:30:56 +0100,Willem Jiang,2010/05/31 05:03:46 +0100,22.609375,3.856134259,RoutingSlip - Let it be expression based,Currently the Routing Slip EIP is a bit inflexible as it mandates the attached slip has been created beforehand.It would be nice if you could let it be expression based to generate the initial attached slip.Then end users can use a bean to generate the slip.This requires a change in the DSL which is not backwards compatible.But it makes the EIP in line with Recipient List and others which is expression based.,2.3.0,2.4.0,0,0,72,1,3,2,0,0,0,0,0,0,5,17,camel-core/src/main/java/org/apache/camel/RoutingSlip.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipPOJOTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/routingSlipIgnoreInvalidEndpoints.xml;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/DSL.scala;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/SAbstractDefinition.scala;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/builder/RouteBuilder.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SRoutingSlipTest.scala;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RoutingSlipDefinition.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/routingSlip.xml;camel-core/src/main/java/org/apache/camel/model/RoutingSlipDefinition.java;components/camel-web/src/main/java/org/apache/camel/web/util/ExpressionNodeRenderer.java;components/camel-web/src/test/java/org/apache/camel/web/groovy/RoutingSlipDSLTest.java;,0,0
2708,Bug,Closed,Fixed,camel-core,Major,Gert Vanthienen,2010/05/11 06:55:26 +0100,2010/05/11 06:55:26 +0100,Gert Vanthienen,2010/05/11 10:17:28 +0100,0.140300926,0.140300926,File name lost when it starts with the same characters as the relative directory on the endpoint,When polling file from a directory using a relative file URI  the file name gets lost when it starts with the same characters as the directory name.E.g. a directory 'orders' containing 'orders-1719.xml' and 'orders-1819.xml'from('file:orders').process(new Processor() { public void process(Exchange exchange) { // there's no file name on the message here (exchange.getIn().getHeader(Exchange.FILE_NAME) returns null) }});,2.2.0,2.3.0,0,0,66,1,3,2,0,0,0,0,0,0,1,7,camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerRelativeFileNameTest.java;camel-core/src/test/java/org/apache/camel/component/file/stress/FileAsyncStressReadLockLockFileTest.java;camel-core/src/test/java/org/apache/camel/component/file/stress/FileAsyncStressReadLockNoneTest.java;camel-core/src/test/java/org/apache/camel/component/file/stress/FileAsyncStressReadLockRenameTest.java;camel-core/src/test/java/org/apache/camel/component/file/stress/FileAsyncStressTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerRelativeFileNameTest.java;,0,0
2716,Bug,Closed,Fixed,,Major,Hadrian Zbarcea,2010/05/12 20:14:26 +0100,2010/05/12 20:14:26 +0100,Hadrian Zbarcea,2010/07/08 16:22:46 +0100,56.83912037,56.83912037,Incomplete cleanup of jmx mbeans after context stop,There is a fair amount of cleanup on context stop  but it is incomplete. Most of it has to do with JMX and if one creates and starts a new CamelContext she may end up with managed objects pointing nowhere or have duplicates or other minor side-effects. One of the nasty side effects is that we are pretty much forced to use '&lt;forkMode&gt;pertest&lt;/forkMode&gt;' in our surefire plugin configuration  ensuring a clean slate for every test.For long running apps in which you may have multiple CamelContext running at various times during the lifetime of the application we must properly cleanup when stopping the context. I have a series of patches fixing that which I hope to finish before 2.3. Once we're comfortable and tested with multiple jdk implementations and versions  I'd change the forkMode to 'once'. In my local copy this reduces the test time in core from 40+ mins to under 15 mins. Since interactions between tests is still possible and might lead us on a wild-goose we could add another profile that uses the safer yet time consuming 'pertest' forkMode.,2.2.0,2.4.0,0,0,181,1,5,2,0,0,0,0,1,0,1,2,camel-core/pom.xml;camel-core/src/test/java/org/apache/camel/management/ManagedUnregisterCamelContextTest.java;,0,0
2731,Improvement,Closed,Fixed,camel-bindy,Major,Christian M?ller,2010/05/17 20:55:59 +0100,2010/05/27 16:19:34 +0100,Charles Moulliard,2010/06/18 12:22:25 +0100,31.64335648,21.8353125,Camel-bindy should be able to process fix length records,Camel-bindy should be able to process fix length records which has no separators:A sample line could looks like: 47111234567890654321098765432199999999999999994711 is the companyId1234567890 is the cardProgram6543210987654321 is the accountNumber9999999999999999 is the cardNumberCreated a POJO with the Camel bindy annotations:@CsvRecord(separator = '')public class CSVRecord implements Serializable { @DataField(pos = 1  length = 4) private String companyId; @DataField(pos = 2  length = 10) private String cardProgram; @DataField(pos = 3  length = 16) private String accountNumber; @DataField(pos = 4  length = 16) private String cardNumber; // getter and setter} See nabble for details.,2.3.0,2.4.0,0,0,117,1,9,3,0,0,0,0,0,0,3,22,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/FixedLengthRecord.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/util/AnnotationModelLoader.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/BindySimpleFixedLengthUnmarshallTest-context.xml;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/marshall/simple/BindySimpleFixedLengthMarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/marshall/simple/BindySimpleFixedLengthMarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/BindySimpleFixedLengthUnmarshallTest-context.xml;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/marshall/simple/BindySimpleFixedLengthMarshallTest-context.xml;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest-context.xml;,0,0
2736,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/05/19 05:48:14 +0100,2010/05/28 12:54:01 +0100,Willem Jiang,2010/06/02 03:15:26 +0100,13.89388889,4.598206019,SendProcessor - When a route is started it should be able to warmup the Producer,In case you want to have Camel etc. to fail on startup in case a Producer cannot start  for example it needs a remote connection which fails.The producer would normally be created on-the-fly  eg a message needs to be send to it.,2.0.0; 2.1.0; 2.2.0; 2.3.0,2.4.0,0,0,42,1,3,2,0,1,0,0,0,0,4,11,camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSendProcessor.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/test/java/org/apache/camel/management/ManagedSendProcessorTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpComponent.java;components/camel-ibatis/src/test/java/org/apache/camel/component/ibatis/IBatisUnknownStatementTypeTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaSendToProcessorTest.java;,0,0
2743,Bug,Closed,Fixed,,Major,Willem Jiang,2010/05/20 14:46:50 +0100,2010/05/20 14:46:50 +0100,Willem Jiang,2010/09/22 09:33:00 +0100,124.7820602,124.7820602,HttpProducer should not sending the Http headers with low case,Here is the mail thread which discusses about it.http://old.nabble.com/camel-http-converts-headers-to-lower-case-tp28620717p28620717.html,2.0.0; 2.1.0; 2.2.0,2.5.0,0,1,12,1,10,3,0,1,0,0,0,0,3,7,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpHeaderTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/DefaultJettyHttpBinding.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpHeaderCaseTest.java;,0,0
2744,Bug,Closed,Fixed,camel-core,Minor,Glenn Moss,2010/05/20 17:37:08 +0100,2010/05/21 06:31:45 +0100,Claus Ibsen,2010/05/21 06:58:32 +0100,0.556527778,0.018599537,AggregationStrategy returning null causes NPE,When the AggregationStrategy's aggregate method returns null  the AggregateProcessor throws an NPE. While this is a result of user error  I think it would be easy to provide a more useful error indicating what the true problem is. This is the (not very helpful) error the user sees:ERROR | Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]org.apache.camel.RuntimeCamelException: java.lang.NullPointerException at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1117) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.NullPointerException at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:227) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84) ... 9 more,2.3.0,2.3.0,0,0,120,1,2,1,0,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateRepositoryReturnNullTest.java;,0,0
2748,Bug,Closed,Fixed,,Major,Willem Jiang,2010/05/24 08:06:26 +0100,2010/05/24 08:06:26 +0100,Willem Jiang,2010/05/24 08:12:08 +0100,0.003958333,0.003958333,camel-cxf feature doesn't include all cxf needs bundles,Current camel-cxf features doesn't include wss4j  saaj-imple  opensaml  fastinfoset bundle.We need to add these bundle into camel-cxf features.,2.2.0,2.4.0,0,0,18,1,1,1,0,0,0,0,0,0,1,5,platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/config.properties;platforms/karaf/features/src/main/resources/features-spring3.xml;platforms/karaf/features/src/main/resources/features.xml;platforms/karaf/pom.xml;,0,0
2755,Bug,Closed,Fixed,camel-core,Major,Nathan Jensen,2010/05/26 22:59:41 +0100,2010/05/27 07:20:47 +0100,Claus Ibsen,2010/05/27 07:26:26 +0100,0.351909722,0.003923611,VM endpoints with same name do not communicate if args don't match,If you send to a VM endpoint from one route and consume from the same endpoint in another route  but include an argument on only one of the routes  Camel sees them as two different routes. Therefore  the messages are never consumed. For example:&lt;camelContext id='sendNotifyContext' xmlns='http://camel.apache.org/schema/spring' errorHandlerRef='errorHandler'&gt; &lt;route id='sendToNotify'&gt; &lt;from uri='...' /&gt; .... &lt;to uri='vm:myNotify' /&gt; &lt;/route&gt;&lt;/camelContext&gt;&lt;camelContext id='receiveNotifyContext' xmlns='http://camel.apache.org/schema/spring' errorHandlerRef='errorHandler'&gt; &lt;route id='receiveNotify'&gt; &lt;from uri='vm:myNotify?size=2500' /&gt; .... &lt;to uri='...' /&gt; &lt;/route&gt;&lt;/camelContext&gt;The producer appears to send to vm:myNotify while the consumer is listening to a separate endpoint named vm:myNotify?size=2500  so the messages build up and are never received.,2.2.0,2.4.0,0,0,96,1,2,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java;camel-core/src/test/java/org/apache/camel/component/vm/VmUseSameQueueTest.java;,0,0
2763,Bug,Closed,Fixed,camel-mail,Major,Willem Jiang,2010/05/28 04:40:35 +0100,2010/05/28 04:40:35 +0100,Willem Jiang,2010/05/28 09:16:06 +0100,0.191331019,0.191331019,MailBinding can't handle the subject header with NO_ASCII code rightly.,Here is the mail thread which discusses about it.,1.4.0; 1.5.0; 1.6.0; 2.0-M1; 1.6.1; 1.6.2; 2.0-M2; 2.0-M3; 2.0.0; 2.1.0; 2.2.0; 2.3.0,1.6.3; 2.4.0,0,0,12,1,2,2,1,1,0,0,0,0,1,2,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailRouteTest.java;,0,0
2769,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/05/31 13:26:17 +0100,2010/06/02 14:49:46 +0100,Claus Ibsen,2010/06/02 18:39:43 +0100,2.217662037,0.1596875,OnCompletion - Let it be executed last so the internal on completions can be executed beforehand,See nabblehttp://old.nabble.com/Problems-shutting-down-route-onCompletion-ts28707903.htmlThis requires some sort of marker / API changes or whatever to let Camel knows that its a OnCompletion synchronization so it should be executed last.We may need to add a priority option or the likes.,2.3.0,2.4.0,0,0,40,1,2,1,1,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;camel-core/src/main/java/org/apache/camel/impl/SynchronizationAdapter.java;camel-core/src/main/java/org/apache/camel/processor/OnCompletionProcessor.java;camel-core/src/main/java/org/apache/camel/spi/SynchronizationVetoable.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/main/java/org/apache/camel/util/Ordered.java;camel-core/src/main/java/org/apache/camel/util/OrderedComparator.java;camel-core/src/test/java/org/apache/camel/processor/OnCompletionShouldBeLastTest.java;camel-core/src/test/java/org/apache/camel/util/OrderedComparatorTest.java;,0,0
2773,Bug,Closed,Fixed,camel-bindy,Minor,Claus Ibsen,2010/06/01 07:33:40 +0100,2010/06/01 07:54:17 +0100,Charles Moulliard,2010/06/11 16:02:16 +0100,10.35319444,10.33887731,Bindy - No @Section causes a null key being generated which causes a NumberFormatException,See nabblehttp://old.nabble.com/Bindy-CSV-not-Marshaling-ts28719942.html,2.3.0,2.4.0,0,0,5,1,2,2,1,0,0,0,0,0,1,9,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyKeyValuePairFactory.java;components/camel-bindy/src/test/data/fix_simple/fix_simple.txt;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/CommonBindyTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallBadIntegerTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fix/BindySimpleKeyValuePairMarshallDslTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fix/BindySimpleKeyValuePairWithoutSectionMarshallDslTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/fix/withoutsection/Order.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fix/BindySimpleKeyValuePairWithoutSectionMarshallDslTest-context.xml;,0,0
2778,Bug,Closed,Fixed,,Major,Roland Knight,2010/06/02 01:42:54 +0100,2010/06/02 03:00:37 +0100,Willem Jiang,2010/06/02 09:36:52 +0100,0.329143519,0.275173611,Escaped characters in http4 URLs do not work,There is a bug in http4 HttpProducer that is unescaping URL query and path components too early. Patch fix attached.,2.3.0,2.4.0,0,0,20,1,4,3,1,0,0,0,0,0,3,9,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/HttpProducerHelper.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpClientRouteTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/HttpProducerHelper.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/helper/HttpProducerHelper.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/HttpPathTest.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/HttpQueryTest.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/handler/BasicValidationHandler.java;,0,0
2786,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/06/03 05:21:21 +0100,2010/06/03 05:21:21 +0100,Claus Ibsen,2010/06/03 08:12:20 +0100,0.118738426,0.118738426,ManagementAgent should expose getter/setters for the JMX settings so you can set it easily from Java,Today you have to use a JVM system propertyYou can set the service URL path by system property.-Dorg.apache.camel.jmx.serviceUrlPath=&lt;path&gt;This should be possible to set from Java like this also:context.getManagementStrategy().getManagementAgent().setServiceUrlPath('foo ....');,2.3.0,2.4.0,0,0,37,1,2,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java;camel-core/src/main/java/org/apache/camel/spi/ManagementAgent.java;camel-core/src/test/java/org/apache/camel/management/ManagedServiceUrlPathTest.java;,0,0
2798,Bug,Closed,Fixed,camel-core,Critical,Andreas Asmuss,2010/06/08 09:33:48 +0100,2010/06/09 11:46:28 +0100,Willem Jiang,2010/06/09 12:09:26 +0100,1.108078704,0.015949074,Aggregation raises NullPointerException if last file in batch is not to be aggregated.,When trying to aggregate files from a directory  it seems that camel-core raises a NullPointerException if the last file of the batch is a single file. That is it doesn't match the correlationExpression with any other files and therefore should just pass through. If such a file is the first file or in the middle of the files (alphabetically) this issue is not present.See:http://old.nabble.com/Aggregator-problem-with-files-(Camel-2.3)-td28778641.html#a28780522,2.3.0,2.4.0,0,0,67,1,3,3,1,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateExpressionTest.java;,0,0
2800,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/06/08 14:45:49 +0100,2010/06/08 14:45:49 +0100,Claus Ibsen,2010/06/15 06:35:48 +0100,6.659710648,6.659710648,Graceful shutdown - Add option to shutdown manually added/started routes,If you for example add routes later at runtime  then those where not enlisted on startup and thus not part of the process to be stopped.Those routes added manually should be part of this so they are also shutdown. There should be an option to control this behavior so you can turn it off  in the odd cases you dont want that.,2.3.0,2.4.0,0,0,62,1,3,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/impl/GracefulShutdownNoAutoStartOrderClashTest.java;camel-core/src/test/java/org/apache/camel/impl/ShutdownGracefulNoAutoStartedRoutesTest.java;camel-core/src/test/java/org/apache/camel/impl/SimpleShutdownGracefulNoAtuoStartedTest.java;,0,0
2805,Bug,Closed,Fixed,,Major,Roman Kalukiewicz,2010/06/10 15:19:42 +0100,2010/06/10 15:19:42 +0100,Roman Kalukiewicz,2010/06/16 09:45:24 +0100,5.767847222,5.767847222,It is impossible to put # sign in SQL statement in camel-sql,SqlProducer implementation turns all # characters into ? making it impossible to have # in the SQL statement.,2.3.0,2.4.0,0,0,18,1,1,1,1,0,0,0,0,0,1,2,components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlComponent.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlRouteTest.java;,0,0
2815,Bug,Closed,Fixed,,Major,Darren Davison,2010/06/15 11:32:38 +0100,2010/06/15 11:51:34 +0100,Willem Jiang,2010/06/15 12:42:47 +0100,0.048715278,0.03556713,camel-castor relies on specific  out of date version of Castor,camel-castor specifies a non-flexible version dependency on Castor 1.2.0. Ideally should be changed to [1.2.0 2.0) to allow later versions of Castor to be deployed. Castor 1.2 was released in Feb 2008  1.3 was first released in Feb 2009,2.2.0,2.4.0,0,0,38,1,1,1,1,0,0,0,0,0,1,1,components/camel-castor/pom.xml;,0,0
2821,Bug,Closed,Fixed,camel-ftp,Minor,Claus Ibsen,2010/06/16 05:14:55 +0100,2010/06/16 05:14:55 +0100,Claus Ibsen,2010/06/16 05:17:05 +0100,0.00150463,0.00150463,camel-ftp - SFTP in fileExists should handle exception being thrown with id code stating no such file,See nabblehttp://camel.465427.n5.nabble.com/camel-ftp-cannot-create-directory-using-sftp-tp479092p479092.html,2.3.0,2.4.0,0,0,5,1,2,1,1,0,0,0,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
2824,Bug,Closed,Fixed,camel-core,Major,Tarjei Huse,2010/06/16 20:43:30 +0100,2010/06/18 06:36:52 +0100,Claus Ibsen,2010/06/18 06:36:52 +0100,1.412060185,0,Deadlock in org.apache.camel.util.DefaultTimeoutMap,After running a camel route with a camel Aggregator for a while  I get a deadlock in org.apache.camel.util.DefaultTimeoutMap. A full processdump is attached to this bug.I have also tried to recreate this as failing testcase  but without any luck so far.,2.3.0,2.4.0,0,0,42,1,8,2,1,0,0,0,1,0,3,13,camel-core/src/main/java/org/apache/camel/management/JmxNotificationEventNotifier.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/TimeoutMap.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateFromWireTapTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorTest.java;camel-core/src/test/java/org/apache/camel/util/DefaultTimeoutMapTest.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/TimeoutMap.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateTimeoutManualTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateTimeoutOnlyTest.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;,0,0
2833,Improvement,Closed,Fixed,camel-http,Major,Nick Heudecker,2010/06/21 00:55:08 +0100,2010/06/21 01:52:23 +0100,Willem Jiang,2010/06/21 02:51:37 +0100,0.080891204,0.041134259,Support for Binary Files in HttpProducer,Presently  the HTTP Component doesn't support transferring binary files. The attached patch adds support. Tested successfully using a file -&gt; http route with a PUT.,2.3.0,2.4.0,0,0,25,1,5,2,1,0,0,0,0,0,4,12,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/file/JettyFileConsumerTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java;camel-core/src/main/java/org/apache/camel/converter/IOConverter.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/GZIPHelper.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpBindingPreservePostFormUrlEncodedBodyTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyContentTypeTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/file/JettyFileConsumerTest.java;components/camel-jetty/src/test/resources/java.jpg;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;,0,0
2837,Improvement,Closed,Fixed,,Major,Christian M?ller,2010/06/21 18:38:53 +0100,2010/06/21 18:38:53 +0100,Christian M?ller,2010/06/27 22:03:47 +0100,6.142291667,6.142291667,CsvDataFromat delimiter should also be configurable in the XML/Spring DSL,The org.apache.camel.model.dataformat.CsvDataFormat doesn't support any attributes or nested elements in the XML DSL. So  currently it is not possible for the XML/Spring DSL to change the token delimiter as it is possible in the Java DSL.See Nabble,2.4.0,2.4.0,0,0,40,1,2,2,1,0,0,0,0,0,2,8,components/camel-csv/src/main/java/org/apache/camel/dataformat/csv/CsvDataFormat.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvMarshalPipeDelimiterSpringTest.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvMarshalPipeDelimiterTest.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvUnmarshalPipeDelimiterSpringTest.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvUnmarshalPipeDelimiterTest.java;components/camel-csv/src/test/resources/org/apache/camel/dataformat/csv/CsvMarshalPipeDelimiterSpringTest-context.xml;components/camel-csv/src/test/resources/org/apache/camel/dataformat/csv/CsvUnmarshalPipeDelimiterSpringTest-context.xml;camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java;,0,0
2847,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/06/24 12:28:58 +0100,2010/06/24 12:28:58 +0100,Claus Ibsen,2010/06/24 14:15:37 +0100,0.0740625,0.0740625,Thread Name Syntax - Do not output endpoint parameters to be less verbose,By default thread names from consumers have the endpoint uri in the name  but those can become longCamel Thread 1 - ftp://sms01@localhost:2121/autreq/err?delay=5000&amp;filter=%23conaxRequestFilter&amp;move=.processed&amp;passiveMode=true&amp;password=sms01]So we should change {$name} to be just the endpoint without all the parameters. Eg clip after the first ? so it becomesCamel Thread 1 - ftp://sms01@localhost:2121/autreq/err]So we should change it to be ${name} the new short handed syntax ${fullName} as now with everything,2.3.0,2.4.0,0,0,86,1,3,2,1,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/spi/ExecutorServiceStrategy.java;camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java;camel-core/src/test/java/org/apache/camel/impl/DefaultExecutorServiceStrategyTest.java;,0,0
2854,Bug,Closed,Fixed,camel-core,Critical,Michael Chen,2010/06/25 00:47:08 +0100,2010/06/29 08:10:46 +0100,Claus Ibsen,2010/06/29 10:20:11 +0100,4.397951389,0.089872685,No consumers available on 'direct://xyz' endpoint,The following warning in log4j log shows up with no predictable reason:2010-06-24 14:07:01 090 WARN &#91;DefaultMessageListenerContainer-7:DirectProducer.java:42&#93; No consumers available on endpoint: Endpoint&#91;direct://UserCancelJobRequest&#93; to process: Exchange[JmsMessage: RunnerBase{locationToRunId='DV02YcABTE43HTRPATEGCBFk0m0'  jobrun_id=1234  requestOrigId='null'  secretKey='null'  replyToQueueOrTopic='null'  corrolationId='null'  requestCreationTime=Thu Jun 24 14:07:01 PDT 2010}]The endpoint &#91;direct://UserCancelJobRequest&#93; could be a number of different endpoints in our application and all of them are of 'direct:' type. When this happens  all messages that run through that endpoint will fail  and it will never recover unless the application is restarted.Also  if I restart the application and use that route immediately  that warning will not occur and the request will finish successfully. It seems to happen to routes that have not been used for a while after startup.When this happens  I can find the exact Camel endpoint/route/processor in JConsole  and nothing seems to be wrong. How can a 'direct:' endpoint runs out of consumer? Isn't the thread that product this warning THE thread to process the message?We recently upgraded from 5.2 to 5.3.2 and this starts to show up randomly. It is a show stopper!--Michael,2.2.0,2.4.0,0,0,175,1,24,4,1,0,0,0,1,0,1,15,camel-core/src/main/java/org/apache/camel/component/direct/DirectComponent.java;camel-core/src/main/java/org/apache/camel/component/direct/DirectConsumer.java;camel-core/src/main/java/org/apache/camel/component/direct/DirectEndpoint.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInPipelineTest.java;camel-core/src/test/java/org/apache/camel/component/direct/SendingToAlotOfDifferentDirectEndpointTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateTest.java;camel-core/src/test/java/org/apache/camel/issues/CoarseGrainedProcessorDefinitionIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/PipelineMEPTest.java;camel-core/src/test/java/org/apache/camel/processor/TransformToInvalidEndpointTest.java;camel-core/src/test/java/org/apache/camel/processor/TransformToTest.java;camel-core/src/test/java/org/apache/camel/processor/ValidationWithHandlePipelineTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/ProducerTemplateMaximumCacheSizeTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/example/PojoDualCamelContextConsumerTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/example/pojoDualCamelContextConsumer.xml;,0,0
2867,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/06/28 08:03:17 +0100,2010/06/28 08:03:17 +0100,Claus Ibsen,2010/06/28 08:04:45 +0100,0.001018519,0.001018519,convertBodyTo should handle null bodies,If the body is null and you use convertBodyTo you will get a no type converter exception due body is null. Instead it should accept the null body and continue routing.,2.3.0,2.4.0,0,0,31,1,2,1,1,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java;camel-core/src/main/java/org/apache/camel/processor/ConvertBodyProcessor.java;camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java;camel-core/src/main/java/org/apache/camel/processor/DelegateProcessor.java;camel-core/src/test/java/org/apache/camel/processor/ConvertBodyTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointTransformTest.java;,0,0
2889,Improvement,Closed,Fixed,camel-core; camel-spring,Minor,Claus Ibsen,2010/07/01 12:36:16 +0100,2010/07/01 12:36:16 +0100,Claus Ibsen,2010/07/01 13:48:38 +0100,0.05025463,0.05025463,Redelivery policy's retryUntil option should be renamed as retryWhile,The semantics of retryUntil are a bit counter-intuitive. I would naturally expect retryUntil(predicate) to mean retry until predicate is true  but it actually means retry until predicate is false. If you change the name of the option to retryWhile  you would get the natural interpretation retry while predicate is true.,2.3.0,2.4.0,0,0,50,1,2,1,1,0,0,0,0,0,1,12,camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;camel-core/src/test/java/org/apache/camel/issues/RetryContextScopedUntilRecipientListIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/RetryContextScopedUntilRecipientListParallelIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/RetryRouteScopedUntilRecipientListIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/RetryRouteScopedUntilRecipientListParallelIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRetryUntilTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRetryUntilWithDefaultErrorHandlerTest.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/SOnExceptionDefinition.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/OnExceptionTest.scala;,0,0
2891,Improvement,Closed,Fixed,,Major,james strachan,2010/07/01 16:24:36 +0100,2010/07/01 16:24:36 +0100,james strachan,2010/07/01 16:47:21 +0100,0.015798611,0.015798611,URIs for viewing a route as a language clashes with any other possible sub resource for routes (such as status),rather than: {id}/{lang}we should use something like {id}/lang/{lang}so that it doesn't gobble up: {id}/status or {id}/somethingElse,2.3.0,2.4.0,0,0,24,1,2,2,1,0,0,0,0,0,1,2,components/camel-web/src/main/java/org/apache/camel/web/resources/RoutesResource.java;components/camel-web/src/main/webapp/org/apache/camel/web/resources/RouteResource/index.jsp;,0,0
2892,Improvement,Closed,Fixed,camel-web,Major,james strachan,2010/07/01 16:47:59 +0100,,Unassigned,2010/07/01 16:49:41 +0100,0.001180556,,remove ugly warnings running tests since upgrading to jetty 7,lets zap these...[ main] log WARN java.lang.ClassNotFoundException: org.eclipse.jetty.jsp.JettyLog,2.3.0,2.4.0,0,0,8,0,1,1,1,0,0,0,0,0,1,1,components/camel-web/pom.xml;,0,0
2903,Improvement,Closed,Fixed,camel-cxf; camel-http,Major,Paul Mietz Egli,2010/07/02 20:06:08 +0100,2010/07/03 09:17:42 +0100,Willem Jiang,2010/07/03 09:40:21 +0100,0.565428241,0.015729167,update camel-http and camel-cxf features to use Commons Codec 1.4,The latest version of Commons Codec is available as an OSGi bundle  so it would be nice to update the features file for Camel 2.3 to use that version:&lt;bundle&gt;mvn:commons-codec/commons-codec/1.4&lt;/bundle&gt;I've been installing 1.4 by hand and removing the org.apache.servicemix.bundles.commons-codec/1.3_2 without any ill effects on camel-http.,2.3.0,2.4.0,0,0,53,1,2,2,1,0,0,0,0,0,1,2,platforms/karaf/features/src/main/resources/features-spring3.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
2909,Bug,Closed,Fixed,camel-jms,Major,Max Matveev,2010/07/05 15:11:36 +0100,2010/07/06 09:23:53 +0100,Claus Ibsen,2010/07/06 10:01:35 +0100,0.784710648,0.026180556,Oracle AQ does not support the JMSReplyTo property and therefore throws a 'JMS-102: Feature not supported' exception when the JMS provider tries to get it.,Oracle AQ does not support the JMSReplyTo property and therefore throws a 'JMS-102: Feature not supported' exception when the JMS provider tries to get it.,2.3.0,2.4.0,0,1,25,1,8,2,0,0,0,0,0,0,3,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;,0,0
2920,Improvement,Closed,Fixed,camel-core,Major,james strachan,2010/07/07 17:43:09 +0100,2010/07/08 06:11:20 +0100,Claus Ibsen,2010/07/09 08:25:33 +0100,1.612777778,1.093206019,more eager validation of routes,it seems you can dynamically create invalid routes which don't fail fast if there are errors.e.g.from('seda:foo').beanRef('doesNotExist'  'noMethodCalledThis')its only if a message is sent to 'seda:foo' that the whole thing barfs. We should maybe check that the to can be validated first before allowing the consumer to startup? If nothing else failing faster and earlier helps users spot errors sooner,2.3.0,2.4.0,0,0,69,1,5,2,0,0,0,0,0,0,2,16,camel-core/src/main/java/org/apache/camel/language/bean/BeanExpression.java;camel-core/src/main/java/org/apache/camel/model/BeanDefinition.java;camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanRefNotFoundTest.java;camel-core/src/test/java/org/apache/camel/component/bean/MethodCallBeanRefNotFoundTest.java;camel-core/src/test/java/org/apache/camel/view/DotViewTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/model/BeanDefinition.java;camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInfoTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanRefMethodNotFoundTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithMethodHeaderTest.java;camel-core/src/test/java/org/apache/camel/component/bean/MethodCallBeanRefMethodNotFoundTest.java;camel-core/src/test/java/org/apache/camel/component/bean/MethodCallBeanRefNotFoundTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorBeanThrowExceptionTest.java;camel-core/src/test/java/org/apache/camel/view/DotViewTest.java;,0,0
2925,Improvement,Closed,Fixed,,Major,Hadrian Zbarcea,2010/07/08 16:27:35 +0100,2010/07/08 16:27:35 +0100,Hadrian Zbarcea,2010/08/27 10:49:47 +0100,49.76541667,49.76541667,Use  forkMode=once for the surefire plugin to significantly speed up tests,We need to reduce the testing time in Camel since we got so many tests now. For this to work wee need to make sure there are no side effects outside of a test (which is not always simple).Side effects usually stem from using static fields in classes shared across multiple tests (such as caches of Exchanges  or whatnot)  which should be avoided.,2.3.0,2.5.0,0,0,63,1,4,2,0,0,0,0,0,0,0,0,,0,0
2926,Improvement,Closed,Fixed,camel-core; camel-spring,Minor,Ryan Callaghan,2010/07/08 20:09:19 +0100,2010/07/09 16:16:41 +0100,Claus Ibsen,2010/07/09 17:00:06 +0100,0.868599537,0.030150463,Injecting Properties into the PropertiesComponent with Spring,The component is quite nice - however a good improvement would be allowing properties to be injected through Spring.Currently there are two ways to do this using Spring.1) Declare a bean with an id of properties:&lt;bean id='properties' class='org.apache.camel.component.properties.PropertiesComponent'&gt; &lt;property name='location' value='classpath:com/mycompany/myprop.properties'/&gt;&lt;/bean&gt;This would be improved if we could simply say:&lt;bean id='properties' class='org.apache.camel.component.properties.PropertiesComponent'&gt; &lt;property name='location' ref='myPropertiesBean'/&gt;&lt;/bean&gt;This would allow properties to be declared in Spring using &lt;util:properties/&gt;. The same properties grouping could be injected into Camel as is injected into other beans.2) Inline within the camelContext defined in Spring:&lt;camelContext ...&gt; &lt;propertyPlaceholder id='properties' location='com/mycompany/myprop.properties'/&gt;&lt;/camelContext&gt;Similarly it would be nice to say:&lt;camelContext ...&gt; &lt;propertyPlaceholder id='properties' ref='myPropertiesBean' /&gt;&lt;/camelContext&gt;I noticed CAMEL-2791 is out there to access JVM system properties - it would be good to not have to load as a system property to access them in Camel.,2.3.0,2.4.0,0,1,188,1,4,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/properties/DefaultPropertiesResolver.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentRefTest.java;components/camel-spring/src/test/java/org/apache/camel/component/properties/SpringPropertiesComponentRefTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/properties/SpringPropertiesComponentRefTest.xml;,0,0
2935,Bug,Closed,Fixed,camel-core,Major,Martin Krasser,2010/07/10 11:01:35 +0100,2010/07/10 15:27:17 +0100,Claus Ibsen,2010/07/10 21:56:48 +0100,0.455011574,0.270497685,Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure,The recent change in ProducerCache.sendProducerCache.java public void send(Endpoint endpoint  Exchange exchange) { try { sendExchange(endpoint  null  null  exchange); // RECENT CHANGE HERE: // ensure that CamelExecutionException is always thrown if (exchange.getException() != null) { exchange.setException(wrapCamelExecutionException(exchange  exchange.getException())); } } catch (Exception e) { throw wrapCamelExecutionException(exchange  e); } }that throws a CamelExecutionException if exchange.getException is not null  makes it impossible for DefaultProducerTemplate.asyncCallback to report failures (other than fault messages) asynchronously via Synchronization.onFailureDefaultProducerTemplate.java public Future&lt;Exchange&gt; asyncCallback(final Endpoint endpoint  final Exchange exchange  final Synchronization onCompletion) { Callable&lt;Exchange&gt; task = new Callable&lt;Exchange&gt;() { public Exchange call() throws Exception { // FIXME: exception is thrown in Camel 2.4 where a normal return with answer.getException != null was done in Camel 2.3 Exchange answer = send(endpoint  exchange); if (answer.isFailed()) { onCompletion.onFailure(answer); } else { // ... } return answer; } }; // ... }This was working in Camel 2.3 (but unfortunately there wasn't any test case for it). I attached a patch for DefaultProducerTemplateAsyncTest that demonstrates the problem. I didn't commit a fix yet because I'm unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I'd like to hear other opinions before I continue.,2.3.0,2.4.0,0,0,257,1,12,2,0,0,0,0,0,1,1,10,camel-core/src/main/java/org/apache/camel/ProducerTemplate.java;camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/test/java/org/apache/camel/impl/DefaultConsumerTemplateTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateAsyncTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateTest.java;camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java;camel-core/src/test/java/org/apache/camel/processor/BeanInvocationThrowsExceptionTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpAuthMethodPriorityTest.java;,0,0
2937,Bug,Closed,Fixed,,Major,Hadrian Zbarcea,2010/07/11 17:26:41 +0100,2010/07/11 17:26:41 +0100,Hadrian Zbarcea,2010/07/11 17:36:37 +0100,0.006898148,0.006898148,StreamProducer does not close stream in camel-stream,Since the stream could be System.out or System.err  the producer does not close the stream ever. It should close all streams with the noted exceptions.,2.3.0,2.4.0,0,0,25,1,2,2,0,0,0,0,1,0,0,0,,0,0
2940,Bug,Closed,Fixed,,Major,Charles Moulliard,2010/07/12 16:12:16 +0100,2010/07/12 16:13:51 +0100,Charles Moulliard,2010/07/13 14:28:48 +0100,0.928148148,0.927048611,org.apache.camel.component.test package is imported in camel-spring component - generates error on OSGI platform,[ 86] [Installed ] [ ] [ 60] camel-spring (2.5.0.SNAPSHOT)karaf@root&gt; start 86Error executing command: Unresolved constraint in bundle org.apache.camel.camel-spring [86]: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;(package=org.apache.camel.component.test)(version&gt;=2.5.0)(!(version&gt;=2.5.1))) - [86.0] package; (&amp;(package=org.apache.camel.component.test)(version&gt;=2.5.0)(!(version&gt;=2.5.1)))karaf@root&gt; headers 86camel-spring (86)-----------------Bnd-LastModified = 1278946400750Build-Jdk = 1.6.0_20Built-By = CharlesmBundle-Activator = org.apache.camel.osgi.ActivatorBundle-Description = Camel Spring supportBundle-DocURL = http://www.apache.org/Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txtBundle-ManifestVersion = 2Bundle-Name = camel-springBundle-SymbolicName = org.apache.camel.camel-springBundle-Vendor = The Apache Software FoundationBundle-Version = 2.5.0.SNAPSHOTCreated-By = Apache Maven Bundle PluginExport-Package = org.apache.camel.spring.spi;uses:='org.springframework.context org.apache.camel.spi org.springframework.beans.factory org.apache.camel org.springframework.beans.factory.config org.apache.camel.builder org.springframework.transaction org.apache.commons.logging org.apache.camel.processor.exceptionpolicy org.apache.camel.processor org.apache.camel.util org.apache.camel.model org.springframework.transaction.support';version='2.5.0.SNAPSHOT' org.apache.camel.spring.util;uses:='org.apache.camel org.springframework.context org.apache.camel.util org.apache.commons.logging org.springframework.beans.factory org.springframework.util';version='2.5.0.SNAPSHOT' org.apache.camel.spring.remoting;uses:='org.apache.camel.util org.springframework.remoting.support org.apache.camel.component.bean org.apache.camel org.springframework.beans org.springframework.context org.apache.camel.spi org.apache.camel.spring.util org.springframework.beans.factory';version='2.5.0.SNAPSHOT' org.apache.camel.spring;uses:='org.apache.camel.impl org.apache.camel.util org.apache.commons.logging org.apache.camel org.springframework.beans org.springframework.context org.springframework.util org.springframework.beans.factory.config org.apache.camel.spring.util javax.xml.bind.annotation org.springframework.beans.factory org.apache.camel.builder org.apache.camel.model.dataformat org.springframework.context.event org.apache.camel.model.config org.apache.camel.model org.apache.camel.spi org.apache.camel.spring.spi org.apache.camel.view org.springframework.context.support org.apache.camel.spring.handler javax.xml.bind org.apache.camel.component.bean org.apache.camel.component.event org.springframework.transaction org.springframework.transaction.support';version='2.5.0.SNAPSHOT' org.apache.camel.spring.handler;uses:='org.springframework.beans.factory.support org.springframework.core org.springframework.util org.springframework.beans.factory.xml org.w3c.dom org.springframework.beans org.springframework.beans.factory.config org.springframework.beans.factory.parsing org.apache.camel.model.dataformat org.apache.camel.model.config org.apache.camel.util org.apache.camel.model org.apache.camel.spring javax.xml.bind org.springframework.beans.factory org.apache.camel.view org.apache.commons.logging org.apache.camel.model.loadbalancer org.apache.camel.builder.xml org.apache.camel.spring.remoting org.apache.camel.spi org.apache.camel org.apache.camel.model.language org.apache.camel.processor';version='2.5.0.SNAPSHOT' org.apache.camel.osgi;uses:='org.osgi.framework org.apache.camel.impl org.springframework.osgi.context org.apache.commons.logging javax.xml.bind.annotation org.springframework.context org.apache.camel.spring org.apache.camel.model org.apache.camel.model.loadbalancer org.apache.camel org.apache.camel.model.language org.springframework.beans.factory.xml org.apache.camel.model.dataformat org.apache.camel.spring.handler org.apache.camel.model.config org.apache.camel.spi';version='2.5.0.SNAPSHOT' org.apache.camel.component;uses:='org.apache.camel.impl org.apache.commons.logging org.springframework.core.io org.apache.camel org.apache.camel.converter org.apache.camel.spi';version='2.5.0.SNAPSHOT' org.apache.camel.component.event;uses:='org.apache.camel org.springframework.context org.apache.camel.impl org.springframework.beans org.apache.camel.util org.apache.camel.processor.loadbalancer';version='2.5.0.SNAPSHOT' org.apache.camel.component.test;uses:='org.apache.camel.impl org.apache.camel.util org.apache.camel org.apache.commons.logging org.apache.camel.component.mock';version='2.5.0.SNAPSHOT' org.apache.camel.component.validator;uses:='javax.xml.transform org.springframework.core.io javax.xml.transform.stream org.apache.camel.processor.validation org.apache.camel.impl org.apache.camel.component org.apache.commons.logging org.apache.camel';version='2.5.0.SNAPSHOT' org.apache.camel.component.xslt;uses:='org.apache.camel.impl org.apache.camel.component org.apache.commons.logging org.apache.camel org.springframework.core.io org.apache.camel.builder.xml org.apache.camel.util javax.xml.transform org.apache.camel.converter.jaxp org.apache.camel.spi';version='2.5.0.SNAPSHOT'Ignore-Package = org.apache.camel.spring.remoting org.apache.camel.component org.apache.camel.component.validator org.apache.camel.component.xslt org.apache.camel.spring.spi org.apache.camel.spring org.apache.camel.osgi org.apache.camel.spring.handler org.apache.camel.component.event org.apache.camel.spring.utilImplementation-Title = Camel :: SpringImplementation-Vendor = The Apache Software FoundationImplementation-Vendor-Id = org.apache.camelImplementation-Version = 2.5-SNAPSHOTImport-Package = javax.xml.bind javax.xml.bind.annotation javax.xml.bind.annotation.adapters javax.xml.transform javax.xml.transform.stream org.apache.camel;version='[2.5.0 2.5.1)' org.apache.camel.builder;version='[2.5.0 2.5.1)' org.apache.camel.builder.xml;version='[2.5.0 2.5.1)' org.apache.camel.component.bean;version='[2.5.0 2.5.1)' org.apache.camel.component.mock;version='[2.5.0 2.5.1)' org.apache.camel.component.properties;version='[2.5.0 2.5.1)' org.apache.camel.component.test;version='[2.5.0 2.5.1)' org.apache.camel.converter;version='[2.5.0 2.5.1)' org.apache.camel.converter.jaxp;version='[2.5.0 2.5.1)' org.apache.camel.impl;version='[2.5.0 2.5.1)' org.apache.camel.impl.converter;version='[2.5.0 2.5.1)' org.apache.camel.management;version='[2.5.0 2.5.1)' org.apache.camel.model;version='[2.5.0 2.5.1)' org.apache.camel.model.config;version='[2.5.0 2.5.1)' org.apache.camel.model.dataformat;version='[2.5.0 2.5.1)' org.apache.camel.model.language;version='[2.5.0 2.5.1)' org.apache.camel.model.loadbalancer;version='[2.5.0 2.5.1)' org.apache.camel.processor;version='[2.5.0 2.5.1)' org.apache.camel.processor.exceptionpolicy;version='[2.5.0 2.5.1)' org.apache.camel.processor.interceptor;version='[2.5.0 2.5.1)' org.apache.camel.processor.loadbalancer;version='[2.5.0 2.5.1)' org.apache.camel.processor.validation;version='[2.5.0 2.5.1)' org.apache.camel.spi;version='[2.5.0 2.5.1)' org.apache.camel.util;version='[2.5.0 2.5.1)' org.apache.camel.view;version='[2.5.0 2.5.1)' org.apache.commons.logging org.osgi.framework;version='[1.3 2)' org.osgi.util.tracker;version='[1.3 2)' org.springframework.beans;version='[2.5 4)' org.springframework.beans.factory;version='[2.5 4)' org.springframework.beans.factory.config;version='[2.5 4)' org.springframework.beans.factory.parsing;version='[2.5 4)' org.springframework.beans.factory.support;version='[2.5 4)' org.springframework.beans.factory.xml;version='[2.5 4)' org.springframework.context;version='[2.5 4)' org.springframework.context.event;version='[2.5 4)' org.springframework.context.support;version='[2.5 4)' org.springframework.core;version='[2.5 4)' org.springframework.core.io;version='[2.5 4)' org.springframework.osgi.context;version='[1.2 2)' org.springframework.remoting.support;version='[2.5 4)' org.springframework.transaction;version='[2.5 4)' org.springframework.transaction.support;version='[2.5 4)' org.springframework.util;version='[2.5 4)' org.w3c.domManifest-Version = 1.0Specification-Title = Camel :: SpringSpecification-Vendor = The Apache Software FoundationSpecification-Version = 2.5-SNAPSHOTTool = Bnd-0.0.357,2.5.0,2.5.0,0,0,174,1,2,2,0,0,0,0,0,0,1,1,components/camel-spring/pom.xml;,0,0
2958,Bug,Closed,Fixed,camel-core,Major,Christian Mouttet,2010/07/16 11:25:01 +0100,2010/07/17 10:57:03 +0100,Claus Ibsen,2010/07/17 13:16:29 +0100,1.077407407,0.096828704,java.util.ConcurrentModificationException in Method org.apache.camel.util.CaseInsensitiveMap.putAll(),Every now and then I'm facing the ConcurrentModificationException. It very hard to reproduce. This is my stack trace:Failed delivery for exchangeId: ba969718-9044-4261-bc57-ca10aafb0a03. Exhausted after delivery attempt: 1 caught: java.util.ConcurrentModificationExceptionjava.util.ConcurrentModificationException: null at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) &#91;na:1.6.0_20&#93; at java.util.HashMap$KeyIterator.next(HashMap.java:828) &#91;na:1.6.0_20&#93; at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:199) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:114) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:75) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) &#91;camel-core-2.3.0.jar:2.3.0&#93; at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:71) &#91;camel-http-2.3.0.jar:2.3.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) &#91;javaee.jar:9.1&#93;...Looks like CaseInsensitiveMap isn't enough thread save. But I have no idea what other thread is modifies the map. Most of the time everything is ok.,2.3.0,2.5.0,0,0,155,1,7,2,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/util/CaseInsensitiveMap.java;camel-core/src/test/java/org/apache/camel/util/CaseInsensitiveMapTest.java;,0,0
2960,Improvement,Resolved,Fixed,camel-jcr,Minor,Claus Ibsen,2010/07/17 15:40:36 +0100,2011/11/03 09:59:43 +0100,Claus Ibsen,2011/11/03 10:27:43 +0100,473.7827199,0.019444444,Upgrade to JCR 2.x,camel-jcr is based on 1.x. We should upgrade to 2.x which takes a bit of pain due API changes and the likes.,2.4.0,2.9.0,1,1,22,1,8,2,1,0,0,0,0,0,1,7,components/camel-jcr/pom.xml;components/camel-jcr/src/test/java/org/apache/camel/component/jcr/JcrAuthTestBase.java;components/camel-jcr/src/test/resources/log4j.properties;components/camel-jcr/src/test/resources/repository_with_auth.xml;parent/pom.xml;platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
2964,Improvement,Closed,Fixed,,Minor,Claus Ibsen,2010/07/19 12:50:04 +0100,2010/07/19 12:50:04 +0100,Hiram Chirino,2010/07/19 20:47:46 +0100,0.331736111,0.331736111,Upgrade to HawtDB 1.2,Upgrade to HawtDB 1.2,2.4.0,2.5.0,0,0,1,1,2,2,1,0,0,0,0,0,1,2,components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBFile.java;parent/pom.xml;,0,0
2969,Improvement,Closed,Fixed,camel-core; camel-ftp,Minor,Claus Ibsen,2010/07/20 09:59:02 +0100,2010/07/20 09:59:02 +0100,Claus Ibsen,2010/07/20 10:20:53 +0100,0.015173611,0.015173611,When polling consumers is shutdown  do less verbose logging for rollback strategies,To avoid logs having stacktraces or the likes which was caused by shutting down the application.See nabblehttp://camel.465427.n5.nabble.com/Camel-2-4-Shutdown-Exception-tp1479154p1479154.html,2.4.0,2.5.0,0,0,20,1,2,1,1,0,0,0,0,0,2,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFilePollingConsumerPollStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPollingConsumerPollStrategy.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFilePollingConsumerPollStrategy.java;,0,0
2970,Improvement,Closed,Fixed,camel-jms,Major,Claus Ibsen,2010/07/20 10:36:22 +0100,2010/07/20 10:36:22 +0100,Claus Ibsen,2010/07/25 09:37:19 +0100,4.958993056,4.958993056,JmsProducer should support non blocking routing engine,The JMS component is the most complex  and we left out improvements on purpose as we wanted 2.4 out before.Now its time to let the JmsProducer in request/reply mode leverage async processing so threads are not blocked while waiting for reply.,2.4.0,2.5.0,0,0,41,1,3,1,1,0,0,0,1,0,4,48,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/Requestor.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageHelper.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/MessageSentCallback.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/CorrelationMap.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/MessageSelectorCreator.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyHolder.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/UnknownReplyMessageException.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/UseMessageIdAsCorrelationIdMessageSentCallback.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/package.html;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/DeferredRequestReplyMap.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/FailedToProcessResponse.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/FutureHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/MessageSelectorProvider.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/PersistentReplyToFutureHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/PersistentReplyToRequestor.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/ReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/Requestor.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/package.html;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/async/AsyncJmsInOutTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/async/AsyncJmsProducerTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsInOutIssueTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsInOutUseMessageIDasCorrelationIDTest.java;components/camel-jms/src/test/resources/log4j.properties;components/camel-test/src/main/java/org/apache/camel/test/CamelTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsInOutPersistentReplyQueueTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/JMSTXInOutPersistentQueueTest.java;,0,0
2972,Bug,Closed,Fixed,,Major,Andreas Asmuss,2010/07/20 12:46:40 +0100,2010/07/25 13:09:24 +0100,Claus Ibsen,2010/07/27 17:09:18 +0100,7.182384259,2.166597222,onException not working correctly when using routeContext,When using a routeContext  the last (in the xml-file) defined route-scoped &lt;onException&gt; configuration is shared by the other routes in the context.http://camel.465427.n5.nabble.com/possible-onException-bug-when-using-routeContext-td1616244.html#a1616244,2.3.0; 2.4.0,2.5.0,0,0,25,1,5,3,1,1,0,0,0,0,1,29,camel-core/src/main/java/org/apache/camel/FailedToCreateConsumerException.java;camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/RecipientListProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionAndDLCErrorHandlerIssueReverseTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionAndDLCErrorHandlerIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionGlobalAndDLCErrorHandlerIssueReverseTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionGlobalAndDLCErrorHandlerIssueTest.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/OneRouteRefOnExceptionAndDLCErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/OneRouteRefOnExceptionAndTwoDLCErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/OneRouteRefOnExceptionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/OneRouteRefReverseOnExceptionAndDLCErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/OneRouteRefReverseOnExceptionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/TwoRouteRefOnExceptionAndDLCErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/TwoRouteRefOnExceptionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/TwoRouteRefReverseOnExceptionAndDLCErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/TwoRouteRefReverseOnExceptionTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/OneRouteRefOnException.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/OneRouteRefOnExceptionAndDLCErrorHandler.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/OneRouteRefOnExceptionAndTwoDLCErrorHandler.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/OneRouteRefReverseOnException.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/OneRouteRefReverseOnExceptionAndDLCErrorHandler.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/TwoRouteRefOnException.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/TwoRouteRefOnExceptionAndDLCErrorHandler.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/TwoRouteRefReverseOnException.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/TwoRouteRefReverseOnExceptionAndDLCErrorHandler.xml;,0,0
2978,Bug,Closed,Fixed,camel-netty,Major,Sean Parsons,2010/07/20 23:46:40 +0100,2010/07/26 13:47:01 +0100,Claus Ibsen,2010/07/26 14:33:44 +0100,5.616018519,0.03244213,java.net.SocketException: Too many open files with Apache Camel(Netty TCP) 2.4.0.,I've got a unit test that works fine with Apache Camel 2.3.0  but as soon as I upgraded to 2.4.0 it consistently started to fail.It performs a number of concurrent requests using this url:netty:tcp://localhost:2048?sync=trueIn both the client and server side of the unit test.There's also a sister test which does the same thing with Netty directly and that works in isolation  so it would appear something has been broken in the transition to 2.4.0. Previously this code was also using a beta version of Netty  but even updating that specific dependency has made no difference.,2.4.0,2.5.0,0,0,95,1,11,3,1,0,0,0,0,1,3,5,components/camel-netty/src/main/java/org/apache/camel/component/netty/ClientPipelineFactory.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/Netty2978IssueTest.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/ClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyComponent.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyEndpoint.java;,0,0
2979,Bug,Closed,Fixed,camel-ftp,Minor,Andreas Asmuss,2010/07/21 10:07:59 +0100,2010/07/22 15:31:18 +0100,Claus Ibsen,2010/07/22 16:00:59 +0100,1.245138889,0.020613426,FtpComponent: If login fails and disconnect=true another connection is opened.,In a route such as below a second connection to the ftp server is opened if the login fails.&lt;route&gt;  &lt;from uri='ftp:localhost/inbox/?username=usr&amp;password=pwd&amp;disconnect=true&amp;consumer.delay=60s&amp;maximumReconnectAttempts=0' /&gt;  &lt;to uri='file:test_data' /&gt; &lt;/route&gt; Further description: http://camel.465427.n5.nabble.com/FTP-Try-login-once-and-disconnect-if-failure-td1692660.html#a1692660,2.4.0,2.5.0,0,0,34,1,5,2,1,0,0,1,0,0,2,4,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpNoReconnectAttemptUnknownHostTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;,0,0
2980,Bug,Closed,Fixed,camel-jpa,Major,Christian M?ller,2010/07/21 15:55:03 +0100,2010/07/21 15:55:03 +0100,Christian M?ller,2010/08/05 13:35:59 +0100,14.90342593,14.90342593,camel-jpa doesn't use EntityManager.merge(entity) in the right way,The EntityManager.merge(entity) method returns the merged entity. The exchange in message body should be updated with the merged entity (what camel-jpa currently not do).I running into this problem  because after saving an entity in the database  the id field was still null. So  we don't know  which entity in the database is the corresponding to this entity... Have a look in the process method of JpaProducer and the Java doc from the EntityManager.Christian,2.4.0,2.5.0,0,0,86,1,7,2,1,0,0,0,0,0,1,4,components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaProducer.java;components/camel-jpa/src/test/java/org/apache/camel/component/jpa/AbstractJpaMethodTest.java;components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaUseMergeTest.java;components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaUsePersistTest.java;,0,0
2981,Improvement,Closed,Fixed,camel-http,Minor,Patrick Dumontel,2010/07/21 16:10:56 +0100,2010/07/22 04:00:36 +0100,Willem Jiang,2010/07/22 09:47:11 +0100,0.733506944,0.24068287,DefaultHttpBinding's populateRequestParameters should be more flexible when checking the content type on POST,Line 126 in DefaultHttpBinding checks if the request's method is POST and the content type is 'application/x-www-form-urlencoded'. This unfortunately fails to populate the request parameters of a POST request where the content type includes the charset  e.g. 'application/x-www-form-urlencoded; charset=UTF-8'. Could the equals be changed to startsWith?,2.3.0; 2.4.0,2.5.0,0,1,46,1,2,2,1,1,0,0,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java;,0,0
2986,Bug,Closed,Fixed,camel-jetty,Major,Martin Krasser,2010/07/22 20:19:11 +0100,2010/07/22 20:19:11 +0100,Martin Krasser,2010/07/22 20:27:14 +0100,0.005590278,0.005590278,IllegalStateException in CamelContinuationServlet under heavy load,Reason is a race between continuation.suspend() and continuation.resume(). It can occur that continuation.resume() is executed before continuation.suspend() leading to an IllegalStateException thrown by Jetty:java.lang.IllegalStateException: DISPATCHED initial at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:364) at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:769) at org.apache.camel.component.jetty.CamelContinuationServlet$1.done(CamelContinuationServlet.java:85) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78) at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:104) at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262) at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78) at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)This is the case when an async completion callback is faster than the thread that is concurrently executing the if (continuation.isInitial()) block. I'll commit a fix soon that also follows the recommendations in http://wiki.eclipse.org/Jetty/Feature/Continuations to always call continuation.suspend() before registering the continuation with a callback handler.,2.4.0,2.5.0,0,0,97,1,2,2,1,0,0,0,0,0,1,3,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelMultipartFilter.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;,0,0
2988,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/07/23 14:26:59 +0100,2010/07/23 14:26:59 +0100,Claus Ibsen,2010/07/23 14:28:43 +0100,0.001203704,0.001203704,Add removeEndpoints to CamelContext,It should support uri patterns so you can remove all endpoints using wild cards etc.removeEndpoints('activemq:queue:foo*')removeEndpoints('ftp:*'),2.4.0,2.5.0,0,0,15,1,2,1,1,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/TimeoutMap.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java;camel-core/src/test/java/org/apache/camel/util/DefaultTimeoutMapTest.java;,0,0
2993,Improvement,Closed,Fixed,camel-web,Major,Max Ullinger,2010/07/26 09:37:09 +0100,2010/07/26 09:37:09 +0100,Claus Ibsen,2010/08/19 18:56:14 +0100,24.38825231,24.38825231,Enable the deletion of routes via REST in camel-web,The camel-web allows a user to deploy and manipulate routes.It seems currently impossible to delete routes through camel-web.A delete operation on the route to be deleted would complete the REST interface: http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_servicese.g.:RouteResource.java@Delete public void removeRoute() { getCamelContext().removeRouteDefinition(this.name); },2.1.0; 2.2.0; 2.3.0; 2.4.0,2.5.0,1,0,41,1,7,2,1,1,0,0,0,0,2,4,components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.index.ssp;components/camel-web/src/main/java/org/apache/camel/web/resources/RouteResource.java;components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.index.ssp;components/camel-web/src/test/java/org/apache/camel/web/resources/RoutesTest.java;,0,0
3024,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/08/04 13:13:13 +0100,2010/08/04 13:13:13 +0100,Claus Ibsen,2010/08/05 11:46:46 +0100,0.939965278,0.939965278,Adding routes straight from XML should have Camel prepare the RouteDefintion as its done like in camel-spring,camel-spring does some preparation on the XML routes before they are added to CamelContext.When end users loads the XML routes themself using JAXB and add it straight to CamelContext  we should let camel-core prepare the routes as well.,2.4.0,2.5.0,0,0,38,1,3,1,1,0,0,0,0,0,1,7,camel-core/src/main/java/org/apache/camel/builder/RouteBuilder.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java;camel-core/src/test/java/org/apache/camel/impl/CamelContextAddRouteDefinitionsFromXmlTest.java;camel-core/src/test/resources/org/apache/camel/impl/route3.xml;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;,0,0
3030,Improvement,Closed,Fixed,camel-velocity,Minor,Claus Ibsen,2010/08/06 06:09:09 +0100,2010/08/06 08:09:24 +0100,Willem Jiang,2010/08/09 07:47:26 +0100,3.068252315,2.98474537,Velocity - Let it be able to load resources from both classpath and file system out of the box,See this blog entryhttp://www.thedwick.com/blog/2010/08/how-to-include-other-velocity-templates-from-apache-camel/We should pre configure Velocity to use both type of resource loaders.,2.4.0,2.5.0,0,0,18,1,1,1,1,0,0,0,0,0,2,5,tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/VelocityTest.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/example.vm;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/header.vm;components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-velocity/src/test/resources/org/apache/camel/component/velocity/letter.vm;,0,0
3035,Improvement,Closed,Fixed,camel-web,Major,james strachan,2010/08/09 11:17:20 +0100,2010/08/09 11:23:10 +0100,james strachan,2010/08/09 12:42:07 +0100,0.058877315,0.054826389,provide an optional interface Endpoints can provide to generate a simple String ID which can be used within the class loader to make JMX / REST APIs simpler to avoid having to encode large URIs,rather than taking the URI and encoding it  it would be nice if endpoints could just generate their own unique ID on construction (then we don't have lifecycle issues of keeping track of endpoints coming and going and maintaining a parallel map of Endpoint -&gt; ID etc).We could use the same ID when registering endpoints with JMX etc,2.4.0,2.5.0,0,0,58,2,1,1,1,0,1,0,1,0,2,8,components/camel-web/pom.xml;components/camel-web/src/main/java/org/apache/camel/web/model/EndpointLink.java;components/camel-web/src/main/java/org/apache/camel/web/resources/EndpointsResource.java;components/camel-web/src/main/resources/logback.xml;components/camel-web/src/main/webapp/org/apache/camel/web/resources/CamelContextResource.index.ssp;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/spi/HasId.java;camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java;,0,0
3045,Bug,Closed,Fixed,camel-flatpack,Major,Richard Sinelle,2010/08/11 13:38:12 +0100,2010/08/11 14:22:08 +0100,Claus Ibsen,2010/08/11 15:28:10 +0100,0.076365741,0.045856481,Flatpack component : unable to set the delimiter parameter in spring config file,It's not possible to set the delimiter parameter in spring configuration file or I don't find the way to do it !For example : &lt;route id='routeA'&gt; &lt;from uri='file:src/test/resources/csv?move=done/&amp;fileName=testfileRouteA.csv' /&gt; &lt;to uri='flatpack:delim:META-INF/Delimited.pzmap.xml?delimiter=;' /&gt;&lt;/route&gt;I get the following error :Exception in thread 'main' org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route routeA at: &gt;&gt;&gt; To&#91;flatpack:delim:META-INF/Delimited.pzmap.xml?ignoreFirstRecord=false&amp;splitRows=true&amp;delimiter=;&#93; &lt;&lt;&lt; in route: Route[[From[file:src/test/resources/csv?move=done/&amp;fileName=... because of Failed to resolve endpoint: flatpack://delim:META-INF/Delimited.pzmap.xml?delimiter=%3B&amp;ignoreFirstRecord=false&amp;splitRows=true due to: Could not find a suitable setter for property: delimiter as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: char with value ; at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:231) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93) at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:219) at org.apache.camel.spring.Main.doStart(Main.java:173) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56) at org.apache.camel.impl.MainSupport.run(MainSupport.java:114) at org.apache.camel.impl.MainSupport.run(MainSupport.java:291) at org.apache.camel.spring.Main.main(Main.java:97)If it's a bug  to solve it  it's just necessary to change the class org.apache.camel.component.flatpack.DelimitedEndpoint as below : change the flied definition like this (and getter/setter to): private String delimiter = ' '; private String textQualifier = '/''; and the the method createParser like this : public Parser createParser(Exchange exchange) throws InvalidPayloadException  IOException Unknown macro: { Reader bodyReader = ExchangeHelper.getMandatoryInBody(exchange  Reader.class); Resource resource = getResource(); if (delimiter == null || delimiter.equals(&quot;&quot;)) delimiter = &quot; &quot;; if (textQualifier == null || textQualifier.equals(&quot;&quot;)) textQualifier = &quot;&quot;&quot;; if (resource == null) { return getParserFactory().newDelimitedParser(bodyReader  delimiter.charAt(0)  textQualifier.charAt(0)); } else { return getParserFactory().newDelimitedParser(new InputStreamReader(resource.getInputStream())  bodyReader  delimiter.charAt(0)  textQualifier.charAt(0)  ignoreFirstRecord); } },2.4.0,2.5.0,0,0,243,1,3,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java;camel-core/src/test/java/org/apache/camel/converter/ConverterTest.java;,0,0
3047,Bug,Closed,Fixed,camel-jetty,Major,Paul Mietz Egli,2010/08/11 23:33:45 +0100,2010/08/13 09:00:39 +0100,Willem Jiang,2010/08/19 10:43:32 +0100,7.465127315,6.071446759,JettyHttpComponent.doStop() shuts down all servers in the VM  not just those associated with the component,We are running several bundles in Karaf with separate Camel contexts  each of which uses the camel-jetty component to expose services over HTTP. Each bundle has an assigned port and may listen on multiple URIs. We noticed that when we updated or shut down one of these bundles  all of the Jetty servers in the other bundles would stop listening on their respective ports.The problem is that the map of ConnectorRef objects in JettyHttpComponent is static  and therefore shared across the entire VM. Changing this from static to an instance variable fixed the issue for us.,2.4.0,2.5.0,0,0,97,1,11,4,1,0,0,1,0,0,1,10,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/SpringJettyNoConnectionRedeliveryTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/SpringJettyNoConnectionTest.java;components/camel-jetty/src/test/resources/org/apache/camel/component/jetty/jetty-noconnection-redelivery.xml;components/camel-jetty/src/test/resources/org/apache/camel/component/jetty/jetty-noconnection.xml;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/OSGiIntegrationTestSupport.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jetty/JettyProcessor.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jetty/OSGiMulitJettyCamelContextsTest.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/jetty/CamelContext1.xml;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/jetty/CamelContext2.xml;,0,0
3048,Improvement,Closed,Fixed,tooling,Minor,Claus Ibsen,2010/08/12 09:26:16 +0100,2010/08/12 09:26:16 +0100,Jonathan Anstey,2010/08/23 02:22:49 +0100,10.7059375,10.7059375,Archetype for creating component should have better sample component,The current sample is based on Direct component which is a bad sample as its a very special component.We should do a HelloWorldComponent the producer will just print the message body to system out the consumer is scheduled and triggers every 5th second with a dummy exchange,2.4.0,2.5.0,0,0,49,1,3,2,1,0,0,0,0,0,1,14,tooling/archetypes/camel-archetype-component/src/main/resources/META-INF/maven/archetype.xml;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/ReadMe.txt;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/DirectComponent.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/DirectConsumer.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/DirectEndpoint.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/DirectProducer.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/HelloWorldComponent.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/HelloWorldConsumer.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/HelloWorldEndpoint.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/java/HelloWorldProducer.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/resources/META-INF/services/org/apache/camel/component/direct;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/resources/META-INF/services/org/apache/camel/component/helloworld;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/test/java/HelloWorldComponentTest.java;,0,0
3050,Bug,Closed,Fixed,camel-spring,Major,Claus Ibsen,2010/08/12 14:30:15 +0100,2010/08/12 14:30:15 +0100,Claus Ibsen,2010/08/12 14:51:59 +0100,0.015092593,0.015092593,RouteBuilderRef should work out of the box with Spring 3 and dependency injection,Spring 3 changed internally how dependency resolution works. Its now worse as we have to play tricks in the Camel namespace handler to tell Camel the various pieces you can ref  should depend on Camel. Otherwise the dependency resolution in Spring is not working properly.This used to work like a charm in Spring 2.5.6.,2.4.0,2.5.0,0,0,54,1,2,1,1,0,0,0,0,0,1,2,components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/routeBuilderRef2.xml;,0,0
3060,Bug,Closed,Fixed,camel-core,Minor,Vid Cheruvu,2010/08/18 14:52:41 +0100,2010/08/19 04:47:20 +0100,Claus Ibsen,2010/08/19 04:47:20 +0100,0.579618056,0,Out of Heap memory issues with Camel-File processing large files,Camel-File component throws heap memory issue when processing csv file which is about 45MB with 218k Lines. http://camel.465427.n5.nabble.com/Java-heap-space-issue-with-reading-large-CSV-file-tt2638903.html#a2638903,2.3.0,2.5.0,0,0,21,1,2,1,0,0,0,1,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/file/GenericFileMessage.java;,1,1
3075,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/08/24 11:50:21 +0100,2010/08/24 11:50:21 +0100,Claus Ibsen,2010/08/24 19:20:16 +0100,0.31244213,0.31244213,Simple language - Allow unlimited usage of and or operators in expression,The simple language currently only allows using and or or operators once in the expression. We should allow unlimited usages of those.,2.0.0; 2.1.0; 2.2.0; 2.3.0; 2.4.0,2.5.0,0,0,22,1,2,1,0,1,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguageSupport.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyTest.java;camel-core/src/test/java/org/apache/camel/language/SimpleOperatorTest.java;camel-core/src/test/resources/log4j.properties;,0,0
3077,Bug,Closed,Fixed,,Major,John Ellis,2010/08/25 04:22:51 +0100,2010/08/25 12:52:31 +0100,Claus Ibsen,2010/08/25 12:52:31 +0100,0.353935185,0,Cache Component needs to check for null values during GET operations,EhCache often has a bit of lag time when invalidating expired cache elements  first setting the Element value to null and then removing the key. If you are hitting a cache rapidly one often will run across a key that is present in the cache that still has a null element entry.The logic for successfully key retrieval just needs to be slightly tweaked to check for null values.,2.4.0,2.5.0,0,0,68,1,3,2,0,0,0,0,0,0,1,3,components/camel-cache/pom.xml;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedXPathReplacer.java;,0,0
3081,Bug,Closed,Fixed,camel-netty,Major,Anand,2010/08/25 16:45:27 +0100,2010/08/26 07:55:26 +0100,Claus Ibsen,2010/08/26 09:03:32 +0100,0.679224537,0.047291667,netty timeout exception,eventhough message was received by netty procuder  it thows a timeout exception after 30 secs. here is the route and log. as this is a basic functionality I think this is critical priority. from('netty:tcp://localhost:6205?textline=true&amp;sync=true').process(new Processor() { int i=0; public void process(Exchange exchange) throws Exception { String body = exchange.getIn().getBody(String.class); Thread.sleep(5000); exchange.getOut().setBody('Bye 1' + body); // if(i++%2==1) throw new IOException('custom exception'); } }); from('file:///test/test/response') .convertBodyTo(String.class) .threads(1) .to(ExchangePattern.InOut 'netty:tcp://localhost:6205?textline=true&amp;sync=true') .to('log:+++ reply++++');2010-08-25 11:33:29 963 &#91;1 - file:///test/test/response&#93; FileConsumer DEBUG Total 1 files to consume2010-08-25 11:33:29 963 &#91;1 - file:///test/test/response&#93; FileConsumer DEBUG About to process file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; using exchange: Exchange[GenericFileMessage with file: GenericFile&#91;C:/test/test/response/hello1.txt&#93;]2010-08-25 11:33:31 510 [ Camel Thread 6 - Threads] SendProcessor DEBUG &gt;&gt;&gt;&gt; Endpoint&#91;tcp://localhost:6205&#93; Exchange&#91;GenericFileMessage with body: hello1&#93;2010-08-25 11:33:31 682 [ Camel Thread 6 - Threads] NettyProducer DEBUG Creating connector to address: localhost:62052010-08-25 11:33:31 682 [ Camel Thread 6 - Threads] NettyProducer DEBUG Writing body: hello12010-08-25 11:33:31 697 [ New I/O client worker #1-1] NettyProducer DEBUG Operation complete org.jboss.netty.channel.DefaultChannelFuture@944dbd2010-08-25 11:33:31 697 [ New I/O server worker #1-1] ServerChannelHandler DEBUG Incoming message: hello12010-08-25 11:33:36 697 [ New I/O server worker #1-1] ServerChannelHandler DEBUG Writing body: Bye 1hello12010-08-25 11:33:36 697 [ New I/O client worker #1-1] ClientChannelHandler DEBUG Message received: Bye 1hello12010-08-25 11:33:36 697 [ New I/O client worker #1-1] SendProcessor DEBUG &gt;&gt;&gt;&gt; Endpoint&#91;log://+++ reply++++&#93; Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] +++ reply++++ INFO Exchange&#91;ExchangePattern:InOut  BodyType:String  Body:Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] GenericFileOnCompletion DEBUG Done processing file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; using exchange: Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] FileUtil DEBUG Tried 1 to delete file: C:/test/test/response/hello1.txt.camelLock with result: true2010-08-25 11:33:36 713 [ New I/O client worker #1-1] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile&#91;C:/test/test/response/hello1.txt&#93; to: GenericFile&#91;C:/test/test/response/.camel/hello1.txt&#93;2010-08-25 11:33:36 713 [ New I/O client worker #1-1] FileUtil DEBUG Tried 1 to rename file: C:/test/test/response/hello1.txt to: C:/test/test/response/.camel/hello1.txt with result: true2010-08-25 11:34:06 886 [ Hashed wheel timer #1] DefaultErrorHandler DEBUG Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. On delivery attempt: 0 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;2010-08-25 11:34:06 886 [ Hashed wheel timer #1] DefaultErrorHandler ERROR Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange&#91;GenericFileMessage with body: Bye 1hello1&#93;,2.4.0,2.5.0,0,0,387,1,6,2,0,0,0,0,0,0,1,7,components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConfiguration.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyComponentWithConfigurationTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactorySynchTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyExchangeTimeoutTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyInOutWithForcedNoResponseTest.java;,0,0
3082,Bug,Closed,Fixed,camel-core,Major,Willem Jiang,2010/08/26 08:00:15 +0100,2010/08/26 08:00:15 +0100,Willem Jiang,2010/08/26 13:10:01 +0100,0.215115741,0.215115741,BeanConveter didn't try to covert the bean invocation argument rightly,Here is the mail thread about it.http://camel.465427.n5.nabble.com/Bug-in-the-BeanConverter-class-td2653552.html#a2653552,2.0.0; 2.1.0; 2.2.0; 2.3.0; 2.4.0,2.5.0,0,0,10,1,1,1,0,1,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/bean/BeanConverter.java;components/camel-spring/src/test/java/org/apache/camel/spring/remoting/Bean.java;components/camel-spring/src/test/java/org/apache/camel/spring/remoting/Invoker.java;components/camel-spring/src/test/java/org/apache/camel/spring/remoting/SpringRemotingBeanConverterTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/remoting/beanConverter.xml;,0,0
3091,Bug,Closed,Fixed,camel-quartz,Major,Hadrian Zbarcea,2010/08/31 02:58:16 +0100,2010/08/31 02:58:16 +0100,Hadrian Zbarcea,2010/08/31 14:46:07 +0100,0.4915625,0.4915625,QuartzEndpoint does not set the job name properly,Looks like the job.name argument is not se properly on the endpoint and defaults to the uri path.Another nastier issue (for which I should have probably created a separate issue) is that the uri gets messed up if it does not have the double slashes after the scheme (as in 'quartz:&lt;uri&gt;' vs 'quartz://&lt;uri&gt;') and the @cron argument contains '?'. The workaround (arguably) is to start the uri with 'quartz://...'.See nabble thread. Many thanks to SK for reporting this.,2.4.0,2.5.0,0,0,81,1,4,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/util/URISupport.java;camel-core/src/test/java/org/apache/camel/processor/SplitParallelTimeoutTest.java;camel-core/src/test/java/org/apache/camel/util/URISupportTest.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzEndpointConfigureTest.java;,0,0
3113,Bug,Closed,Fixed,camel-cxf,Major,Willem Jiang,2010/09/10 02:17:57 +0100,2010/09/10 02:17:57 +0100,Willem Jiang,2010/09/10 03:08:39 +0100,0.035208333,0.035208333,@QueryParam doesn't work for CxfBeans,Charle report an issue&#91;1&#93;  after tracing the code I found the DefaultCxfBeanBinding doesn't put the http query string into the cxf message.So the @QueryParam will not take effect on the resource beans.&#91;1&#93;http://camel.465427.n5.nabble.com/camel-cxfbean-JAX-Rs-QueryParam-td2827252.html#a2827252,2.2.0; 2.3.0; 2.4.0,2.5.0,0,0,34,1,2,2,0,1,0,0,0,0,2,7,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/DefaultCxfBeanBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBean.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/cxfbean/CxfBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java;,0,0
3120,Bug,Closed,Fixed,,Minor,Claus Ibsen,2010/09/14 09:43:08 +0100,2010/09/14 16:00:18 +0100,Claus Ibsen,2010/09/14 16:00:41 +0100,0.2621875,0.000266,hawtdb - Should work in OSGi,The decode method in ObjectCodec should wrap the causes stacktrace in the wrapped IOException.For example OSGi frameworks may be pesky and we want to be able to see whatever stacktrace it may thrown on you. public T decode(DataInput dataIn) throws IOException { int size = dataIn.readInt(); byte[] data = new byte[size]; dataIn.readFully(data); ByteArrayInputStream bytesIn = new ByteArrayInputStream(data); ObjectInputStream objectIn = new ObjectInputStream(bytesIn); try { return (T) objectIn.readObject(); } catch (ClassNotFoundException e) { throw new IOException(e.getMessage()); } }For being JDK 1.5 compatible you need to do it like public static IOException createIOException(String message  Throwable cause) { IOException answer = new IOException(message); answer.initCause(cause); return answer; },2.4.0,2.5.0,0,1,136,1,8,1,0,0,0,0,0,0,1,2,tests/camel-itest-osgi/pom.xml;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/hawtdb/HawtDBAggregateRouteTest.java;,0,0
3121,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/09/14 12:39:12 +0100,2010/09/14 12:39:12 +0100,Claus Ibsen,2010/09/14 13:00:54 +0100,0.015069444,0.015069444,Splitter EIP - The sub exchanges should not contains on completions from original Exchange,See nabblehttp://camel.465427.n5.nabble.com/Camel-calling-commit-too-early-when-using-split-seda-file-endpoint-tp2830894p2830894.html,2.4.0,2.5.0,0,0,5,1,6,2,0,0,0,0,0,0,3,5,camel-core/src/test/java/org/apache/camel/processor/SplitterStreamingUoWIssueTest.java;camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/test/java/org/apache/camel/processor/SplitterStreamingUoWIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterUoWIssueTest.java;parent/pom.xml;,0,0
3123,Improvement,Closed,Fixed,camel-core,Major,Stephan Siano,2010/09/14 14:27:16 +0100,2010/09/15 09:06:42 +0100,Claus Ibsen,2010/09/15 12:57:54 +0100,0.937939815,0.160555556,Performance/scalability issue for converter lookup,In a simple HTTP-&gt;HTTP proxy scenario (whith a Jetty or a servlet endpoint  that does not matter) I observe a very severe performance regression between Camel 2.2.0 (as in servicemix 4.2) and camel 2.4.0 running on a apache karaf 2.0.0 OSGi stack. On the same hardware I get a throughput of 3500 messages per second with Camel 2.2.0  but only 210 messages per second on Camel 2.4.0 (both servlet-&gt;HTTP). If I replace the http endpoint with a log endpoint the throughput will be about 1500 messages per second in both cases.I have done some profiling for this: The active CPU times as shown in the profiler remain approximately the same for both versions  however if I monitor wait times  I get very long wait times for org.apache.camel.impl.DefaultMessage.getHeader(java.lang.String java.lang.Class) calls. If I break this down I see the java.beans.PropertyEditorManager.findEditor(java.lang.Class) call in org.apache.camel.impl.converter.PropertyEditorTypeConverter.convertTo(java.lang.Class java.lang.Object). The findEditor() method is synchronized and initializes some class loading which takes some time.Why is it necessary to instantiate the type converter for each message?,2.4.0,2.5.0,0,2,165,1,16,2,0,0,0,0,1,1,4,14,camel-core/src/main/java/org/apache/camel/impl/converter/PropertyEditorTypeConverter.java;camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/PropertyEditorTypeConverter.java;camel-core/src/test/java/org/apache/camel/converter/ObjectConverterTest.java;camel-core/src/test/resources/log4j.properties;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyConverter.java;components/camel-jetty/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java;components/camel-jetty/src/test/resources/log4j.properties;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/PropertyEditorTypeConverter.java;camel-core/src/test/java/org/apache/camel/converter/PropertyEditorTypeConverterIssueTest.java;camel-core/src/main/java/org/apache/camel/impl/converter/PropertyEditorTypeConverter.java;,0,0
3124,Bug,Closed,Fixed,camel-rss,Minor,Ernst Bunders,2010/09/14 14:59:43 +0100,2010/09/17 12:16:08 +0100,Claus Ibsen,2010/09/17 12:27:06 +0100,2.894016204,0.007615741,polling of feeds in FeedEntryPollingConsumer is broken.,The FeedEntryPollingConsumer class implements the poll() method for the 'splitEntries' mode of the RssEndpoint is broken.You can think of two ways that polling feeds could work:1) A feed is created  then one item is processed  then the delay  then process another item. This way the feed is kept between calls to poll().2) A feed is created  then all the items are processed  the feed is cleared  and then the delay.But the way it presently works:A feed is created  one items is processed  and the feed is cleared  then the delay  and again the feed is created and the next item is cleared.This is clearly wrong. Feed entries can be missed  because the index of the next item to process is stored over polls but the list isn't. Also this creates a big network overhead when polling very active feeds such as twitter search...This is easy to fix. In the below code:public void poll() throws Exception { Object feed = createFeed(); populateList(feed); while (hasNextEntry()) { Object entry = list.get(entryIndex--); boolean valid = true; if (entryFilter != null) { valid = entryFilter.isValidEntry(endpoint  feed  entry); } if (valid) { Exchange exchange = endpoint.createExchange(feed  entry); getProcessor().process(exchange); // return and wait for the next poll to continue from last time (this consumer is stateful) return; } }The return (at line 56 of org.apache.camel.component.feed.FeedEntryPollingConsumer) should be deleted.,2.4.0,2.5.0,0,0,244,1,7,2,0,0,0,0,1,0,1,2,components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomEntryPollingConsumer.java;components/camel-atom/src/main/java/org/apache/camel/component/feed/FeedEntryPollingConsumer.java;,0,0
3128,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/09/16 14:41:23 +0100,2010/09/16 14:41:23 +0100,Claus Ibsen,2010/09/16 15:13:16 +0100,0.022141204,0.022141204,Using $ in endpoint uri causes thread name parser to fail,See nabblehttp://camel.465427.n5.nabble.com/How-to-specify-route-to-folder-with-in-actual-name-tp2839895p2839895.html,2.4.0,2.5.0,0,0,5,1,2,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumeWithDollarInPathTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultExecutorServiceStrategyTest.java;,0,0
3129,Improvement,Closed,Fixed,camel-core,Major,Bruno Borges,2010/09/16 17:17:01 +0100,2010/09/16 18:29:27 +0100,Claus Ibsen,2010/09/16 18:32:31 +0100,0.052430556,0.00212963,Support user-defined shutdown timeout for CamelTestSupport,Would be nice if CamelTestSupport could allow user to define the Shutdown timeout of CamelContext.We at Neociclo are finding difficult to debug through JUnit tests because of the hard-coded 10s timeout.public void setUp() ... { ... context = createCamelContext(); assertValidContext(context); // reduce default shutdown timeout to avoid waiting for 300 seconds&#8211; context.getShutdownStrategy().setTimeout(10);++ context.getShutdownStrategy().setTimeout(getShutdownTimeout()); ...}+ protected int getShutdownTimeout() {+ return 10;+ },2.4.0,2.5.0,0,0,61,1,2,1,0,0,0,0,0,0,1,2,components/camel-test/src/main/java/org/apache/camel/test/CamelTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;,0,0
3136,Bug,Closed,Fixed,camel-cxf,Major,Dmitry Drozdov,2010/09/19 14:18:14 +0100,2010/09/19 16:29:43 +0100,Claus Ibsen,2010/09/19 16:47:29 +0100,0.103645833,0.012337963,cxfbean creates another instance of the class instead of directly using the referenced bean,... this makes it impossible to inject properties to the @WebService class&lt;camelContext&gt; &lt;route&gt; &lt;from uri='....' /&gt; &lt;to uri='cxfbean:handler' /&gt; &lt;/route&gt;&lt;/camelContext&gt;&lt;bean id='handler' class='a.b.c.Handler'&gt; &lt;property name='prop1' value='5' /&gt;&lt;/bean&gt;when 'handler' is created by Spring  its 'prop1' is set to '5'when the cxfbean:handler is triggered  the 'prop1' is null  because CXF created another instance of Handler instead of using the one created by Spring,2.4.0,2.5.0,0,0,60,1,8,2,0,0,0,0,0,0,1,4,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanEndpoint.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/cxfbean/CxfBeanWithWsdlLocationInBeanAndIoCTest.java;components/camel-cxf/src/test/java/org/apache/camel/wsdl_first/PersonImplWithWsdl.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/cxfbean/CxfBeanWithWsdlLocationInBeanAndIoCTest-context.xml;,0,0
3139,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/09/21 07:32:37 +0100,2010/09/21 07:32:37 +0100,Claus Ibsen,2010/09/21 10:13:33 +0100,0.111759259,0.111759259,Use ActiveMQUuidGenerator as the default uuid generator as its faster than the JDK UUID generator,The Java UUID is too slow. Switching back to AMQ based will improve performance.We should just have to switch to use the JDK UUID for the camel-gae component as it cannot use the AMQ based.,2.1.0; 2.2.0; 2.3.0; 2.4.0,2.5.0,0,0,35,1,3,1,0,1,1,0,1,1,1,12,camel-core/src/main/java/org/apache/camel/impl/ActiveMQUuidGenerator.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java;camel-core/src/test/java/org/apache/camel/impl/ActiveMQUuidGeneratorTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java;camel-core/src/test/java/org/apache/camel/impl/JavaUuidGeneratorTest.java;camel-core/src/test/java/org/apache/camel/impl/SimpleUuidGeneratorTest.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/context/GaeDefaultCamelContext.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/context/GaeSpringCamelContext.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/DefaultJettyHttpBinding.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyContentExchange.java;components/camel-spring/src/test/java/org/apache/camel/spring/CamelContextFactoryBeanTest.java;,0,0
3140,Improvement,Closed,Fixed,camel-core,Minor,Martin Krasser,2010/09/21 08:15:18 +0100,2010/09/21 08:15:18 +0100,Martin Krasser,2010/09/23 19:24:02 +0100,2.464398148,2.464398148,Context-sensitive setting of default UuidGenerator,Use JavaUuidGenerator in GAE environment  otherwise use ActiveMQUuidGenerator as default UuidGenerator.,2.4.0,2.5.0,0,0,12,1,7,2,0,0,0,0,0,0,0,0,,0,0
3141,Bug,Closed,Fixed,camel-core; camel-spring,Minor,Achim Nierbeck,2010/09/21 13:31:10 +0100,2010/09/21 13:47:31 +0100,Claus Ibsen,2010/09/21 15:17:44 +0100,0.07400463,0.062650463,Route autoStartup configurable through Property,Using Camel 2.4 I want to make the usage of a certain route configurable through properties. &lt;camelContext id='camel' trace='true' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;route id='configurable_1' autoStartup='{{startup_1}}'&gt; &lt;from uri='direct:start_1'/&gt; &lt;to uri='mock:end_1'/&gt; &lt;/route&gt; &lt;route id='configurable_2' autoStartup='{{startup_2}}'&gt; &lt;from uri='direct:start_2'/&gt; &lt;to uri='mock:end_2'/&gt; &lt;/route&gt;&lt;/camelContext&gt;But if I do use the PropertyPlaceholder on the CamelContext like below it works. &lt;camelContext id='camel' trace='true' autoStartup='{{startup_context}}'So is this a bug or should this work this way?,2.4.0,2.5.0,0,0,94,1,5,2,0,0,0,0,0,0,1,12,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java;camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java;camel-core/src/test/java/org/apache/camel/impl/ActiveMQUuidGeneratorTest.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/RouteAutoStartupPropertiesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/DefaultPackageScanClassResolverTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/RouteAutoStartupFalseTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/RouteAutoStartupTrueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/route.properties;,0,0
3143,Bug,Closed,Fixed,osgi,Major,Claes Redestad,2010/09/21 20:40:01 +0100,2010/09/22 07:31:00 +0100,Claus Ibsen,2010/09/22 10:40:42 +0100,0.58380787,0.131736111,OsgiDefaultCamelContext.getTypeConverterRegistry() returns null,The showed up when using dozer as shown in http://camel.apache.org/dozer-type-conversion.html  whose DozerTypeConverterLoader tries to get the type converter registry using: {{{TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();}}}Plausible error:OsgiDefaultCamelContext.java @Override protected TypeConverter createTypeConverter() { return new OsgiTypeConverter(bundleContext  getInjector()); }DefaultCamelContext.javapublic TypeConverterRegistry getTypeConverterRegistry() { if (typeConverterRegistry == null) { // init type converter as its lazy if (typeConverter == null) { getTypeConverter(); } // type converter is usually the default one that also is the registry if (typeConverter instanceof DefaultTypeConverter) { typeConverterRegistry = (DefaultTypeConverter) typeConverter; } } return typeConverterRegistry; }Error:getTypeConverter() returns an OsgiTypeConverter OsgiTypeConverter does not inherit from DefaultTypeConverter  thus the instanceof returns false=&gt; null is returnedSolution:Lots of different ways to do this  and it's getting late here. In this case  maybe it's OsgiDefaultCamelContext's responsibility to also override getTypeConverterRegistry with something along the lines of:@Overridepublic TypeConverterRegistry getTypeConverterRegistry() { if (typeConverterRegistry == null) { // init type converter as its lazy if (typeConverter == null) { getTypeConverter(); } // type converter is usually the default one that also is the registry if (typeConverter instanceof OsgiDefaultTypeConverter) { typeConverterRegistry = ((OsgiDefaultTypeConverter) typeConverter).getRegistry(); } } return typeConverterRegistry; }We've employed an (ugly) workaround in a local version of DozerTypeConverterLoader.java: TypeConverter typeConverter = camelContext.getTypeConverter(); DefaultTypeConverter registry = null; if (typeConverter instanceof DefaultTypeConverter) { registry = (DefaultTypeConverter)typeConverter; } else if (typeConverter instanceof OsgiTypeConverter) { OsgiTypeConverter osgiTypeConverter = (OsgiTypeConverter)typeConverter; registry = osgiTypeConverter.getRegistry(); },2.4.0,2.5.0,0,0,289,1,10,3,0,0,0,0,0,0,1,14,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java;components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerTypeConverterLoader.java;components/camel-dozer/src/test/java/org/apache/camel/converter/dozer/DozerTypeConverterTest.java;components/camel-dozer/src/test/java/org/apache/camel/converter/dozer/SpringDozerTypeConverterTest.java;components/camel-dozer/src/test/java/org/apache/camel/converter/dozer/model/Address.java;components/camel-dozer/src/test/java/org/apache/camel/converter/dozer/model/Customer.java;components/camel-dozer/src/test/resources/application-context.xml;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/dozer/DozerTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/dozer/model/Address.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/dozer/model/Customer.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/dozer/service/Customer.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/dozer/CamelContext.xml;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/dozer/dozer-mapping.xml;,0,0
3144,Bug,Closed,Fixed,camel-core; camel-ftp,Major,Rapha?l Luta,2010/09/21 20:59:32 +0100,2010/09/22 07:17:33 +0100,Hadrian Zbarcea,2010/09/22 07:22:40 +0100,0.432731481,0.003553241,camel-ftp: fileExist=Fail not honored when producer works in FTP root path,when using a route with ftp producer such as : &lt;to uri='ftp://user@host/?fileExist=Fail&amp;fileName=test&amp;password=mypass' /&gt;The route will not correctly fail if the fileName already exists.It will work in any sub-directory: &lt;to uri='ftp://user@host/mydir?fileExist=Fail&amp;fileName=test&amp;password=mypass' /&gt;The root cause of the bug is an incorrect test in org.apache.camel.util.FileUtil.onlyPath() in component camel-core.This method returns null when the parameter string is '/'. It should return '/'.The attached patch fixes the issue.,2.4.0,2.5.0,0,1,63,2,9,3,0,0,0,0,0,0,3,9,camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerRootFileExistFailTest.java;,0,0
3159,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/09/26 06:55:20 +0100,2010/09/26 14:45:45 +0100,Claus Ibsen,2010/09/26 15:31:32 +0100,0.358472222,0.031793981,Aggregator EIP - Add option to ignore timeout completed,See nabblehttp://camel.465427.n5.nabble.com/Aggregator-Howto-remove-from-persistency-tp2852702p2852702.html&gt; I was thinking about something like a removeOnTimeout (default=false of&gt; course) that would use the existing completionTimeout attribute but change&gt; its behavior to remove the aggregated message instead of publishing it.&gt; &#8211;Yeah I can kinda see an use case for this. You are using the timeoutas a last resort to just say hey we could not aggregate this in letssay 4 hours.So lets just ignore the message.Having an option on the aggregate to just auto discard those messageon timeout would help there to avoid the CBR and checking yourself.Just wondering if this is a use case others use? Its still kindadangerous to discard messages.,2.4.0,2.5.0,0,0,109,1,3,1,0,0,0,0,0,0,3,8,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateDiscardOnTimeoutTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/aggregator/SpringAggregateDiscardOnTimeoutTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/aggregator/SpringAggregateDiscardOnTimeoutTest.xml;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateDiscardOnTimeoutTest.java;,0,0
3160,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/09/26 07:28:07 +0100,2010/09/26 07:28:07 +0100,Claus Ibsen,2010/09/26 08:07:01 +0100,0.027013889,0.027013889,Add alternative start token for simple language to avoid clash with Spring PropertyPlaceholder,When using Spring property placeholders it will scan for ${ } tokens  which is the same set the Camel Simple language uses.This makes it harder to configure file endpoints where the file name is a simple expression because Spring interferes.So by introducing the $simple{ as alternative start token  we can avoid the clash.,2.4.0,2.5.0,0,0,53,1,2,1,0,0,0,0,0,0,1,11,camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguageSupport.java;camel-core/src/test/java/org/apache/camel/language/FileLanguageTest.java;camel-core/src/test/java/org/apache/camel/language/SimpleTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringPropertyPlaceholderFileEndpointIssueTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringPropertyPlaceholderFileEndpointIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringPropertyPlaceholderIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/myprop.properties;,0,0
3170,Bug,Closed,Fixed,camel-ftp,Minor,Claus Ibsen,2010/09/28 12:54:26 +0100,2010/09/28 12:54:26 +0100,Claus Ibsen,2010/09/28 13:01:27 +0100,0.004872685,0.004872685,camel-ftp - Setting password and username using UserInfo on uri does not work,You should be able to set ftp endpoint uri as:'ftp://scott@localhost:' + getPort() + '/deletefile?password=tiger&amp;binary=false&amp;delete=true'And when using password and username in the userinfo part of the uri:'ftp://tiger:scott@localhost:' + getPort() + '/deletefile?binary=false&amp;delete=true'The latter didn't work,2.4.0,2.5.0,0,0,57,1,2,1,0,0,0,0,0,0,1,4,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpDeleteFileScottTigerTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpDeleteFileTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinarySampleTest.java;,0,0
3181,Bug,Closed,Fixed,camel-cxf,Major,Adrian Trenaman,2010/09/30 10:13:07 +0100,2010/09/30 10:16:27 +0100,Willem Jiang,2010/09/30 15:00:18 +0100,0.19943287,0.197118056,Confusing IllegalArgumentException when address attribute isn't specified on CXF endpoint.,If you create CXF endpoint  like this  without the address attribute   &lt;cxf:cxfEndpoint id='greeting' wsdlURL='greeting.wsdl' serviceClass='tutorial.hanbo.webservice.Greeting' &gt; &lt;/cxf:cxfEndpoint&gt; ... then you get a really confusing error when you deploy the endpoint in ServiceMix: the error is Caused by: java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint does not implement createEndpointUri() to create a default value at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:83) at org.apache.camel.management.DefaultManagementLifecycleStrategy.onEndpointAdd(DefaultManagementLifecycleStrategy.java:205) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:386) We find that if you explicitly set the address then the problem goes away (see below) &lt;cxf:cxfEndpoint id='greeting' wsdlURL='greeting.wsdl' address='http://localhost:9000/GreeterContext/SOAPMessageService' serviceClass='tutorial.hanbo.webservice.Greeting' &gt; &lt;/cxf:cxfEndpoint&gt; On camel-cxf web page  the 'address' attribute is not mentioned anywhere in the table of URI properties  so you might be lead to believe that it's not necessary.,2.4.0,2.5.0,0,0,143,1,5,3,0,0,0,0,0,0,1,2,components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/WsdlFirstBeansPayloadMode.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/WsdlFirstProcessor.xml;,0,0
3188,Bug,Closed,Fixed,camel-core,Major,Brian Feaver,2010/10/01 21:21:02 +0100,2010/10/02 09:00:01 +0100,Claus Ibsen,2010/10/02 16:16:43 +0100,0.788668981,0.303263889,Concurrent consumers on seda endpoint can cause content routing to mismatch,When consuming concurrently from a seda endpoint  when the route contains a content router based on the header  it will randomly route through the wrong choice.In my specific case  I was consuming from an activemq queue  which would receive messages with a header that would then determine which route it would follow. It would randomly send messages down the wrong path. When I turned on tracing  it would behave itself. It also behaved itself when I limited it to only a single consumer. I was  however  able to duplicate it with the unit test below. Due to the concurrency issue  the test can occasionally pass  but run it a couple times and it should fail. It'll either receive 2 messages when it should have only gotten 1  or it will get no messages when it should have gotten 1.ConcurrencyTest.javaimport org.apache.camel.EndpointInject;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.CamelTestSupport;public class ConcurrencyTest extends CamelTestSupport { @EndpointInject(uri = 'mock:result') protected MockEndpoint resultEndpoint; @EndpointInject(uri = 'mock:otherResult') protected MockEndpoint otherResultEndpoint; @Produce(uri = 'seda:start') protected ProducerTemplate template; public void testSendMatchingMessage() throws Exception { String expectedBody = '&lt;matched/&gt;'; resultEndpoint.expectedBodiesReceived(expectedBody); otherResultEndpoint.expectedBodiesReceived(expectedBody); template.sendBodyAndHeader(expectedBody  'myDirection'  'send'); template.sendBodyAndHeader(expectedBody  'myDirection'  'received'); resultEndpoint.assertIsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() { return new RouteBuilder() { public void configure() { from('seda:start?concurrentConsumers=10')// from('seda:start?concurrentConsumers=1') .choice() .when(header('myDirection').isEqualTo('send')).to('mock:result') .when(header('myDirection').isEqualTo('received')).to('mock:otherResult'); } }; }},2.3.0; 2.4.0,2.5.0,0,0,257,1,4,1,0,1,0,1,0,1,1,7,camel-core/src/main/java/org/apache/camel/BinaryPredicate.java;camel-core/src/main/java/org/apache/camel/builder/BinaryPredicateSupport.java;camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/builder/PredicateBuilderConcurrentTest.java;camel-core/src/test/java/org/apache/camel/builder/PredicateBuilderTest.java;camel-core/src/test/java/org/apache/camel/issues/CBRConcurrencyIssueTest.java;,0,0
3193,Bug,Closed,Fixed,camel-jms,Major,Christian Schneider,2010/10/04 07:24:15 +0100,2010/10/04 07:24:15 +0100,Christian Schneider,2010/10/05 13:54:48 +0100,1.271215278,1.271215278,request/reply over JMS using temporary queues - if connection lost the temporary queue is not re-created which causes the producer to not work anymore,To recreate the problem you need a route with a jms inout endpoint that is configured to use a temporary destination for replies. Till now I was only able to show the problem with tibco ems. Start broker Start the jms consumer that replies to the request Start the route Send a request/reoply exchange (should work) Stop the broker Wait long enough for the client to do a full reconnect (I used connectionFactory.setReconnAttemptCount(1) on the client so I do not have to wait so long) Start the broker -&gt; The jms component will do a full new connect Send a request/reoply exchange -&gt; Now a InvalidDestination Exception happensThe client route will not work anymore until a restart as it creates the temporary destination only once and it is invalid now.,2.4.0,2.5.0,0,0,132,1,13,2,0,0,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/temp/JmsReconnectTest.java;,0,0
3201,Bug,Closed,Fixed,camel-cxf,Major,S. Ali Tokmen,2010/10/06 13:59:02 +0100,2010/10/06 14:38:56 +0100,Hadrian Zbarcea,2010/10/07 07:07:02 +0100,0.713888889,0.686180556,The CxfConsumer's getContinuation method might throw NPE,HelloWhen trying the latest CAMEL 2.5.0 SNAPSHOT  I got a NPE:java.lang.NullPointerException at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:129) at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:65) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)...,2.5.0,2.5.0,0,0,27,1,10,4,0,0,0,1,0,0,0,0,,0,0
3202,Improvement,Closed,Fixed,camel-core,Minor,Norman Maurer,2010/10/06 15:09:03 +0100,2010/11/27 16:33:10 +0100,Claus Ibsen,2010/11/27 16:33:10 +0100,52.05841435,0,Add Exchange creation time to the exchange as property,Sometimes it would be really nice to access the exchange creation time from a processor. This can be of use for many tasks  like statistics etc.,2.4.0,2.6.0,0,0,26,1,5,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;camel-core/src/test/java/org/apache/camel/processor/ExchangeCreatedTimestampTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessageTest.java;,0,0
3220,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/10/12 07:43:10 +0100,2010/10/12 07:43:10 +0100,Claus Ibsen,2010/10/12 08:14:35 +0100,0.02181713,0.02181713,Threads - Should allow using 0 in core pool size,See nabblehttp://camel.465427.n5.nabble.com/ThreadPoolExecutor-configuration-tp3207845p3207845.html,2.4.0,2.5.0,0,0,5,1,2,1,0,0,0,0,0,0,3,5,camel-core/src/main/java/org/apache/camel/model/ThreadsDefinition.java;camel-core/src/test/java/org/apache/camel/processor/ThreadsZeroInCoreAndMaxPoolTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceStrategy.java;camel-core/src/test/java/org/apache/camel/processor/ThreadsZeroInCoreAndMaxPoolTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceStrategy.java;,0,0
3222,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/10/12 12:19:16 +0100,2010/10/12 12:42:09 +0100,Claus Ibsen,2010/10/12 19:04:28 +0100,0.281388889,0.265497685,Route definitions should use boxed types and lazy evaluate defaults in the getter,When you output a route definition as XML then all the boolean types and whatnot get outputted using their default values.For example inheritErrorHandler=true.This reduces the XML and keeps it much smaller.,2.4.0,2.5.0,0,0,31,1,4,1,0,0,0,0,0,0,1,18,camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/model/DelayDefinition.java;camel-core/src/main/java/org/apache/camel/model/DynamicRouterDefinition.java;camel-core/src/main/java/org/apache/camel/model/IdempotentConsumerDefinition.java;camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java;camel-core/src/main/java/org/apache/camel/model/LogDefinition.java;camel-core/src/main/java/org/apache/camel/model/OnCompletionDefinition.java;camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/main/java/org/apache/camel/model/RoutingSlipDefinition.java;camel-core/src/main/java/org/apache/camel/model/SamplingDefinition.java;camel-core/src/main/java/org/apache/camel/model/ThreadPoolProfileDefinition.java;camel-core/src/main/java/org/apache/camel/model/ThreadsDefinition.java;camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java;camel-core/src/main/java/org/apache/camel/model/WireTapDefinition.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/SThrottleDefinition.scala;,0,0
3223,Bug,Closed,Fixed,camel-core,Minor,Madhav Bhargava,2010/10/12 15:41:54 +0100,2010/10/13 08:31:21 +0100,Claus Ibsen,2010/10/14 21:09:20 +0100,2.227384259,1.526377315,GenericFileProducer.writeFile method creates instance of un-used InputStream,org.apache.camel.component.file.GenericFileProducerMethod: writeFileThis method has the following statement:InputStream payload = exchange.getIn().getBody(InputStream.class);This internally results in calling a TypeConverter to convert an object into InputStream type. However this InputStream has not been used and is eventually closed in the finally block. In the same method calling method storeFile on FileOperations (boolean success = operations.storeFile(fileName  exchange) also opens an InputStream on the same message.,2.4.0,2.5.0,1,0,67,2,5,3,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;,0,0
3231,Bug,Closed,Fixed,,Major,Beat Glattfelder,2010/10/13 15:34:23 +0100,2010/10/14 20:39:36 +0100,Claus Ibsen,2010/10/14 20:39:36 +0100,1.211956019,0,JMX MBeans not registered for initiators,registering the Initiator before it has been started will not register the sessions mbeans with JMX. So the acceptors are ther  but no initiators.,2.5.0,2.5.0,0,0,24,1,8,3,0,0,0,0,0,0,1,2,components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEngine.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjEngineTest.java;,0,0
3237,Bug,Closed,Fixed,camel-xmpp,Minor,M?rio Homem,2010/10/15 17:01:15 +0100,2010/11/11 12:55:59 +0100,Claus Ibsen,2010/11/11 12:58:51 +0100,26.83166667,0.001990741,XmppEndPoint - setting login to false when creating an account results in no action,XmppEndPoint myXmppEndPoint = new XmppEndPoint();(...)myXmppEndPoint.setCreateAccount(true);myXmppEndPoint .setLogin(false);(...)This will result in 'no action' in xmpp server  if setLogin true the account is created and the user stays online.I believe it's because of the logic used in createConnection() method of XmppEndPoint that could be changed to:if (!connection.isAuthenticated()) { if (user != null) { if (LOG.isDebugEnabled()) { LOG.debug('Logging in to XMPP as user: ' + user + ' on connection: ' + getConnectionMessage(connection)); } if (password == null) { LOG.warn('No password configured for user: ' + user + ' on connection: ' + getConnectionMessage(connection)); } if (createAccount) { AccountManager accountManager = new AccountManager(connection); accountManager.createAccount(user  password); } if(login){ if (resource != null) { connection.login(user  password  resource); } else { connection.login(user  password); } } } else { if (LOG.isDebugEnabled()) { LOG.debug('Logging in anonymously to XMPP on connection: ' + getConnectionMessage(connection)); } connection.loginAnonymously(); },2.4.0,2.6.0,0,1,174,1,6,3,0,0,0,0,0,0,1,1,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;,0,0
3242,Improvement,Closed,Fixed,,Minor,Claus Ibsen,2010/10/16 13:28:41 +0100,2010/10/16 13:28:41 +0100,Claus Ibsen,2010/10/19 08:03:56 +0100,2.774479167,2.774479167,RetryWhile is missing on the errorHandler DSL,You can only use retryWhile on the onException. It should be possible from errorHandler as well.,2.4.0,2.5.0,0,0,16,1,3,1,0,0,0,0,0,0,1,14,camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/DefaultErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/LoggingErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/test/java/org/apache/camel/processor/onexception/DefaultErrorHandlerRetryWhileTest.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/ErrorHandlerDefinition.java;components/camel-spring/src/main/java/org/apache/camel/spring/ErrorHandlerDefinition.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/ErrorHandlerDefinitionParser.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringDefaultErrorHandlerRetryWhileTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/DefaultErrorHandlerRetryWhileTest.xml;,0,0
3260,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2010/10/20 15:00:15 +0100,2011/05/07 09:53:34 +0100,Claus Ibsen,2011/05/07 11:44:52 +0100,198.8643171,0.077291667,Let LazyLoadingTypeConverter load the converters from camel-core on startup,When using lazy loading type converter and Spring XML you will trigger the type converters to be loaded on startup due XML configuration needs to convert from String -&gt; other types etc.So we should let Camel always load the type converters from camel-core as they are essential. Then the package scanning converters can be loaded on demand later.,2.5.0,2.8.0,0,0,58,1,0,0,0,0,0,0,0,0,1,78,camel-core/src/main/java/org/apache/camel/converter/ObjectConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/BaseTypeConverterRegistry.java;camel-core/src/main/java/org/apache/camel/impl/converter/CorePackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/converter/CoreTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/EnumTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/LazyLoadingTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java;camel-core/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;camel-core/src/test/java/org/apache/camel/ContextTestSupport.java;camel-core/src/test/java/org/apache/camel/builder/PredicateBinaryCoerceRouteTest.java;camel-core/src/test/java/org/apache/camel/converter/InstanceDummyFallbackConverter.java;camel-core/src/test/java/org/apache/camel/converter/InstanceMethodWithExchangeTestConverter.java;camel-core/src/test/java/org/apache/camel/converter/MyFallbackPromoteConverter.java;camel-core/src/test/java/org/apache/camel/converter/PurchaseOrderConverter.java;camel-core/src/test/java/org/apache/camel/converter/StaticDummyFallbackConverter.java;camel-core/src/test/java/org/apache/camel/converter/StaticMethodWithExchangeTestConverter.java;camel-core/src/test/java/org/apache/camel/converter/myconverter/InstanceDummyFallbackConverter.java;camel-core/src/test/java/org/apache/camel/converter/myconverter/InstanceMethodWithExchangeTestConverter.java;camel-core/src/test/java/org/apache/camel/converter/myconverter/MyFallbackPromoteConverter.java;camel-core/src/test/java/org/apache/camel/converter/myconverter/PurchaseOrderConverter.java;camel-core/src/test/java/org/apache/camel/converter/myconverter/StaticDummyFallbackConverter.java;camel-core/src/test/java/org/apache/camel/converter/myconverter/StaticMethodWithExchangeTestConverter.java;camel-core/src/test/java/org/apache/camel/processor/SimpleMockNoLazyTypeConverterTest.java;camel-core/src/test/resources/META-INF/services/org/apache/camel/TypeConverter;camel-core/src/test/resources/log4j.properties;components/camel-blueprint/pom.xml;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiComponentResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java;components/camel-core-osgi/src/test/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerDirectoriesNotMatchedTest.java;components/camel-groovy/pom.xml;components/camel-groovy/src/test/java/org/apache/camel/language/groovy/GroovyInvokeMethodTest.java;components/camel-groovy/src/test/java/org/apache/camel/language/groovy/GroovyLanguageTest.java;components/camel-groovy/src/test/java/org/apache/camel/language/groovy/GroovySetFixedHeaderTest.java;components/camel-groovy/src/test/java/org/apache/camel/language/groovy/GroovySetHeaderTest.java;components/camel-groovy/src/test/java/org/apache/camel/processor/groovy/GroovyFilterTest.java;components/camel-groovy/src/test/resources/org/apache/camel/processor/groovy/groovyFilter.xml;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyMinMaxThreadPoolTest.java;components/camel-juel/pom.xml;components/camel-juel/src/test/java/org/apache/camel/language/juel/JuelLanguageTest.java;components/camel-juel/src/test/java/org/apache/camel/language/juel/JuelTest.java;components/camel-juel/src/test/java/org/apache/camel/language/juel/NullBodyTest.java;components/camel-juel/src/test/java/org/apache/camel/language/juel/issues/XsltLosesHeaderTest.java;components/camel-juel/src/test/java/org/apache/camel/processor/juel/SimulatorTest.java;components/camel-msv/pom.xml;components/camel-msv/src/test/java/org/apache/camel/component/validator/msv/RelaxNGRouteTest.java;components/camel-mvel/pom.xml;components/camel-mvel/src/test/java/org/apache/camel/language/mvel/MvelTest.java;components/camel-ognl/pom.xml;components/camel-ognl/src/test/java/org/apache/camel/language/ognl/OgnlInvokeMethodTest.java;components/camel-ognl/src/test/java/org/apache/camel/language/ognl/OgnlTest.java;components/camel-ognl/src/test/java/org/apache/camel/language/ognl/patterns/FilterTest.java;components/camel-script/pom.xml;components/camel-script/src/test/java/org/apache/camel/builder/script/example/AnyLanguageFilterTest.java;components/camel-script/src/test/java/org/apache/camel/builder/script/example/BeanShellFilterTest.java;components/camel-script/src/test/java/org/apache/camel/builder/script/example/GroovyFilterTest.java;components/camel-script/src/test/java/org/apache/camel/builder/script/example/JavaScriptFilterTest.java;components/camel-script/src/test/java/org/apache/camel/builder/script/example/PythonFilterTest.java;components/camel-script/src/test/java/org/apache/camel/builder/script/example/RubyFilterTest.java;components/camel-script/src/test/java/org/apache/camel/builder/script/example/XPathFilterTest.java;components/camel-script/src/test/java/org/apache/camel/language/script/JavaScriptLanguageTest.java;components/camel-script/src/test/java/org/apache/camel/language/script/PythonLanguageTest.java;components/camel-spring/src/main/java/org/apache/camel/osgi/OsgiSpringCamelContext.java;components/camel-spring/src/test/java/org/apache/camel/spring/SpringTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/CamelTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/LanguageTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/LanguageTestSupport.java;components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugNoLazyTypeConverterTest.java;components/camel-testng/src/main/java/org/apache/camel/testng/CamelTestSupport.java;components/camel-testng/src/main/java/org/apache/camel/testng/LanguageTestSupport.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugNoLazyTypeConverterTest.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugTest.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/FilterTest.java;,0,0
3266,Improvement,Closed,Fixed,camel-core,Minor,ext2,2010/10/22 11:40:47 +0100,2010/11/29 08:02:29 +0100,Claus Ibsen,2010/11/29 09:55:16 +0100,37.92672454,0.078321759,support the Ordered Interceptor Strategy configured in spring,Now spring support user to configure their own Interceptor Strategy  but it cannot specifiy the wrap order of the interceptor strategy.So we need to support a feature to let the user define the interceptor's order:user can choice to implement the org.apache.camel.util.Ordered interface for the customed interceptor strategy ;if the interceptor strategy does support a Ordered interface  the camel context will loaded the interceptor-strategies and wrapper the process by the order;For example if I write two interceptor-strategy(A   B)  if A's order is 0  and B's order is 1. the camel will always wrapper the processor as {A{B{Processor}}.,2.4.0,2.6.0,0,0,97,1,7,3,0,0,0,0,0,0,2,7,camel-core/src/main/java/org/apache/camel/processor/DefaultChannel.java;camel-core/src/main/java/org/apache/camel/processor/DefaultChannel.java;camel-core/src/test/java/org/apache/camel/processor/intercept/DualInterceptSimpleRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/InterceptorStrategyNotOrderedTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/InterceptorStrategyOrderedTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/SpringInterceptorStrategyOrderedTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/InterceptorStrategyOrderedTest.xml;,0,0
3275,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/10/25 14:51:49 +0100,2010/10/25 14:51:49 +0100,Claus Ibsen,2010/10/26 15:32:44 +0100,1.028414352,1.028414352,CaseInsensitiveMap concurrency issue,&#91;10/25/2010 -:- 03:27:22 PM&#93; &lt;tarjei&gt; cibsen: I get a few of these errors on a route using SEDA queues:&#91;10/25/2010 -:- 03:27:43 PM&#93; &lt;tarjei&gt; Caused by: &#91;java.util.ConcurrentModificationException - null&#93;&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; java.util.ConcurrentModificationException&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; at java.util.HashMap$HashIterator.nextEntry(HashMap.java:810)&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; at java.util.HashMap$EntryIterator.next(HashMap.java:851)&#91;10/25/2010 -:- 03:27:44 PM&#93; &lt;tarjei&gt; at java.util.HashMap$EntryIterator.next(HashMap.java:849)&#91;10/25/2010 -:- 03:27:46 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.CaseInsensitiveMap.entrySet(CaseInsensitiveMap.java:120)&#91;10/25/2010 -:- 03:27:49 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86)&#91;10/25/2010 -:- 03:27:51 PM&#93; &lt;tarjei&gt; at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142)&#91;10/25/2010 -:- 03:27:54 PM&#93; &lt;tarjei&gt; at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52)&#91;10/25/2010 -:- 03:27:56 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:215)&#91;10/25/2010 -:- 03:27:59 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.Pipeline.process(Pipeline.java:128)&#91;10/25/2010 -:- 03:28:01 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)&#91;10/25/2010 -:- 03:28:05 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;10/25/2010 -:- 03:28:08 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;10/25/2010 -:- 03:28:11 PM&#93; &lt;tarjei&gt; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;10/25/2010 -:- 03:28:14 PM&#93; &lt;tarjei&gt; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;10/25/2010 -:- 03:28:17 PM&#93; &lt;tarjei&gt; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;10/25/2010 -:- 03:28:20 PM&#93; &lt;tarjei&gt; at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:170)&#91;10/25/2010 -:- 03:28:23 PM&#93; &lt;tarjei&gt; at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:112)&#91;10/25/2010 -:- 03:28:25 PM&#93; &lt;tarjei&gt; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)&#91;10/25/2010 -:- 03:28:28 PM&#93; &lt;tarjei&gt; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)&#91;10/25/2010 -:- 03:28:31 PM&#93; &lt;tarjei&gt; at java.lang.Thread.run(Thread.java:636)&#91;10/25/2010 -:- 03:28:34 PM&#93; &lt;tarjei&gt; It seems to me to be an error completely within Camel so I thought I'd report it.&#91;10/25/2010 -:- 03:30:26 PM&#93; &lt;tarjei&gt; I got the error about 10/30 times having run about 5m messages through the different routes running in that jvm&#91;10/25/2010 -:- 03:51:36 PM&#93; &lt;cibsen&gt; and do your prod server have more cpu cores?&#91;10/25/2010 -:- 03:51:42 PM&#93; &lt;cibsen&gt; ibm  sun jdk?&#91;10/25/2010 -:- 03:51:51 PM&#93; &lt;tarjei&gt; Yes - 4. This is openjdk&#91;10/25/2010 -:- 03:51:54 PM&#93; &lt;tarjei&gt; both places&#91;10/25/2010 -:- 03:52:03 PM&#93; &lt;cibsen&gt; what os?&#91;10/25/2010 -:- 03:52:22 PM&#93; &lt;tarjei&gt; Centos 5&#91;10/25/2010 -:- 03:52:36 PM&#93; &lt;cibsen&gt; yeah kinda figured when you said openjdk&#91;10/25/2010 -:- 03:53:06 PM&#93; &lt;tarjei&gt; 1.6.0-17,2.4.0,2.6.0,0,0,296,1,3,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/util/CaseInsensitiveMap.java;camel-core/src/test/java/org/apache/camel/util/CaseInsensitiveMapTest.java;,0,0
3276,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/10/25 16:05:42 +0100,2010/10/25 16:05:42 +0100,Claus Ibsen,2010/10/26 07:35:05 +0100,0.645405093,0.645405093,Multicast with pipeline may cause wrong aggregated exchange,This is a problem when using 2 set of nested pipeline and doing a transform as the first processor in that pipeline from('direct:start').multicast(new SumAggregateBean()) .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to('log:foo').end() .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to('log:bar').end() .end() .to('mock:result');,2.4.0,2.6.0,0,0,44,1,2,1,0,0,0,0,0,0,1,10,camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaWaitForTaskCompleteTest.java;camel-core/src/test/java/org/apache/camel/component/vm/VmWaitForTaskCompleteTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultProducerTemplateAsyncTest.java;camel-core/src/test/java/org/apache/camel/issues/MulticastPipelineAggregateIssueTest.java;components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java;components/camel-crypto/src/test/java/org/apache/camel/component/crypto/SignatureTests.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/HMACAccumulatorTest.java;components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcPreserveHeadersTest.java;,0,0
3279,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/10/26 15:26:05 +0100,2010/10/26 15:26:05 +0100,Claus Ibsen,2010/12/06 09:03:56 +0100,40.73461806,40.73461806,Let custom Processor be managed in JMX when implementing ManagementAware,See nabblehttp://camel.465427.n5.nabble.com/manage-Camel-Processor-using-JMX-tp3235454p3235454.html,2.4.0,2.6.0,0,2,5,1,7,2,0,0,0,0,0,0,2,23,camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementNamingStrategy.java;camel-core/src/main/java/org/apache/camel/management/JmxMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCustomProcessor.java;camel-core/src/main/java/org/apache/camel/model/ProcessDefinition.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationCustomMBeanTest.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationUsingDefaultsTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomProcessorTest.java;camel-core/src/test/java/org/apache/camel/management/MultiInstanceProcessorTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorFactoryCreatesHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorSubclassFactory.java;camel-core/src/test/java/org/apache/camel/util/IntrospectionSupportTest.java;examples/pom.xml;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/JmxMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBeanProcessor.java;camel-core/src/test/java/org/apache/camel/issues/SplitterThrowExceptionInExpressionTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomBeanTest.java;,0,0
3284,Improvement,Resolved,Fixed,camel-restlet,Major,Fernando Ribeiro,2010/10/27 12:38:10 +0100,2010/10/27 12:38:10 +0100,Claus Ibsen,2011/06/27 12:12:02 +0100,242.9818519,242.9818519,Multiple Endpoints with the Same Port in Restlet Component,It should be possible to have several endpoints using the same port  the more it takes to rely on a HTTP server external to the component.,2.4.0,2.8.0,0,0,26,1,1,1,0,0,0,0,0,0,1,1,components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletTwoEndpointsTest.java;,0,0
3293,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/10/29 10:31:04 +0100,,Unassigned,2010/10/29 10:48:23 +0100,0.012025463,,Add exception.stacktrace to Simple language,So you can output the stracktrace. It should grab the stacktrace and print it to a String as output.,2.4.0,2.6.0,0,0,19,0,2,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/builder/Builder.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/test/java/org/apache/camel/language/SimpleTest.java;,0,0
3309,Improvement,Closed,Fixed,camel-ftp,Major,Bengt Rodehav,2010/11/04 09:06:09 +0100,2010/11/06 11:31:28 +0100,Claus Ibsen,2010/11/12 09:20:55 +0100,8.01025463,5.909340278,Stepwise change of directory unfit for production (ftp/ftps/sftp),In Camel 2.5  the logic for changing directory for ftp/ftps/sftp has changed in order to fix the problems discussed in the following thread: http://camel.465427.n5.nabble.com/How-to-change-directory-while-using-sftp-component-td2806817.html#a2807611In Camel 2.5 changing of the remote directory is now done in a stepwise manner. This is a strategy not fit for production since it assumes that the logged in ftp/ftps/sftp user has access to all intermediate directories all the way down to its home directory. This is rarely the case.Also  when testing ftp/sftp on Serv-U  a Windows based ftp/ftps/sftp server  it turns out that it reports the current directory in a 'Windows way'  e g /C:/temp/servu/user/sample/file2sftp. The topmost folder is not '/' but '/C:'. This also breaks the new stepwise way of changing directory since it always tries to change to '/' if an absolute path is used.I propose to introduce a configuration property to enable/disable stepwise changing of directories where disabling it should be the default. I will upload a patch shortly.,2.5.0,2.6.0,0,0,160,1,54,2,1,0,0,0,0,0,4,62,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFileToFtpNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFileToFtpTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpDeleteFileNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpDirectoryToBinaryFilesNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpFilterNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpFilterTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpKeepLastModifiedNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpKeepLastModifiedTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileAbsoluteFolderRecursiveNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileAbsoluteFolderRecursiveTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFilePostfixNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFilePostfixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFilePrefixNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFilePrefixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileRecursiveNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileRecursiveTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileToHiddenFolderRecursiveNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpMoveFileToHiddenFolderRecursiveTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpNoEndpointPathRelativeMoveToAbsoluteNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpNoEndpointPathRelativeMoveToAbsoluteTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveDeleteNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveDeleteTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFilePostfixNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFilePostfixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFilePrefixNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveFilePrefixTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveNoopNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpPreMoveNoopTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpRecursiveNoopNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpRecursiveNoopTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleNoEndpointPathRelativeMoveToAbsoluteNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleNoEndpointPathRelativeMoveToAbsoluteTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleNoEndpointPathRelativeMoveToRelativeNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleNoEndpointPathRelativeMoveToRelativeTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleRelativeMoveToAbsoluteNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleRelativeMoveToAbsoluteTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleRelativeMoveToRelativeNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimpleRelativeMoveToRelativeTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerNotStepwiseCamelManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerNotStepwiseCamelRecursiveManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerNotStepwiseCamelRecursiveToAbsoluteManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleConsumeAbsoluteNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleConsumeNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleConsumeRecursiveNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerCamelManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerCamelRecursiveManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerCamelRecursiveToAbsoluteManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerScottManualTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/manual/FtpConsumerScottRecursiveManualTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceNotStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceTest.java;,0,0
3319,Bug,Closed,Fixed,,Major,Willem Jiang,2010/11/07 05:23:55 +0100,2010/11/07 05:23:55 +0100,Willem Jiang,2010/11/08 01:24:35 +0100,0.833796296,0.833796296,cxfEndpoint of camel-cxf doesn't support  the shcemaLocation element,Here is the mail thread&#91;1&#93; which discusses about it.&#91;1&#93;http://camel.465427.n5.nabble.com/camel-cxf-exception-when-parsing-cxf-schemaLocation-element-td3253254.html#a3253254,2.0.0; 2.1.0; 2.2.0; 2.3.0; 2.4.0; 2.5.0,2.6.0,0,0,11,1,2,2,1,1,0,0,0,0,3,16,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/NamespaceHandler.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfSpringRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanWithBusTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeansRouterTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/CxfEndpointBeans.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeans.xml;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfRsClientFactoryBeanDefinitionParser.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfRsServerFactoryBeanDefinitionParser.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfRsClientFactoryBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfRsServerFactoryBeanTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfRsClientFactoryBeans.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfRsServerFactoryBeans.xml;,0,0
3335,Bug,Closed,Fixed,camel-jpa,Major,Sergey Zhemzhitsky,2010/11/12 10:12:54 +0100,2010/11/12 10:46:47 +0100,Claus Ibsen,2010/11/12 11:07:55 +0100,0.038206019,0.014675926,NPE occurs without @Entity annotation,Here is code from the org.apache.camel.component.jpa.JpaConsumer classprotected String getEntityName(Class&lt;?&gt; clazz) { Entity entity = clazz.getAnnotation(Entity.class); // Check if the property name has been defined for Entity annotation if (!entity.name().equals('')) { // line 307 return entity.name(); } else { return null; }}When trying to consume entities from jpa endpoint exception occursjava.lang.NullPointerException at org.apache.camel.component.jpa.JpaConsumer.getEntityName(JpaConsumer.java:307) at org.apache.camel.component.jpa.JpaConsumer.createQueryFactory(JpaConsumer.java:287) at org.apache.camel.component.jpa.JpaConsumer.getQueryFactory(JpaConsumer.java:196) at org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:83) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:82) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:80) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:78) at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:79) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)This is because there is no @Entity annotation and persistence is configured by means of orm.xml.To fix the problem change line 307 toif (entity != null &amp;&amp; !entity.name().equals('')),2.4.0,2.6.0,0,1,119,1,3,2,1,0,0,1,0,0,1,1,components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java;,0,0
3336,Improvement,Closed,Fixed,camel-quartz,Minor,S. Ali Tokmen,2010/11/12 10:44:24 +0100,2010/11/12 11:09:37 +0100,Claus Ibsen,2010/11/12 11:21:21 +0100,0.025659722,0.008148148,Quartz component has minor issues with old versions of Quartz,HelloI have run into two issues using camel-quartz with old versions of Quartz (Quartz 1.6 and 1.7):1. With Quartz 1.6  at shutdown  I get a message:2010-11-12 02:41:22 965 DefaultShutdownStrategy.shutdownNow Error occurred while shutting down route: Consumer[quartz://importAnnuaireAgentsTimer?cron=0+30+2+*+*+%3F]. This exception will be ignored.java.lang.NoSuchMethodError: org.quartz.SchedulerMetaData.isJobStoreClustered()Z at org.apache.camel.component.quartz.QuartzComponent.isClustered(QuartzComponent.java:278) at org.apache.camel.component.quartz.QuartzComponent.removeJob(QuartzComponent.java:238) at org.apache.camel.component.quartz.QuartzEndpoint.removeTrigger(QuartzEndpoint.java:84) at org.apache.camel.component.quartz.QuartzEndpoint.consumerStopped(QuartzEndpoint.java:221) at org.apache.camel.component.quartz.QuartzConsumer.doStop(QuartzConsumer.java:44) at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:98) at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:122) at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:99) at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:235) at org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask.run(DefaultShutdownStrategy.java:386) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)2. Starting of a delayed timer fails. I think warning the user would be a better idea.Patch is attached (it basically catches the NoSuchMethodError exceptions and acts accordingly),2.5.0,2.6.0,0,0,106,1,7,2,0,0,0,0,0,0,1,1,components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;,0,0
3343,Bug,Closed,Fixed,camel-cxf,Major,Boris Terzic,2010/11/17 22:16:22 +0100,2010/11/18 09:27:23 +0100,Willem Jiang,2010/11/18 09:37:14 +0100,0.472824074,0.006840278,CxfRsInvoker produces NullpointerException when no ContinuationProvider is set in the InMessage,In my usage of CXF-RS with Camel through the camel-cxf component I ran into a NullpointerException  the specific case is described in some detail on StackOverflow: http://stackoverflow.com/questions/4198461/why-do-i-get-a-nullpointerexception-when-invoking-the-cxf-rs-endpoint-of-a-camel Specifically I run into a NullpointerException:Caused by: java.lang.NullPointerException at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.getContinuation(CxfRsInvoker.java:63) at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:52) at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:89) ... 33 moreI was assuming I was misconfiguring something but didn't find any alternative way so I started digging in the camel-cxf source code.I found that such a 'getContinuation' method also exists for the org.apache.camel.component.cxf.CxfConsumer as well as for the CxfRsInvoker (where it was failing for me). However in the case of the CxfConsumer there is a guard on the ContinuationProvider so that if it is null  then null is returned:return provider == null ? null : provider.getContinuation();CxfRsInvoker does not have this guard  but it does have code to deal with a 'null' Continuation at the calling site (line 52  in performInvocation). Therefore I assumed this was a bug and patched the guard into the CxfRsInvoker as well.My program now seems to work correctly. I assume this is a bug.For completeness sake  this is what getContinuation now looks like for me: private Continuation getContinuation(Exchange cxfExchange) { ContinuationProvider provider = (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName()); return provider == null ? null : provider.getContinuation(); },2.5.0,2.6.0,0,0,231,1,2,2,0,0,0,1,0,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java;,0,0
3351,Bug,Closed,Fixed,camel-irc,Minor,Tracy Snell,2010/11/21 14:54:04 +0100,2010/12/08 05:36:54 +0100,Willem Jiang,2010/12/08 07:54:35 +0100,16.70869213,0.095613426,camel-irc component silently fails on nick collision,When the camel-irc component connects to an irc server and there's a nick collision it silently fails. Also note there is no camel-irc component in Jira.,2.5.0,2.6.0,0,0,26,1,5,3,0,0,0,0,0,0,1,7,components/camel-irc/pom.xml;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcComponent.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConfiguration.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConsumer.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcConfigurationTest.java;,0,0
3356,Bug,Closed,Fixed,camel-bindy,Minor,Richard Kettelerij,2010/11/23 21:39:12 +0100,2010/11/24 05:54:52 +0100,Hadrian Zbarcea,2010/11/24 06:16:02 +0100,0.358912037,0.014699074,Hard coded locale in Bindy DatePatternFormat,As reported by a user from the community (http://camel.465427.n5.nabble.com/Bindy-Dateformat-Parsing-exception-td3276981.html)  the locale of SimpeDateFormat in bindy's DatePatternFormat class is hard coded to FRANCE.,2.6.0,2.6.0,0,0,25,1,4,3,0,0,0,0,0,0,1,1,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/FormatFactory.java;,0,0
3359,Improvement,Closed,Fixed,camel-ftp,Major,Claus Ibsen,2010/11/24 08:16:30 +0100,2010/11/24 08:16:30 +0100,Claus Ibsen,2010/11/25 17:34:19 +0100,1.387372685,1.387372685,Add option on FTP component so you can set which path separator char to use (eg windows vs unix),For example if you use a windows platform and want to upload files to a remote linux FTP server  and the FTP server don't understand path separators using either / or / char,2.5.0,2.6.0,0,0,33,1,2,1,0,0,0,0,0,0,1,10,camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithPathPathSeparatorAutoNoStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithPathPathSeparatorUnixNoStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithPathPathSeparatorWindowsNoStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java;,0,0
3377,Bug,Closed,Fixed,camel-spring-integration,Minor,Claus Ibsen,2010/11/29 10:40:03 +0100,2010/11/29 10:40:03 +0100,Claus Ibsen,2010/11/29 11:29:58 +0100,0.034664352,0.034664352,spring-integration - Should have better configuration validation,See nabblehttp://camel.465427.n5.nabble.com/Integration-camel-and-spring-integration-tp3284105p3284105.html,2.5.0,2.6.0,0,0,5,1,2,1,0,0,0,0,0,0,1,26,components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationBinding.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationComponent.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationEndpoint.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationHelper.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationMessage.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationProducer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/AbstractCamelAdapter.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/CamelSourceAdapter.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/CamelTargetAdapter.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/config/AbstractCamelContextBeanDefinitionParaser.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/config/CamelSourceAdapterParser.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/config/CamelSourceAdpaterParser.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/config/CamelTargetAdapterParser.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/config/NamespaceHandler.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/converter/SpringIntegrationConverter.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/HelloWorldService.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationChannelConverterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationOneWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationTwoWayConsumerTest.java;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/adapter/CamelSource.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/adapter/CamelTarget.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/oneWayConsumer.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/producer.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/springChannelConverter.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/twoWayConsumer.xml;,0,0
3389,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/12/05 10:04:35 +0100,2010/12/05 11:57:32 +0100,Claus Ibsen,2010/12/05 11:57:32 +0100,0.0784375,0,PackageHelper - issue with version numbers which contains non decimal,See more herehttp://fusesource.com/forums/thread.jspa?threadID=2447&amp;tstart=0,2.5.0,2.6.0,0,0,6,1,3,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/util/PackageHelper.java;,0,0
3399,Improvement,Closed,Fixed,camel-core; jmx,Minor,Claus Ibsen,2010/12/07 08:34:52 +0100,2010/12/07 08:34:52 +0100,Claus Ibsen,2010/12/07 10:49:21 +0100,0.093391204,0.093391204,Tidying up strategy for managing resources in JMX,The management strategy should be1) use ManagementAware if implemented on bean2) use @ManagedResource if provided on bean3) otherwise use defaultConsider using fallback from 1-&gt;2 which is the current behavior. If we change this we will break backwards compatibility.But in essence we should had Camel fail if (1) cannot be registered  and not just fallback to use (2) as it does today.,2.5.0,2.6.0,0,0,61,1,2,1,0,0,0,0,0,0,1,30,camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/JmxMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedComponent.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedConsumer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCustomProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedDelayer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpoint.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedErrorHandler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedInstance.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedPerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProducer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProducerCache.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRoute.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSendProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedService.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThrottler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThrottlingInflightRoutePolicy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedTracer.java;camel-core/src/main/java/org/apache/camel/spi/ManagementAware.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomProcessorTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryQueueEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsTemporaryTopicEndpoint.java;,0,0
3402,Improvement,Closed,Fixed,camel-guice,Major,Jean-Baptiste Onofr?,2010/12/08 08:05:10 +0100,2010/12/08 09:13:58 +0100,Willem Jiang,2010/12/08 14:42:43 +0100,0.276076389,0.228298611,Use ServiceMix guice bundle,In order to avoid to go on the googlecode maven repository  I provided a ServiceMix OSGi bundle for guice.This bundle could be used by Camel in the Karaf features descriptor.,2.5.0,2.6.0,0,0,30,1,2,2,0,0,0,0,0,0,1,5,components/camel-guice/pom.xml;parent/pom.xml;platforms/karaf/features/pom.xml;platforms/karaf/features/src/main/resources/features-spring2.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
3403,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/12/08 08:44:26 +0100,2010/12/08 08:44:26 +0100,Claus Ibsen,2010/12/08 09:16:10 +0100,0.022037037,0.022037037,InterceptSendToEndpoint should check for if stop DSL has been used,See nabblehttp://camel.465427.n5.nabble.com/InterceptSendToEndpoint-Http-Component-tp3296620p3296620.html,2.5.0,2.6.0,0,0,5,1,2,1,0,0,0,1,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/processor/PipelineHelper.java;camel-core/src/main/java/org/apache/camel/spi/ManagementAware.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointWithStopTest.java;,0,0
3416,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2010/12/09 07:02:14 +0100,2010/12/09 07:02:14 +0100,Claus Ibsen,2010/12/09 07:37:55 +0100,0.024780093,0.024780093,DefaultTimeoutMap should force scheduler in contructor,See nabblehttp://camel.465427.n5.nabble.com/Do-I-have-to-give-a-ScheduledExecutorService-instance-when-initializing-DefualtTimeoutMap-tp3298252p3298252.html,2.5.0,2.6.0,0,0,5,1,2,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/TimeoutMapEntry.java;camel-core/src/test/java/org/apache/camel/util/DefaultTimeoutMapTest.java;,0,0
3425,Bug,Closed,Fixed,camel-blueprint,Critical,Claus Ibsen,2010/12/14 11:36:25 +0100,2010/12/14 11:36:25 +0100,Guillaume Nodet,2010/12/17 16:27:04 +0100,3.201840278,3.201840278,CamelContext is started twice when using camel-blueprint,For example if you run the testRouteWithAllComponents test in CamelBlueprintTest in tests/camel-itest-osgi you will see a lot of logging. But notice[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) is starting[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) started in 0.147 secondsThen blueprint does something[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) is starting[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) started in 0.071 secondsAnd likewise both CamelContext's is shutdown when the test completes. There are logging events for that as well.Pay attention to the name of the 1st CamelContext 67-camel-2. This is the correct name as its based on the bundle id  our end user Camel application is given. This ensures that the CamelContext from his application has a name which is unique and refers to the bundle id as well.Now if you look at the 2nd CamelContext being started its given another name 4-camel-5. That id is most likely using a shared bundle id with a low number. For example camel-blueprint or camel-core bundle  or something like that. In essence camel-blueprint should only create one CamelContext and it should use the 67-camel-2 as the name of the CamelContext (eg. include the bundle id of the end user application).,2.6.0,2.6.0,0,0,225,1,3,2,0,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/AbstractIntegrationTest.java;,0,0
3430,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/12/15 09:05:50 +0100,2010/12/15 09:05:50 +0100,Claus Ibsen,2010/12/15 09:39:32 +0100,0.023402778,0.023402778,InterceptSendToEndpoint has issues with interception http endpoints which has multiple parameters,See nabblehttp://camel.465427.n5.nabble.com/interceptSendToEndpoint-with-dynamic-endpoint-tp3301978p3301978.htmlThe issue is when any endpoints have parameters which may be re-ordered when the endpoint is normalized.,2.5.0,2.6.0,0,0,21,1,3,1,0,0,0,0,0,0,2,4,components/camel-http/src/test/java/org/apache/camel/component/http/HttpInterceptSendToEndpointTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationCustomMBeanTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointWithParametersTest.java;,0,0
3441,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2010/12/18 13:08:54 +0100,2010/12/18 13:08:54 +0100,Claus Ibsen,2010/12/18 15:52:26 +0100,0.113564815,0.113564815,DataFormat - Support for CamelContextAware injection and start/stop callbacks with Service,This allows custom DataFormat to do any initialization logic in start and stop methods from Service.Also they will get access to CamelContext by implementing CamelContextAware,2.5.0,2.6.0,0,0,25,1,2,1,1,0,0,0,0,0,2,7,components/camel-jaxb/src/test/java/org/apache/camel/example/DataFormatTest.java;camel-core/src/main/java/org/apache/camel/processor/DefaultChannel.java;camel-core/src/main/java/org/apache/camel/processor/MarshalProcessor.java;camel-core/src/main/java/org/apache/camel/processor/UnmarshalProcessor.java;camel-core/src/test/java/org/apache/camel/processor/DataFormatServiceTest.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java;components/camel-jaxb/src/test/java/org/apache/camel/example/DataFormatTest.java;,0,0
3458,Bug,Closed,Fixed,camel-bindy,Minor,Claus Ibsen,2010/12/23 17:19:16 +0100,2010/12/23 17:19:16 +0100,Claus Ibsen,2010/12/23 17:24:34 +0100,0.003680556,0.003680556,Bindy should support clipping fields if they exceed maximum length allowed when using fixed length,Adding a new option to bindy annotation /** * Indicates to clip data in the field if it exceeds the allowed length when using fixed length. */ boolean clip() default false;Then if enabled it will clip the data so it can fit the length.Also now Camel throws an exception if the data is too long and you have clip set as false.,2.5.0,2.6.0,0,0,73,1,3,1,1,0,0,0,0,0,1,9,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyKeyValuePairFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fix/BindySimpleKeyValuePairWithoutSectionMarshallDslTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/marshall/simple/BindySimpleFixedLengthMarshallWithClipAndTrimTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/marshall/simple/BindySimpleFixedLengthMarshallWithClipTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/marshall/simple/BindySimpleFixedLengthMarshallWithNoClipTest.java;,0,0
3478,Improvement,Closed,Fixed,camel-xmpp,Major,Hendy Irawan,2011/01/01 14:51:08 +0100,2011/01/07 18:02:36 +0100,Tracy Snell,2011/01/08 09:44:36 +0100,6.78712963,0.654166667,Camel-XMPP Consumer doesn't pass XMPP headers,XMPP Consumer should pass XMPP headers as message headers  just like XMPP Producer accepts message headers as XMPP headers.,2.5.0,2.6.0,0,1,19,1,5,3,0,0,0,0,0,0,1,2,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppBinding.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConstants.java;,0,0
3486,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2011/01/04 18:18:57 +0100,2011/01/04 18:18:57 +0100,Claus Ibsen,2011/01/04 18:20:36 +0100,0.001145833,0.001145833,NotifyBuilder - Should throw exception if it hasn't been created and matches is invoked,This helps use of NotifyBuilder as matches doesn't operate until you have created the notifier.,2.5.0,2.6.0,0,0,15,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;camel-core/src/test/java/org/apache/camel/builder/NotifyBuilderTest.java;,0,0
3488,Improvement,Closed,Fixed,camel-jpa,Minor,Marco Zapletal,2011/01/04 19:35:54 +0100,2011/01/05 09:14:56 +0100,Claus Ibsen,2011/01/05 09:20:53 +0100,0.572905093,0.004131944,Some of JpaTraceEventMessage's attributes require @Lob annotation,JpaTraceEventMessage has a bunch of String attributes defined. Applying no annotations on String attributes of an @Entity result in generated database columns with a constrained length (e.g.  using EclipseLink and MySQL  a String attribute of an @Entity is mapped to a VARCHAR(255) field).Several values of JpaTraceEventMessage are probably carrying values larger than 255 characters. Using JPAs @Lob annotation tackles this problem by generating (C)LOB fields. The attached patch defines the @Lob annotation on attributes which are expected to carry such large values.,2.5.0,2.6.0,0,1,83,1,1,1,0,0,0,0,0,0,1,1,components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/jpa/JpaTraceEventMessage.java;,0,0
3489,Bug,Closed,Fixed,camel-bindy,Major,Steven Lewis,2011/01/04 20:32:53 +0100,2011/01/05 09:24:58 +0100,Claus Ibsen,2011/01/05 10:30:51 +0100,0.581921296,0.045752315,BindyCsvDataFormat broken for pipe delimited files,Attempting to unmarshall a pipe delimited CSV file into a POJO using Bindy causese the first and last character the the line processed to be dropped. It appears that the BindyCsvDataFormat class removes the first and the last character from the line read from the CSV if the seperator is &gt; 1 characters in length (see below or line 162-165 in BindyCsvDataFormat). For pipe delimited files  you need to specify | as the seperator  as | is not evaluated correctly as a java regex by the split fuction. This leads to the first and last character for the line being parsed being dropped. From the comments it appears a 'fix' was added to remove the first and last character of the line when the seperator contains quotes or double quotes. Making this determination using the length of the seperator  rather than evaluating using a regex seems to be a poor solution that breaks other CSV delimiters.See Attached for an code example.,2.5.0,2.6.0,0,0,163,1,2,2,0,0,0,0,0,0,1,8,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyDoubleQuotesCsvUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyInlinedQuotesCsvUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyPipeDelimiterTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySingleQuotesCsvUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/pipeline/MyData.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyInlinedQuotesCsvUnmarshallTest-context.xml;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindySingleQuotesCsvUnmarshallTest-context.xml;,0,0
3493,Bug,Closed,Fixed,,Major,Jim Newsham,2011/01/05 02:09:05 +0100,2011/01/05 07:39:09 +0100,Claus Ibsen,2011/01/05 07:39:09 +0100,0.229212963,0,ConcurrentModificationException in DefaultCamelContext.removeRouteDefinitions(),I get the following exception in DefaultCamelContext.removeRouteDefinitions(). We are removing route definitions from multiple threads. I see synchronization in various other methods  but not this one. Caused by: java.util.ConcurrentModificationException at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372) at java.util.AbstractList$Itr.next(AbstractList.java:343) at java.util.AbstractCollection.removeAll(AbstractCollection.java:336) at org.apache.camel.impl.DefaultCamelContext.removeRouteDefinitions(DefaultCamelContext.java:588),2.5.0,2.6.0,0,0,37,1,2,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;,0,0
3530,Improvement,Closed,Fixed,camel-scala,Major,Craig McDaniel,2011/01/12 03:54:57 +0100,2011/01/12 06:28:38 +0100,Hadrian Zbarcea,2011/01/12 06:33:25 +0100,0.110046296,0.003321759,Additional TypeConverters,Add TypeConverters to scala.xml.Elem from String  DOM Document  and DOM Node.,2.5.0,2.6.0,0,0,11,1,3,2,0,0,0,0,0,0,0,0,,0,0
3531,Bug,Closed,Fixed,camel-scala,Major,Craig McDaniel,2011/01/12 06:17:11 +0100,2011/04/24 17:19:07 +0100,Claus Ibsen,2011/04/24 18:00:43 +0100,102.4885648,0.028888889,scala - xpath not working together with choice/when,When using the Scala DSL  xpath expressions inside when() do not work as expected. As an example: 'direct:a' ==&gt; { choice { when (xpath('//hello')) to ('mock:english') when (xpath('//hallo')) { to ('mock:dutch') to ('mock:german') } otherwise to ('mock:french') } }// Send messages'direct:a' ! ('&lt;hello/&gt;'  '&lt;hallo/&gt;'  '&lt;hellos/&gt;')Here we should receive 1 message in each of the mocks. For whatever reason  all 3 messages go to mock:english. Similar routes work as expected with the Java DSL.,2.5.0,2.7.3; 2.8.0,0,0,81,1,4,2,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/builder/xml/XPathContentBasedRouterTest.java;camel-core/src/test/java/org/apache/camel/converter/ObjectHelperTest.java;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/SChoiceDefinition.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/XPathContentBasedRouterTest.scala;,0,0
3533,Improvement,Closed,Fixed,tooling,Major,Pablo Gra/~na,2011/01/12 13:25:54 +0100,2011/01/12 13:41:12 +0100,Willem Jiang,2011/01/12 13:44:31 +0100,0.012928241,0.002303241,classpath problem with camel:dot and provided dependencies,camel:dot in is failing with a class not found exception when the application context instantiates a class in a jar with provided scope.If in your maven project you have: &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;and in your application context there is  for example  a subclass of ServletContextListener  mvn camel:dot fails with:...Caused by: java.lang.ClassNotFoundException:javax.servlet.ServletContextListener at java.net.URLClassLoader$1.run(URLClassLoader.java:217) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:205) at java.lang.ClassLoader.loadClass(ClassLoader.java:321) at java.lang.ClassLoader.loadClass(ClassLoader.java:266) ... 92 moreIf you change it to: &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt;then camel-maven-plugin correctly generates the output. The fact isthat the servlet-api jar must not be included in the final war.I don't know the correct way to fix this. One option would be to add the includePluginDependencies option in the plugin and add the provided jars as runtime dependencies of the plugin.The other  very easy to implement  option would be to change the requiresDependencyResolution from runtime to test.The third option would be to make the requiresDependencyResolution configurable.Attached is a patch for the 2nd option (lazy me).,2.5.0,2.6.0,0,0,161,1,2,2,0,0,0,0,0,0,1,1,tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/DotMojo.java;,1,1
3535,Bug,Closed,Fixed,camel-core,Major,Brian Feaver,2011/01/12 21:43:57 +0100,2011/01/13 07:13:42 +0100,Claus Ibsen,2011/01/14 11:37:32 +0100,1.578877315,1.183217593,Aggregation fails to call onComplete for exchanges if the aggregation is after a bean or process.,When creating a route that contains an aggregation  if that aggregation is preceded by a bean or process  it will fail to call AggregateOnCompletion.onComplete(). I've attached a unit test that can show you the behavior. Trace level loggging will need to be enabled to see the difference. With the call to the bean  it won't show the following log entry:TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: ab]If you remove the bean call  it'll start calling onComplete() again.What I've noticed is that if this call is not made  it ends up in a memory leak since the inProgressCompleteExchanges HashSet in AggregateProcessor never has any exchange ID's removed.,2.5.0,2.6.0,0,0,112,1,8,2,0,0,1,1,1,0,2,3,camel-core/src/test/java/org/apache/camel/processor/aggregator/BeanBeforeAggregateIssueTest.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/BeanBeforeAggregateIssueTest.java;,2,2
3538,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2011/01/13 10:54:51 +0100,2011/01/13 10:54:51 +0100,Claus Ibsen,2011/01/13 13:03:35 +0100,0.089398148,0.089398148,PollingConsumerPollStrategy - Add information to commit how many messages was polled,See nabblehttp://camel.465427.n5.nabble.com/how-to-find-out-if-a-ftp-file-consumer-has-finished-reading-all-files-available-tp3337532p3337532.htmlHaving the number of messages polled allows end users to react accordingly. For example if there is 0 then they can do something special.,2.5.0,2.6.0,0,0,28,1,3,2,0,0,0,0,0,0,1,23,camel-core/src/main/java/org/apache/camel/BatchConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPollingConsumerPollStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/impl/LimitedPollingConsumerPollStrategy.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/spi/PollingConsumerPollStrategy.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyNotBeginTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyPolledMessagesTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyRollbackThrowExceptionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyStopOnRollbackTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPollStrategyTest.java;camel-core/src/test/java/org/apache/camel/impl/MockScheduledPollConsumer.java;camel-core/src/test/java/org/apache/camel/impl/ScheduledPollConsumerTest.java;components/camel-atom/src/main/java/org/apache/camel/component/feed/FeedEntryPollingConsumer.java;components/camel-atom/src/main/java/org/apache/camel/component/feed/FeedPollingConsumer.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpSimulateNetworkIssueRecoverTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerThrowExceptionOnLoginFailedTest.java;components/camel-ibatis/src/main/java/org/apache/camel/component/ibatis/IBatisPollingConsumer.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpOIDPoller.java;,0,0
3540,Bug,Closed,Fixed,,Minor,Jo?o Loureiro,2011/01/13 16:53:34 +0100,2011/01/13 17:38:30 +0100,Claus Ibsen,2011/01/13 17:59:41 +0100,0.045914352,0.014710648,Jt400DataQueueConsumer incorrectly implements timeout semantics (jt400 component),Jt400DataQueueConsumer implementation of receive(long) passes the timeout argument directly to com.ibm.as400.access.DataQueue.read(int)  not performing unit conversion. However  Jt400DataQueueConsumer.receive(long) accepts milliseconds  whereas DataQueue.read(int) accepts seconds as the time unit.Also  invoking Jt400DataQueueConsumer.receive() results in a call to DataQueue.read()  which is not a blocking call; on the contrary  it will not wait for entries.Code snippet below.Jt400DataQueueConsumer.java DataQueue queue = endpoint.getDataQueue(); try { DataQueueEntry entry; if (timeout &gt;= 0) { entry = queue.read((int)timeout); } else { entry = queue.read(); }Note that the submitted patch floors the timeout value when converting to seconds  but different rounding might be desired  which should be specified in the class documentation.,2.5.0,2.6.0,0,1,118,1,1,1,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/impl/PollingConsumerSupport.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueProducer.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400DataQueueConsumerTest.java;,0,0
3555,Improvement,Closed,Fixed,camel-jms,Minor,Claus Ibsen,2011/01/18 09:02:25 +0100,2011/01/18 09:02:25 +0100,Claus Ibsen,2011/01/18 11:41:54 +0100,0.110752315,0.110752315,camel-jms - Improve logic waiting for ReplyTo destination to be computed when doing request/reply,When you use request/reply over JMS a JMSReplyTo destination must be computed which happens async by the MessageListenerContainer which is to listen for the replies.The currently logic uses some low-level thread wait/notify scheme.We should change that to use the concurrency API using a countdown latch. That's much better.,2.5.0,2.6.0,0,0,48,1,1,1,0,0,0,0,0,0,1,5,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/test/resources/log4j.properties;,0,0
3559,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2011/01/18 15:31:47 +0100,2011/01/18 15:31:47 +0100,Claus Ibsen,2011/01/18 16:07:26 +0100,0.024756944,0.024756944,Aggregator - The completionFromBatchConsumer option dont aggregate the last incoming exchange,See nabblehttp://camel.465427.n5.nabble.com/Last-Aggregated-Exchange-lost-Aggregator-with-a-Batch-Consumer-and-persistent-AggregationRepository-tp3346214p3346214.html,2.5.0,2.6.0,0,0,5,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/issues/AggregatorWithBatchConsumingIssueTest.java;,0,0
3560,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2011/01/19 12:05:18 +0100,2011/01/19 12:05:18 +0100,Claus Ibsen,2011/01/19 12:19:20 +0100,0.00974537,0.00974537,Detect uncaught exceptions in UoWProcessor to ensure UoW is done even for those uncaught exceptions,The Camel routing engines will handle this in 99.9% of the cases  but when you shutdown a Spring AC then Spring may stop beans in whatever order and this can cause those beans to fail operating during a graceful shutdown. And in worst case exceptions is thrown in situations where they are not normally done.To cater for that and other situations the UoWProcessor should detect this and act accordingly.This ensure the in flight registry will be tracked and we are not stuck with a missing inflight message  causing Camel to wait for the 300 sec timeout to shutdown.For example just try hitting ctrl + c in that camel-example-management and you can see such an example.,2.5.0,2.6.0,0,0,115,1,1,1,0,0,0,0,0,0,2,5,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java;examples/camel-example-management/src/main/resources/META-INF/spring/camel-context.xml;camel-core/src/main/java/org/apache/camel/processor/UnitOfWorkProcessor.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;,0,0
3562,Improvement,Closed,Fixed,camel-bindy,Major,Ashwin Karpe,2011/01/20 01:35:27 +0100,2011/01/20 01:41:13 +0100,Ashwin Karpe,2011/01/20 19:15:43 +0100,0.736296296,0.732291667,BindyFixedLengthDataFormat does a trim on Fixed Length record,BindyFixedLengthDataFormat does a trim on Fixed Length record  although Fixed Length recordare strictly positional in nature and may contain lot of fillers with empty spaces  doing a trim causes Bindy to fail the message length validation and exception is thrown on message length // Read the line String line = scanner.nextLine().trim(); Should be changed to // Read the line String line = scanner.nextLine(); Or a conditional option should be provided in FixedLengthRecord annotation whether or not to trim the entire record,2.4.0,2.6.0,0,0,81,1,10,3,0,0,0,0,0,0,9,26,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trimfield/BindySimpleFixedLengthUnmarshallTrimFieldTest.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trimfield/BindySimpleFixedLengthUnmarshallTrimFieldTest-context.xml;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/notrim/BindySimpleFixedLengthNoTrimUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/notrim/BindySimpleFixedLengthNoTrimUnmarshallTest-context.xml;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest-context.xml;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/FixedLengthRecord.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/FixedLengthRecord.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/notrim/BindySimpleFixedLengthNoTrimUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest-context.xml;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/FixedLengthRecord.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/notrim/BindySimpleFixedLengthNoTrimUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest-context.xml;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/notrim/BindySimpleFixedLengthNoTrimUnmarshallTest-context.xml;components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest-context.xml;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/BindySimpleFixedLengthUnmarshallTest.java;,0,0
3565,Improvement,Closed,Fixed,camel-core,Minor,Andreas Asmuss,2011/01/20 12:27:35 +0100,2011/01/21 09:15:15 +0100,Claus Ibsen,2011/01/21 10:03:31 +0100,0.899953704,0.033518519,When Camel loads properties Camel should remove spaces (trim) from the end of the line.,If Camel reads a property from a properties-file that has a space at the end of a line like:some.property = theValue &lt;---Camel will resolve 'theValue ' and then crash at route creation. Should be 'theValue'.,2.5.0,2.6.0,0,0,35,1,5,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/properties/DefaultPropertiesResolver.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentLoadPropertiesFromFileTrimValuesTest.java;,0,0
3568,Improvement,Closed,Fixed,tooling,Major,Hadrian Zbarcea,2011/01/21 05:19:30 +0100,2011/03/03 17:32:35 +0100,Claus Ibsen,2011/03/04 07:41:24 +0100,42.09854167,0.589456019,Update archetypes to use new descriptor format,Camel archetypes use the old descriptor format and give the following output:[INFO] ********************* End of debug info from resources from generated POM ***********************[INFO] project created from Old (1.x) Archetype in dir: /w1/apache/camel/projects/camel-xxxWe need to update to use the archetype-metadata.xml descriptor,2.5.0,2.7.0,0,0,50,1,8,2,0,0,0,0,0,0,2,12,tooling/archetypes/camel-archetype-java/pom.xml;tooling/archetypes/camel-archetype-java/src/main/resources/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-java/src/main/resources/META-INF/maven/archetype.xml;tooling/archetypes/camel-archetype-java/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-java/src/main/resources/archetype-resources/src/main/java/MyRouteBuilder.java;tooling/archetypes/camel-archetype-activemq/src/main/resources/archetype-resources/src/main/resources/log4j.properties;tooling/archetypes/camel-archetype-webconsole/pom.xml;tooling/archetypes/camel-archetype-webconsole/src/main/resources/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-webconsole/src/main/resources/META-INF/maven/archetype.xml;tooling/archetypes/camel-archetype-webconsole/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-webconsole/src/main/resources/archetype-resources/src/main/resources/log4j.properties;tooling/archetypes/camel-archetype-webconsole/src/main/resources/archetype-resources/src/main/webapp/WEB-INF/applicationContext.xml;,0,0
3570,Improvement,Closed,Fixed,camel-snmp,Trivial,Claus Ibsen,2011/01/21 10:38:27 +0100,2011/02/28 12:10:44 +0100,Claus Ibsen,2011/02/28 12:11:51 +0100,38.06486111,0.000775,camel-snmp - Should mask password in the endpoint class,See nabblehttp://camel.465427.n5.nabble.com/password-shown-in-plain-text-in-the-log-file-while-starting-amp-stopping-context-td3347883.htmlThe password should be masked which can be done by overriding toString and mask it in the output.,2.5.0,2.7.0,0,0,22,1,1,1,0,0,0,1,0,0,1,1,components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpEndpoint.java;,0,0
3573,Improvement,Closed,Fixed,,Major,Christian M?ller,2011/01/21 13:28:01 +0100,2011/01/21 13:28:01 +0100,Christian M?ller,2011/02/01 22:15:35 +0100,11.36636574,11.36636574,In some places we use ObjectHelper.loadClass() instead of ClassResolver.resolveClass(),see Nabble,2.5.0,2.7.0,0,0,5,1,2,1,0,0,0,0,0,0,1,3,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsHelper.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsPollingConsumer.java;,0,0
3584,Bug,Closed,Fixed,camel-core,Major,Claus Ibsen,2011/01/24 16:17:07 +0100,2011/02/08 14:13:32 +0100,Claus Ibsen,2011/02/08 16:35:24 +0100,15.01269676,0.098518519,Concurrent writes to the same file has race condition,See nabblehttp://camel.465427.n5.nabble.com/Using-Splitter-and-file-producer-with-option-fileExist-Append-failed-tp3353618p3353618.htmlWe need to synchronize on the file name to avoid concurrent writes to the same file.,2.5.0,2.7.0,1,1,20,1,2,1,0,0,0,0,0,0,2,4,camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java;camel-core/src/test/java/org/apache/camel/component/file/FileConcurrentWriteAppendSameFileTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;,0,0
3588,Improvement,Closed,Fixed,camel-jms; camel-jpa,Minor,Claus Ibsen,2011/01/25 17:17:40 +0100,2011/02/05 04:29:26 +0100,Hadrian Zbarcea,2011/02/05 04:32:21 +0100,10.46853009,0.002025463,JMS spec and JPA spec JARs should not be compile scoped by provided,See nabblehttp://camel.465427.n5.nabble.com/dependency-compile-scope-to-geronimo-XYZ-VERSION-spec-in-camel-jpa-amp-camel-jms-td3356320.html#a3356541,2.5.0,2.7.0,0,0,5,1,3,2,0,0,0,0,0,0,1,1,components/camel-amqp/pom.xml;,0,0
3595,Bug,Closed,Fixed,camel-ftp,Major,Mikael J?rgensen,2011/01/27 15:08:16 +0100,2011/01/30 11:01:22 +0100,Claus Ibsen,2011/01/30 15:10:25 +0100,3.001493056,0.172951389,FTP rename fails,(This is related to the user group discussion http://camel.465427.n5.nabble.com/Problem-renaming-existing-file-in-FTP-td3307670.html)When using a tmpPrefix when uploading  the rename from the tmp-file to the destination file fails  if the destination file is already present  even though the option fileExist=Override is used.We have the problem on just a few destination servers which all seems to be windows machines.I have fetched the 2.4 branch of camel-ftp to find out why it does not work  since the unit test you refer to in your previous post do excercise the problem.It appears that the cause of the problem is  that the FtpOperations.existsFile fails to return true  which then causes the code not to enter the part where it deletes the exisiting file.The reason for the FtpOperations.existsFile to return false  is  that the list of existing files has the directoryname prepended  e.g. I'm trying to upload Test.REN to folder test/rename  and in the code 'if (existing.equals(onlyName))' existing=test/rename/Test.REN and onlyName=Test.REN - which returns false - but causes the later rename to fail as the target folder did contain the Test.REN. My guess is that it is server dependent whether the returned list of names in the directory include the directory name or not?To fix this I have added the following line of code before the if-statementexisting = FileUtil.stripPath(FileUtil.normalizePath(existing));So it will strip the path part of the file name before comparing it to onlyName.,2.4.0,2.7.0,0,0,234,1,7,2,0,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
3600,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2011/01/28 11:07:27 +0100,2011/01/28 11:07:27 +0100,Claus Ibsen,2011/01/28 18:07:58 +0100,0.292025463,0.292025463,ServiceHelper - Avoid started/stopping service if already started/stopped,We should optimize ServiceHelper to detect if the service is already started/stopped (if it extends ServiceSupport  as then it provides state).Also DefaultEndpoint should extends ServiceSupport to provide state so we know if the endpoint is started/stopped.This avoid double starting or stopping services which is not needed.And some custom components may not work well if they are started twice  just because Camel handles it lifecycle and invokes start multiple times.Also refine the logging in ServiceHelper from TRACE to DEBUG level so its easier to spot the lifecycle.,2.5.0,2.7.0,0,0,86,1,1,1,0,0,0,0,1,0,1,26,camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRoute.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpoint.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/main/java/org/apache/camel/util/LRUCache.java;camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java;camel-core/src/test/java/org/apache/camel/management/ManagedRegisterEndpointTest.java;camel-core/src/test/java/org/apache/camel/processor/Endpoint2MustBeStartedBeforeSendProcessorTest.java;camel-core/src/test/java/org/apache/camel/processor/EndpointMustBeStartedBeforeSendProcessorTest.java;camel-core/src/test/resources/log4j.properties;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBean.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessageListenerContainer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyEndpoint.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEndpoint.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/component/test/TestEndpoint.java;,0,0
3612,Improvement,Closed,Fixed,tooling,Minor,Jonathan Anstey,2011/02/01 17:35:07 +0100,2011/03/05 11:13:45 +0100,Claus Ibsen,2011/03/05 12:55:06 +0100,31.80554398,0.070381944,Include test directories in the archetypes,A reader of Camel in Action pointed out that typically folks write unit tests for their projects so we should of course add the test directories (empty or not) to the archetypes (http://www.manning-sandbox.com/thread.jspa?threadID=41702&amp;tstart=0). I agree but of course this is not possible with the current archetype descriptor we are using. Will do this once CAMEL-3611 is complete.,2.5.0,2.7.0,0,0,68,1,1,1,1,0,0,0,0,0,1,7,tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/src/main/resources/log4j.properties;tooling/archetypes/camel-archetype-java/src/main/resources/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-java/src/main/resources/archetype-resources/src/main/java/MyRouteBuilder.java;tooling/archetypes/camel-archetype-java/src/main/resources/archetype-resources/src/main/resources/log4j.properties;tooling/archetypes/camel-archetype-spring/src/main/resources/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-web/src/main/resources/archetype-resources/src/main/resources/log4j.properties;tooling/archetypes/camel-archetype-webconsole/src/main/resources/META-INF/maven/archetype-metadata.xml;,0,0
3616,Bug,Closed,Fixed,camel-sql,Major,Rob Davies,2011/02/02 16:04:33 +0100,2011/02/02 16:04:33 +0100,Rob Davies,2011/02/02 16:07:30 +0100,0.002048611,0.002048611,camel-josql doesnot export org.apache.camel.language.sql.*,camel-josql doesnot export org.apache.camel.language.sql.*,2.6.0; 2.7.0,2.7.0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,components/camel-josql/pom.xml;,0,0
3617,Bug,Closed,Fixed,camel-core,Major,Jean-Michel Morel,2011/02/03 15:00:24 +0100,2011/02/04 09:17:21 +0100,Claus Ibsen,2011/02/04 12:49:04 +0100,0.908796296,0.147025463,Inconsistent filename value when move attribute is used with File component,Unless I miss a point  when I use the following endpoint  the file:name value is incorrect and is equal to file:absolute.path&lt;endpoint id='fileEndpoint' uri='file:${queue.input.folder}?recursive=true&amp;include=.*/.dat&amp;move=${queue.done.folder}/$simple{file:name}&amp;moveFailed=${queue.failed.folder}/$simple{file:name}' /&gt;${queue.input.folder}  ${queue.done.folder} and ${queue.failed.folder} are absolute paths resolved by Spring.In fact  Camel tries to move the file to ${queue.done.folder}/${queue.input.folder}/$simple{file:name}I've also tried using $simple{header.CamelFileName} instead of $simple{file:name} and it gives the same result.For now  I've found a workaround using a processor which put the CamelFileName header value into a 'destFile' property &lt;endpoint id='fileEndpoint' uri='file:${queue.input.folder}?recursive=true&amp;include=.*/.dat&amp;move=${queue.done.folder}/$simple{property.destFile}&amp;moveFailed=${queue.failed.folder}/$simple{property.destFile}' /&gt;,2.5.0; 2.6.0,2.7.0,0,0,83,1,7,2,1,1,0,0,0,0,2,5,camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/FileAbsolutePathIssueTest.java;camel-core/src/test/resources/log4j.properties;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerExpressionTest.java;,0,0
3624,Improvement,Closed,Fixed,camel-smpp,Major,Christian M?ller,2011/02/04 18:37:54 +0100,2011/02/04 18:37:54 +0100,Christian M?ller,2011/02/04 18:51:20 +0100,0.009328704,0.009328704,camel-smpp should unbind from SMSC before disconnecting,See Nabble,2.6.0,2.7.0,0,0,5,1,4,2,1,0,0,0,0,0,1,4,components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppConsumerTest.java;components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppProducerTest.java;,0,0
3633,Improvement,Closed,Fixed,camel-quartz,Major,Claus Ibsen,2011/02/06 10:48:47 +0100,2011/02/06 10:48:47 +0100,Claus Ibsen,2011/02/06 10:57:33 +0100,0.006087963,0.006087963,Force disable Quartz UpdateChecker,This is really terrible that Terracotta added a 'malware' kinda feature in Quartz that automatic checks if there is a new version of Quartz. WTF that doesn't work nice in enterprises  where they want to be in control of their communication.We should force disabling this.See more details here:http://forums.terracotta.org/forums/posts/list/3395.page#19058https://jira.terracotta.org/jira/browse/QTZ-29,2.6.0,2.7.0,0,0,54,1,1,1,1,0,0,0,0,0,1,3,components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzNameCollisionTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/quartz/QuartzCronRouteTest.java;,0,0
3637,Bug,Closed,Fixed,,Major,Jean-Baptiste Onofr?,2011/02/07 08:47:05 +0100,2011/02/07 08:47:05 +0100,Jean-Baptiste Onofr?,2011/02/07 10:41:20 +0100,0.079340278,0.079340278,Mistake in camel-eventAdmin feature,The Camel Karaf feature camel-eventAdmin is not correct.The features is described as follow:&lt;feature name='camel-eventAdmin' version='2.6.0'&gt; &lt;feature version='2.6.0'&gt;camel-core&lt;/feature&gt; &lt;bundle&gt;mvn:org.apache.camel/camel-eventAdmin/2.6.0&lt;/bundle&gt;&lt;/feature&gt;but the camel-eventAdmin artifact correct name is camel-eventadmin:http://repo2.maven.org/maven2/org/apache/camel/camel-eventadmin/2.6.0/camel-eventadmin-2.6.0.jarThis typo mistake provides:Downloading: http://repo1.maven.org/maven2/org/apache/camel/camel-eventAdmin/2.6.0/camel-eventAdmin-2.6.0.jar&#91;INFO&#93; Unable to find resource 'org.apache.camel:camel-eventAdmin:jar:2.6.0' in repository central (http://repo1.maven.org/maven2)&#91;INFO&#93; ------------------------------------------------------------------------&#91;ERROR&#93; BUILD FAILURE&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Can't resolve bundle org.apache.camel:camel-eventAdmin:jar:2.6.0&#91;INFO&#93; ------------------------------------------------------------------------I'm gonna submit a patch to fix that.,2.6.0,2.7.0,0,0,69,1,1,1,0,0,0,0,0,0,1,1,platforms/karaf/features/src/main/resources/features.xml;,0,0
3638,Improvement,Closed,Fixed,osgi,Minor,Christian Schneider,2011/02/07 15:57:49 +0100,2011/02/07 15:57:49 +0100,Christian Schneider,2011/02/17 11:45:38 +0100,9.824872685,9.824872685,Upgrade maven-bundle-plugin to version 1.3.4,According to Guillaume Nodet we should try to upgrade to the 1.3.4 version of the maven bundle plugin as it simplyfies several osgi related definitions.I will do a full build before committing but as far as I know we do not test in osgi so we need some testing in osgi too. Perhaps Willem can run some servicemix tests.,2.6.0,2.7.0,0,0,60,1,2,2,0,0,0,0,0,0,1,1,pom.xml;,0,0
3644,Improvement,Closed,Fixed,,Minor,Claus Ibsen,2011/02/09 12:53:22 +0100,2011/02/09 12:53:22 +0100,Claus Ibsen,2011/02/11 07:03:25 +0100,1.756979167,1.756979167,camel-core-xml - Add getter/sett for endpoints,We have listed @XmlElement(name = 'endpoint'  required = false) private List&lt;CamelEndpointFactoryBean&gt; endpoints;in the camel-spring  but we dont have getter/setter.We should enforce this by adding getter/setter in camel-core-xml which we have for most of the stuff.,2.6.0,2.7.0,0,0,45,1,2,1,1,0,0,0,0,0,1,8,components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelConsumerTemplateFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelEndpointFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelProducerTemplateFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelThreadPoolFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/scan/AntPathMatcher.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/scan/PatternBasedPackageScanFilter.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;,0,0
3647,Improvement,Closed,Fixed,camel-core,Major,Christian M?ller,2011/02/09 18:38:15 +0100,2011/02/09 18:38:15 +0100,Christian M?ller,2011/02/09 20:10:14 +0100,0.063877315,0.063877315,Fix the Sonar Blocker: Performance - Maps and sets of URLs can be performance hogs,The Camel Sonar Pilot lists 4 blocker for Camel &#91;1&#93;. All in org.apache.camel.impl.converter.AnnotationTypeConverterLoader because it use the URL.equals() and URL.hashCode() methods.You can find the explanation in &#91;2&#93; why this is not a good idea. I would like to change it url.toURI()? Any doubt?&#91;1&#93; http://sonar.apache.org/drilldown/violations/org.apache.camel:camel?priority=BLOCKER#&#91;2&#93; http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html,2.6.0,2.7.0,0,0,55,1,1,1,0,0,0,0,1,0,1,2,camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java;,0,0
3650,Bug,Closed,Fixed,camel-smpp,Critical,Jaco van Tonder,2011/02/10 11:49:42 +0100,2011/02/10 15:34:39 +0100,Christian M?ller,2011/02/28 19:42:05 +0100,18.32804398,18.1718287,SMSC initiated unbind spawns exponential amounts of reconnect threads,It took me a bit of time to put my finger on this problem.When an unbind PDU is sent from the SMSC side to a camel-smpp endpoint  a cascading amount reconnect threads are spawned by the reconnect code. I can reliably re-produce this problem having a simple smpp consumer to a SMSC / simulator and issuing an unbind from the SMSC / simulator.Here are some logs (I have added additional debug messages to the SmppConsumer to show the object references and state of the SmppSession objects):,2.6.0,2.7.0,1,0,0,1,1,0,6,9,components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;,0,0,0,0,0,0,0,0
3654,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2011/02/11 09:50:25 +0100,2011/02/11 09:50:25 +0100,Claus Ibsen,2011/02/11 10:38:46 +0100,0.033576389,0.033576389,BinaryPredicate - Dont store state to ensure thread safety,We should introduce a new matches method which is used by mock's when they report failure messages. The new method should return the failure message which ensures we dont have to store state on the binary predicate instance.,2.6.0,2.7.0,0,0,38,1,1,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/BinaryPredicate.java;camel-core/src/main/java/org/apache/camel/builder/BinaryPredicateSupport.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/util/PredicateAssertHelper.java;,0,0
3666,Bug,Closed,Fixed,camel-restlet,Major,Fernando Ribeiro,2011/02/15 00:31:08 +0100,2011/02/15 07:22:22 +0100,Claus Ibsen,2011/02/15 07:22:22 +0100,0.285578704,0,Make Content-Type HTTP Header Optional,As per section 7.2.1 of RFC 2616  any HTTP/1.1 message containing an entity-body SHOULD (not MUST) include a Content- Type header field defining the media type of that body.The populateExchangeFromRestletRequest method of the DefaultRestletBinding class  unlike others in the same class  needs to be changed:if (request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)) { ...} else { inMessage.setBody(request.getEntity().getStream());},2.6.0,2.7.0,0,0,60,1,1,1,1,0,0,0,0,0,1,3,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletPostContentTest.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletProducerConcurrentTest.java;,0,0
3672,Improvement,Closed,Fixed,,Major,Rob Davies,2011/02/16 13:54:18 +0100,2011/02/16 13:54:18 +0100,Rob Davies,2011/02/16 17:06:27 +0100,0.1334375,0.1334375,Make it easier to derive from the Camel model,In order to facilitate the building of derivations of Camel  some methods in builder and model need to use accessors for member variables  and types to allow for sub types,2.6.0,2.7.0,0,0,30,1,1,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/builder/RouteBuilder.java;camel-core/src/main/java/org/apache/camel/model/FilterDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;,0,0
3678,Improvement,Closed,Fixed,camel-core,Major,Claus Ibsen,2011/02/17 13:36:48 +0100,2011/02/17 13:36:48 +0100,Claus Ibsen,2011/02/18 15:01:28 +0100,1.058796296,1.058796296,Java DSL - Allow load balancer to be used inside CBR,We should allow to use the load balancer inside the CBR  in eg the when predicate.See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Java-DSL-caveat-with-the-Content-Based-Router-td3389083.html,2.6.0,2.7.0,0,0,20,1,5,2,1,0,0,0,1,0,1,4,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/ToDefinition.java;camel-core/src/test/java/org/apache/camel/processor/CBRWithLoadBalancerTest.java;camel-core/src/test/java/org/apache/camel/processor/CBRWithMulticastTest.java;,0,0
3690,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2011/02/21 09:16:36 +0100,2011/02/21 09:16:36 +0100,Claus Ibsen,2011/02/21 10:19:07 +0100,0.043414352,0.043414352,Endpoints may be shutdown twice as they are tracked in two lists in CamelContext,Endpoint is a Service which means they are listed in both a endpoint and service list. They should only be listed in the endpoint list.This avoids issues with endpoints may be shutdown twice when Camel shutdown.See nabblehttp://camel.465427.n5.nabble.com/QuartzComponent-do-not-delete-quartz-worker-threads-when-shutdown-Camel-tp3393728p3393728.html,2.6.0,2.7.0,0,0,40,1,1,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/impl/EndpointShutdownOnceTest.java;,0,0
3708,Improvement,Closed,Fixed,camel-core; camel-spring,Major,Claus Ibsen,2011/02/23 11:51:18 +0100,2011/02/23 11:51:18 +0100,Claus Ibsen,2011/02/23 16:25:27 +0100,0.190381944,0.190381944,Tidy up AST model to proper support output or not,We should tidy up the model  so they clearly indicate if outputs supported no outputseg when an EIP supports output  they can be nested/added to it  eg in XML its like&lt;split&gt; &lt;output 1&gt; &lt;output 2&gt;&lt;/split&gt;But some EIPs indicate they support output  but they dont. For example &lt;to&gt; should not support output as it doesn't make sense.We should introduce a isOutputSupported on the ProcessorDefinition and then check each EIP.This will cause changes to the XSD in that regard EIPs which really didn't support output (eg it was hacked that way in Java code) but the XSD would allow outputs  eg&lt;to uri='xxx'&gt; &lt;output 1&gt; &lt;output 2&gt;&lt;/to&gt;Now this would not be possible and you would have to do&lt;to uri='xxx'/&gt;&lt;output 1&gt;&lt;output 2&gt;This will in fact reduce the XSD and make it more concise when outputs is supported or not.,2.6.0,2.7.0,0,0,171,1,1,1,1,0,0,0,0,0,1,36,camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/model/CatchDefinition.java;camel-core/src/main/java/org/apache/camel/model/ChoiceDefinition.java;camel-core/src/main/java/org/apache/camel/model/ConvertBodyDefinition.java;camel-core/src/main/java/org/apache/camel/model/DelayDefinition.java;camel-core/src/main/java/org/apache/camel/model/EnrichDefinition.java;camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java;camel-core/src/main/java/org/apache/camel/model/LoadBalanceDefinition.java;camel-core/src/main/java/org/apache/camel/model/LogDefinition.java;camel-core/src/main/java/org/apache/camel/model/NoOutputDefinition.java;camel-core/src/main/java/org/apache/camel/model/NoOutputExpressionNode.java;camel-core/src/main/java/org/apache/camel/model/OnCompletionDefinition.java;camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/model/OutputDefinition.java;camel-core/src/main/java/org/apache/camel/model/PollEnrichDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RemoveHeaderDefinition.java;camel-core/src/main/java/org/apache/camel/model/RemoveHeadersDefinition.java;camel-core/src/main/java/org/apache/camel/model/RemovePropertyDefinition.java;camel-core/src/main/java/org/apache/camel/model/ResequenceDefinition.java;camel-core/src/main/java/org/apache/camel/model/RollbackDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/main/java/org/apache/camel/model/SamplingDefinition.java;camel-core/src/main/java/org/apache/camel/model/SendDefinition.java;camel-core/src/main/java/org/apache/camel/model/SetExchangePatternDefinition.java;camel-core/src/main/java/org/apache/camel/model/SetFaultBodyDefinition.java;camel-core/src/main/java/org/apache/camel/model/SetOutHeaderDefinition.java;camel-core/src/main/java/org/apache/camel/model/StopDefinition.java;camel-core/src/main/java/org/apache/camel/model/ThreadsDefinition.java;camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java;camel-core/src/main/java/org/apache/camel/model/ThrowExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/model/ToDefinition.java;camel-core/src/main/java/org/apache/camel/model/TransactedDefinition.java;camel-core/src/main/java/org/apache/camel/model/WhenDefinition.java;camel-core/src/main/java/org/apache/camel/model/loadbalancer/RandomLoadBalancerDefinition.java;,0,0
3709,Bug,Closed,Fixed,camel-core,Minor,S?ren Markert,2011/02/23 13:12:35 +0100,2011/02/23 15:23:34 +0100,Claus Ibsen,2011/02/24 06:21:03 +0100,0.714212963,0.623252315,interceptFrom and from(Endpoint) don't work together,When using interceptFrom(String) together with from(Endpoint)  the below Exception occurs during the routes building process. Looking at RoutesDefinition.java:217 reveals  that the FromDefintion just created has no URI. That causes the comparison to all the interceptFroms' URIs to fail. As far as I can tell  the way to fix this would be to add setUri(myEndpoint.getEndpointUri()) in the constructor FromDefinition(Endpoint endpoint).Below the stack trace  there is a unit test that demonstrates the issue. Until it if fixed  it can be easily circumvented by adding the commented-out line  and then change to from('myEndpoint').org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: null due to: null at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:109) at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:217) at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:167) at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:101) at dk.mobilethink.adc2.endpoint.UnsetUriTest$1.configure(UnsetUriTest.java:18) at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:318) at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:273) at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:259) at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:612) at org.apache.camel.test.CamelTestSupport.setUp(CamelTestSupport.java:111) at junit.framework.TestCase.runBare(TestCase.java:132) at org.apache.camel.test.TestSupport.runBare(TestSupport.java:65) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: java.lang.NullPointerException at org.apache.camel.util.UnsafeUriCharactersEncoder.encode(UnsafeUriCharactersEncoder.java:56) at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:162) at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:107) ... 24 morepackage dk.mobilethink.adc2.endpoint;import org.apache.camel.Endpoint;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.test.CamelTestSupport;public class UnsetUriTest extends CamelTestSupport { @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { interceptFrom('URI1').to('irrelevantURI'); Endpoint myEndpoint = getContext().getComponent('direct').createEndpoint('ignoredURI'); // getContext().addEndpoint('myEndpoint'  myEndpoint); from(myEndpoint) .inOnly('log:foo'); } }; } public void testNothing() { }},2.5.0; 2.6.0,2.7.0,0,1,239,1,3,1,1,1,0,0,0,0,3,16,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java;camel-core/src/main/java/org/apache/camel/model/RoutesDefinition.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromEndpointInstanceTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromEndpointNotUriTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromEndpointRefTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromEndpointRefUriTest.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringInterceptFromEndpointRefTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringInterceptFromEndpointRefTest.xml;camel-core/src/main/java/org/apache/camel/model/FromDefinition.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptFromEndpointNotUriTest.java;camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java;camel-core/src/main/java/org/apache/camel/model/InterceptFromDefinition.java;camel-core/src/test/java/org/apache/camel/processor/SimpleMockTest.java;,0,0
3711,Bug,Closed,Fixed,camel-core; camel-spring,Major,Claus Ibsen,2011/02/23 18:22:22 +0100,2011/02/23 18:22:22 +0100,Claus Ibsen,2011/02/24 06:24:46 +0100,0.501666667,0.501666667,OnException - The order they are defined in the RouteBuilder / XML should be preserved when you have multiple of the same exception type,When you have 2+ of onException(MyExcpetion.class) then the order may get reversed  in the logic which prepares the routes. The logic should cater for clashes and ensure orders is preserved.This currently only occurs for XML based routes. The Java DSL works.,2.6.0,2.7.0,0,0,41,1,1,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java;camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategyUsingWhenTest.java;,0,0
3714,Improvement,Resolved,Fixed,camel-jms,Minor,Jim Newsham,2011/02/24 06:02:51 +0100,2011/04/19 02:30:54 +0100,Willem Jiang,2011/04/19 06:07:06 +0100,54.00295139,0.150138889,camel-jms: testConnectionOnStartup does not test connection for producers,I have a camel context which configures jms producers  but no jms consumers. With this configuration  the 'testConnectionOnStartup' jms option did not test the connection when I started the camel context. I have discovered that (with the current implementation) the 'testConnectionOnStartup' option only applies to consumers. I see that it is implemented in JmsConsumer.doStart() -&gt; JmsConsumer.testConnectionOnStartup(). It would be useful if this option could also applied to producers.As a workaround  I configured a dummy route and a dummy jms consumer.,2.5.0,2.8.0,0,0,80,1,3,2,1,0,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTestConnectionOnStartupTest.java;,0,0
3715,Bug,Closed,Fixed,camel-http,Major,Claus Ibsen,2011/02/24 10:24:41 +0100,2011/02/24 10:24:41 +0100,Claus Ibsen,2011/02/24 14:58:30 +0100,0.190150463,0.190150463,Sending to http endpoint may double encoding parameters,See nabbleThe workaround is to use either HTTP_URI or HTTP_QUERY as a header with the parameters. Then they are not double encoded.Also the HTTP_URI should be placeholder resolved  so we can use port or the likes to inject the port number dynamic.,2.6.0,2.7.0,0,0,42,1,1,1,1,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/util/URISupport.java;camel-core/src/test/java/org/apache/camel/util/URISupportTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;components/camel-http/src/main/java/org/apache/camel/component/http/helper/HttpHelper.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/helper/HttpHelper.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/HttpQueryTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpClientRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpEndpointUriEncodingIssueTest.java;,0,0
3721,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2011/02/26 09:28:41 +0100,2011/02/26 09:28:41 +0100,Claus Ibsen,2011/02/27 12:22:14 +0100,1.120520833,1.120520833,Camel properties component - Add support for using jvm system/env in location,For example you may want to say {{location=${karaf.hom}/etc/myprop.properties}}.eg where karaf.home is a jvm system property.Take a look at simple as we may want to be able to lookup environment variable also.,2.6.0,2.7.0,0,0,31,1,2,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentLocationWithJvmPropertyTest.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentLocationWithTwoJvmPropertyTest.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentTest.java;,0,0
3722,Improvement,Closed,Fixed,camel-blueprint; camel-core; camel-spring,Minor,Claus Ibsen,2011/02/26 09:30:28 +0100,2011/02/26 09:30:28 +0100,Claus Ibsen,2011/02/27 09:02:39 +0100,0.98068287,0.98068287,ThreadPoolProfile - Use string types so its much easier to use property placeholders,In the XML DSL you can use threadPoolProfile to define profiles for thread pools. People may want to use property placeholders for min/max values etc. Using xs:string is thus much easier to do that. We do that for some of the others such as &lt;jmxAgent&gt;,2.6.0,2.7.0,0,0,45,1,1,1,1,0,0,0,0,0,1,13,camel-core/src/main/java/org/apache/camel/builder/ThreadPoolBuilder.java;camel-core/src/main/java/org/apache/camel/component/properties/DefaultPropertiesParser.java;camel-core/src/main/java/org/apache/camel/model/ThreadPoolProfileDefinition.java;camel-core/src/test/java/org/apache/camel/component/properties/OptionalPropertiesDslInvalidSyntaxTest.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentRegistryTest.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentTest.java;camel-core/src/test/java/org/apache/camel/util/URISupportTest.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelThreadPoolFactoryBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/SpringCamelContextThreadPoolProfilesWithPlaceholderTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/SpringCamelContextThreadPoolProfilesWithPlaceholderTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/config/pool.properties;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThreadsExternalThreadPoolFactoryBeanTest.xml;,0,0
3729,Bug,Closed,Fixed,camel-jaxb,Major,Dragisa Krsmanovic,2011/02/28 19:46:03 +0100,2011/03/01 09:20:10 +0100,Claus Ibsen,2011/03/01 09:43:44 +0100,0.581724537,0.016365741,JAXB marshaling broken in 2.6.0,This used to work in 2.5.0 but in 2.6.0 it throws:Caused by: javax.xml.bind.JAXBException: class com.ask.ugc.camel.Jask3061$Foo nor any of its super class is known to this context. at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:594) at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:482) at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:315) at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:244) at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75) at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:117) at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:96)...@ContextConfiguration( locations = 'foo.bar.JaxbBug$ContextConfig'  loader = JavaConfigContextLoader.class)public class JaxbBug extends AbstractTestNGSpringContextTests { @EndpointInject(uri = 'mock:end') protected MockEndpoint mockEndpoint; @Produce(uri = 'direct:test') protected ProducerTemplate producer; @Test @DirtiesContext public void testJaxbMarshalling() throws InterruptedException { mockEndpoint.expectedMessageCount(1); producer.sendBody(new Foo()); mockEndpoint.assertIsSatisfied(); } @Configuration public static class ContextConfig extends SingleRouteCamelConfiguration { @Bean public RouteBuilder route() { return new RouteBuilder() { @Override public void configure() throws Exception { JaxbDataFormat jaxb = new JaxbDataFormat(JAXBContext.newInstance(Foo.class)); from('direct:test').marshal(jaxb).to('mock:end'); } }; } } @XmlRootElement public static class Foo { String bar; public String getBar() { return bar; } public void setBar(String bar) { this.bar = bar; } }},2.6.0,2.7.0,0,1,178,1,4,2,1,0,0,0,0,1,1,4,components/camel-jaxb/pom.xml;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/JaxbDataFormatIssueTest.java;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/JaxbDataFormatIssueUsingSpringJavaConfigTest.java;components/camel-jaxb/src/test/resources/log4j.properties;,0,0
3731,Improvement,Closed,Fixed,camel-core,Trivial,Claus Ibsen,2011/03/01 06:19:41 +0100,2011/03/01 06:19:41 +0100,Claus Ibsen,2011/03/01 06:21:09 +0100,0.001018519,0.001018519,IgnoreInvalidEndpoint should log invalid endpoints at DEBUG level,Currently its logged at INFO level with full stacktrace. If end user enabled this option we should only log it at DEBUG level to avoid spamming production logs.See nabblehttp://camel.465427.n5.nabble.com/camel-recipientList-with-ignoreInvalidEndpoints-true-tp3404103p3404103.html,2.6.0,2.7.0,0,0,32,1,1,1,0,0,0,0,0,0,2,7,camel-core/src/main/java/org/apache/camel/processor/RecipientListProcessor.java;camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanDefinitionParser.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanBusSettingTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/CxfDispatchMessageBeans.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/CxfDispatchPayloadBeans.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeansBusSetting.xml;,0,0
3733,Improvement,Closed,Fixed,camel-core; camel-test,Minor,Willem Jiang,2011/03/01 09:57:06 +0100,2011/03/01 09:57:06 +0100,Willem Jiang,2011/03/02 15:09:40 +0100,1.217060185,1.217060185,Add comments on the CamelContextTestSupport class to tell user to start the camel context manually when the test doesn't use the RouteBuilder,Current CamelContextTestSupport class will not start the camelcontext if the isUseRouteBuilder() return false.If the component that is used by template needs to be started  your test method will get the NPE or some strange error.And you can these load when shutting down the camel context.Mar 1  2011 4:31:29 PM org.apache.camel.test.junit4.CamelTestSupport tearDownINFO: Testing done: com.fusesource.example.camel.cxf.jms.HelloWorldClient@e49d67cMar 1  2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext:camel-1) is shutting downMar 1  2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext createManagementStrategyINFO: JMX is disabled. Using DefaultManagementStrategy.Mar 1  2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdownINFO: Starting to graceful shutdown 0 routes (timeout 10 seconds)Mar 1  2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdownINFO: Graceful shutdown of 0 routes completed in 0 secondsMar 1  2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Uptime: not startedMar 1  2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext: camel-1) is shutdown in 0.023 seconds,2.4.0; 2.5.0; 2.6.0,2.7.0,0,0,140,1,2,2,0,1,0,0,0,0,2,4,camel-core/src/test/java/org/apache/camel/ContextTestSupport.java;camel-core/src/test/java/org/apache/camel/ContextTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/CamelTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;,0,0
3738,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2011/03/01 14:49:49 +0100,2011/03/01 14:49:49 +0100,Claus Ibsen,2011/03/01 15:20:56 +0100,0.021608796,0.021608796,Let log  log eip and mock producer be async processor,We should prefer to use the async processor for the Camel EIPs and components when possible. This avoids the tiny overhead of having a sync to async adapter (implemented using a converter).,2.6.0,2.7.0,0,0,32,1,1,1,0,0,0,0,0,0,2,6,camel-core/src/main/java/org/apache/camel/util/AsyncProcessorHelper.java;camel-core/src/main/java/org/apache/camel/component/log/LogEndpoint.java;camel-core/src/main/java/org/apache/camel/component/log/LogProducer.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/processor/LogProcessor.java;camel-core/src/main/java/org/apache/camel/util/AsyncProcessorHelper.java;,0,0
3749,Bug,Closed,Fixed,camel-ftp,Major,Marco Crivellaro,2011/03/03 17:58:06 +0100,2011/03/04 08:16:19 +0100,Claus Ibsen,2011/03/04 13:25:33 +0100,0.810729167,0.21474537,sftp producer runs in exception fileName does not contain any path information,When the fileName uri option does not contain any folder information  ie: 'fileName=filename.txt' the producer runs in exceptionThe exception is thrown when the producer calls ls method of jsch ChannelSftp passing an empty string as directory parameter in org.apache.camel.component.file.remote.SftpOperations.existsFile line 704sample URI: sftp://user@hostname:22?disconnect=true&amp;eagerDeleteTargetFile=false%3Bstepwise%3Dfalse&amp;fileName=SYSTEM01&amp;password=******&amp;soTimeout=30000&amp;tempFileName=%24%7Bfile%3Aname.noext%7D.tmpStack trace:[2011-03-03 14:40:40 827][RecipientList (thread #4)][ERROR][org.apache.camel.processor.DefaultErrorHandler][] Failed delivery for exchangeId: ID-******-33331-1299163043684-0-10. Exhausted after delivery attempt: 1 caught: org.apache.camel.component.file.GenericFileOperationFailedExcept on: org.apache.camel.component.file.GenericFileOperationFailedException: at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:727) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:130) at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:50) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:716) at org.apache.camel.processor.MulticastProcessor.access$100(MulticastProcessor.java:78) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:282) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:274) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) Caused by: 4: at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1353) at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:704) ... 20 more Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0 at java.lang.String.charAt(String.java:686) at com.jcraft.jsch.ChannelSftp.remoteAbsolutePath(ChannelSftp.java:2367) at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1185) ... 21 more,2.6.0,2.7.0,0,0,144,1,5,2,0,0,0,0,0,0,1,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpProduceTempFileTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceTest.java;,0,0
3756,Improvement,Closed,Fixed,examples,Major,Christian M?ller,2011/03/05 13:00:55 +0100,2011/03/05 13:00:55 +0100,Christian M?ller,2011/04/11 20:36:27 +0100,37.31634259,37.31634259,Add an example which use CXF bean binding and the OSGI HTTP Service (e.g. PAX Web with jetty),Please see Nabble for details.,2.6.0,2.8.0,0,0,8,1,6,2,0,0,0,0,0,0,2,9,examples/camel-example-cxf-osgi/README.txt;examples/camel-example-cxf-osgi/pom.xml;examples/camel-example-cxf-osgi/src/main/java/org/apache/camel/example/reportincident/ReportIncidentRoutes.java;examples/camel-example-cxf-osgi/src/main/resources/META-INF/LICENSE.txt;examples/camel-example-cxf-osgi/src/main/resources/META-INF/NOTICE.txt;examples/camel-example-cxf-osgi/src/main/resources/META-INF/spring/camel-context.xml;examples/camel-example-cxf-osgi/src/main/resources/META-INF/wsdl/report_incident.wsdl;examples/pom.xml;examples/camel-example-cxf-osgi/README.txt;,0,0
3759,Improvement,Closed,Fixed,,Major,Christian M?ller,2011/03/05 14:47:15 +0100,2011/03/05 14:47:15 +0100,Christian M?ller,2011/06/16 23:09:01 +0100,103.3484491,103.3484491,After switching to slf4j  we can get rid of the 'isTraceEnabled'  'isDebugEnabled' and 'isInfoEnabled' statements,we can get rid of the 'isTraceEnabled'  'isDebugEnabled' and 'isInfoEnabled' statements with slf4j and uselogger.debug('Temperature set to {}. Old temperature was {}.'  t  oldT);insteadchristian-muellers-macbook-pro:camel cmueller$ egrep -r 'isTraceEnabled|isDebugEnabled|isInfoEnabled]' . | wc -l 1485,2.6.0,2.8.0,0,0,41,1,12,2,0,0,0,0,0,0,6,435,components/camel-atom/src/main/java/org/apache/camel/component/atom/UpdatedDateFilter.java;components/camel-bam/src/main/java/org/apache/camel/bam/model/ActivityState.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/ActivityMonitorEngine.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/BamProcessorSupport.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/JpaBamProcessor.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyKeyValuePairFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/kvp/BindyKeyValuePairDataFormat.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintComponentResolver.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintDataFormatResolver.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintLanguageResolver.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/ContextScanRouteBuilderFinder.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/PackageScanRouteBuilderFinder.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheConsumer.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheEventListener.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedMessageBodyReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedTokenReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedXPathReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheValidate.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheConsumerFIFOTest.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheConsumerTest.java;components/camel-cache/src/test/java/org/apache/camel/processor/cache/CacheBasedBodyReplacerTest.java;components/camel-cache/src/test/java/org/apache/camel/processor/cache/CacheBasedTokenReplacerTest.java;components/camel-cache/src/test/java/org/apache/camel/processor/cache/CacheBasedXPathElementReplacerTest.java;components/camel-context/src/main/java/org/apache/camel/component/context/LocalContextComponent.java;components/camel-context/src/main/java/org/apache/camel/component/context/QualifiedContextComponent.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextPublisher.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiComponentResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDataFormatResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiLanguageResolver.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java;components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanDestination.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanTransportFactory.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java;components/camel-exec/src/main/java/org/apache/camel/component/exec/impl/DefaultExecBinding.java;components/camel-flatpack/src/main/java/org/apache/camel/component/flatpack/FlatpackComponent.java;components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/FreemarkerEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBAggregationRepository.java;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBFile.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateLoadAndRecoverTest.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateLoadConcurrentTest.java;components/camel-hawtdb/src/test/java/org/apache/camel/component/hawtdb/HawtDBAggregateLoadTest.java;components/camel-hl7/src/main/java/org/apache/camel/component/hl7/HL7MLLPDecoder.java;components/camel-hl7/src/main/java/org/apache/camel/component/hl7/HL7MLLPEncoder.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-ibatis/src/main/java/org/apache/camel/component/ibatis/IBatisConsumer.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcComponent.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConsumer.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcEndpoint.java;components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/DefaultJettyHttpBinding.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyContentExchange.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java;components/camel-jing/src/main/java/org/apache/camel/component/validator/jing/JingComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConsumer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmProducer.java;components/camel-kestrel/src/main/java/org/apache/camel/component/kestrel/KestrelComponent.java;components/camel-kestrel/src/main/java/org/apache/camel/component/kestrel/KestrelConsumer.java;components/camel-kestrel/src/main/java/org/apache/camel/component/kestrel/KestrelProducer.java;components/camel-ldap/src/main/java/org/apache/camel/component/ldap/LdapProducer.java;components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailProducer.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/security/DummyTrustManager.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisConsumer.java;components/camel-nagios/src/main/java/org/apache/camel/component/nagios/NagiosProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConfiguration.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConsumer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ServerChannelHandler.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactoryAsynchTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactorySynchTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettySSLTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyTCPAsyncTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyTCPSyncNotLazyChannelTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyUDPAsyncTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyUDPObjectSyncTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyUDPSyncTest.java;components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;components/camel-quartz/src/main/java/org/apache/camel/routepolicy/quartz/ScheduledRoutePolicy.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEngine.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjProducer.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/routing/FixMessageRouter.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/MethodBasedRouter.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletConsumer.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/RouteboxServiceSupport.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/direct/RouteboxDirectProducer.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/seda/RouteboxSedaConsumer.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/strategy/RouteboxDispatcher.java;components/camel-routebox/src/test/java/org/apache/camel/component/routebox/RouteboxDefaultContextAndRouteBuilderTest.java;components/camel-routebox/src/test/java/org/apache/camel/component/routebox/RouteboxDirectProducerOnlyTest.java;components/camel-routebox/src/test/java/org/apache/camel/component/routebox/RouteboxDirectTest.java;components/camel-routebox/src/test/java/org/apache/camel/component/routebox/RouteboxDispatchMapTest.java;components/camel-routebox/src/test/java/org/apache/camel/component/routebox/RouteboxSedaTest.java;components/camel-routebox/src/test/java/org/apache/camel/component/routebox/demo/BookCatalog.java;components/camel-rss/src/main/java/org/apache/camel/component/rss/UpdatedDateFilter.java;components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java;components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryComponent.java;components/camel-script/src/main/java/org/apache/camel/builder/script/ScriptBuilder.java;components/camel-shiro/src/main/java/org/apache/camel/component/shiro/security/ShiroSecurityPolicy.java;components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java;components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipSubscriptionListener.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java;components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpEndpoint.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpOIDPoller.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpTrapConsumer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationProducer.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/adapter/CamelSourceAdapter.java;components/camel-spring-javaconfig/src/main/java/org/apache/camel/spring/javaconfig/test/JavaConfigContextLoader.java;components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java;components/camel-spring/src/main/java/org/apache/camel/component/ResourceBasedEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/component/test/TestEndpoint.java;components/camel-spring/src/main/java/org/apache/camel/component/validator/ValidatorComponent.java;components/camel-spring/src/main/java/org/apache/camel/component/xslt/XsltComponent.java;components/camel-spring/src/main/java/org/apache/camel/osgi/CamelContextFactory.java;components/camel-spring/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/ContextScanRouteBuilderFinder.java;components/camel-spring/src/main/java/org/apache/camel/spring/PackageScanRouteBuilderFinder.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java;components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/SpringTransactionPolicy.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregationRepository.java;components/camel-sql/src/test/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregateLoadAndRecoverTest.java;components/camel-sql/src/test/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregateLoadConcurrentTest.java;components/camel-sql/src/test/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregateLoadTest.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamConsumer.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamEndpoint.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamProducer.java;components/camel-stringtemplate/src/main/java/org/apache/camel/component/stringtemplate/StringTemplateEndpoint.java;components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-web/src/main/java/org/apache/camel/web/resources/RouteResource.java;components/camel-web/src/main/java/org/apache/camel/web/resources/RoutesResource.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppComponent.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppLogger.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/JmxMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerTypeConverterLoader.java;components/camel-nagios/src/main/java/org/apache/camel/component/nagios/NagiosEventNotifier.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpTrapConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java;camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileChangedExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileProcessStrategySupport.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/language/LanguageProducer.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/component/mock/TimeClause.java;camel-core/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java;camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultLanguageResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultServicePool.java;camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/LimitedPollingConsumerPollStrategy.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/main/java/org/apache/camel/impl/RoutePolicySupport.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/BaseTypeConverterRegistry.java;camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguageSupport.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java;camel-core/src/main/java/org/apache/camel/management/PublishEventNotifier.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RouteDefinition.java;camel-core/src/main/java/org/apache/camel/model/TransactedDefinition.java;camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java;camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java;camel-core/src/main/java/org/apache/camel/processor/DefaultChannel.java;camel-core/src/main/java/org/apache/camel/processor/DelayProcessorSupport.java;camel-core/src/main/java/org/apache/camel/processor/FilterProcessor.java;camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/OnCompletionProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Pipeline.java;camel-core/src/main/java/org/apache/camel/processor/PipelineHelper.java;camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryPolicy.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;camel-core/src/main/java/org/apache/camel/processor/WireTapProcessor.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentOnCompletion.java;camel-core/src/main/java/org/apache/camel/processor/loadbalancer/FailOverLoadBalancer.java;camel-core/src/main/java/org/apache/camel/processor/validation/PredicateValidatingProcessor.java;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java;camel-core/src/main/java/org/apache/camel/util/EventHelper.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/ContextScanRouteBuilderFinder.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/PackageScanRouteBuilderFinder.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedTokenReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheValidate.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java;components/camel-context/src/main/java/org/apache/camel/component/context/LocalContextComponent.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiComponentResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDataFormatResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiLanguageResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiPackageScanClassResolver.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/utils/BundleDelegatingClassLoader.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/SoapMessageHeaderFilter.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanDestination.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/DefaultCxfBeanBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfEndpointUtils.java;components/camel-eventadmin/src/main/java/org/apache/camel/component/eventadmin/EventAdminConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBAggregationRepository.java;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBFile.java;components/camel-http/src/main/java/org/apache/camel/component/http/CamelServlet.java;components/camel-ibatis/src/main/java/org/apache/camel/component/ibatis/IBatisConsumer.java;components/camel-ibatis/src/main/java/org/apache/camel/component/ibatis/IBatisProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmProducer.java;components/camel-kestrel/src/main/java/org/apache/camel/component/kestrel/KestrelConsumer.java;components/camel-ldap/src/main/java/org/apache/camel/component/ldap/LdapProducer.java;components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java;components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeWithContentTypeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MimeMultipartAlternativeWithLongerFilenameTest.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaHelper.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisConsumer.java;components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java;components/camel-nagios/src/main/java/org/apache/camel/component/nagios/NagiosEventNotifier.java;components/camel-nagios/src/main/java/org/apache/camel/component/nagios/NagiosProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyHelper.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ServerChannelHandler.java;components/camel-paxlogging/src/main/java/org/apache/camel/component/paxlogging/PaxLoggingConsumer.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/RouteboxConfiguration.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/seda/RouteboxSedaProducer.java;components/camel-spring/src/main/java/org/apache/camel/component/xslt/XsltComponent.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java;components/camel-spring/src/main/java/org/apache/camel/spring/ContextScanRouteBuilderFinder.java;components/camel-spring/src/main/java/org/apache/camel/spring/PackageScanRouteBuilderFinder.java;components/camel-spring/src/main/java/org/apache/camel/spring/util/SpringAntPathMatcherFileFilter.java;components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregationRepository.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamConsumer.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamProducer.java;components/camel-syslog/src/main/java/org/apache/camel/component/syslog/Rfc3164SyslogConverter.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppBinding.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java;components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerTypeConverterLoader.java;components/camel-exec/src/main/java/org/apache/camel/component/exec/ExecProducer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-nagios/src/main/java/org/apache/camel/component/nagios/NagiosEventNotifier.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;component,,
3769,Bug,Closed,Fixed,camel-mail,Major,Alfred Hiebl,2011/03/08 17:08:49 +0100,2011/03/09 10:12:43 +0100,Claus Ibsen,2011/03/09 10:22:07 +0100,0.717569444,0.006527778,Mail component issue with starttls option,The problem occurs when I read from a pop3 endpoint and send to an smtp endpoint in the same camel context with the mail.pop3.starttls.enable=true and mail.smtp.starttls.enable=true options.Required Java options for starttls are set:-Djavax.net.ssl.trustStore=D:/test/xxx.jks-Djavax.net.ssl.trustStorePassword=yyyWhen I only configure one of either route  everything works fine. When I configure both  I get the following exception:AUTH LOGINC: STAT530 Must issue STARTTLS command firstSTARTTLSS: +OK 0 0C: NOOP220 begin TLS negotiationS: +OKC: RSETS: +OKC: QUITAUTH LOGINS: +OK POP3 server closing connection503 wrong state for AUTH command2011-03-03 10:08:36 797 &#91;foo&#93; ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID-E6500-ahi-61446-1299143304838-0-2. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH commandorg.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH command at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:392)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:355)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)&#91;org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE&#93; at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)&#91;camel-mail-2.6.0.jar:2.6.0&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.RoutePolicyProcessor.process(RoutePolicyProcessor.java:75)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:104)&#91;camel-core-2.6.0.jar:2.6.0&#93; at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)&#91;camel-core-2.6.0.jar:2.6.0&#93; at java.util.TimerThread.mainLoop(Unknown Source)&#91;:1.5.0_22&#93; at java.util.TimerThread.run(Unknown Source)&#91;:1.5.0_22&#93;The problem seems to be in org.apache.camel.component.mail.MailConfiguration.createJavaMailSender() where it uses the same mail session for both connection; see Session.getDefaultInstance below if (session != null) { answer.setSession(session); } else { // use our authenticator that does no live user interaction but returns the already configured username and password Session session; try { session = Session.getDefaultInstance(answer.getJavaMailProperties()  getAuthenticator()); } catch (Throwable t) { // fallback as default instance may not be allowed on some systems session = Session.getInstance(answer.getJavaMailProperties()  getAuthenticator()); } answer.setSession(session); }This is because getDefaultInstance creates a Session object the first time it is called. Then it caches that Session and returns it for all subsequent calls. It also ignores the new and different properties for the second route.See also http://camel.465427.n5.nabble.com/Mail-component-with-starttls-td3409505.html,2.6.0,2.7.0,0,1,366,1,4,2,0,0,0,0,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;,0,0
3779,Bug,Resolved,Fixed,camel-http,Major,ben,2011/03/11 02:36:19 +0100,2011/06/09 09:27:08 +0100,Willem Jiang,2011/06/09 09:48:56 +0100,90.30042824,0.015138889,HttpProducer drops authentification parameters.,Hi  I run into the following problem with Camel 2.6.0:An HTML file contain an URI lists of files to be downloaded from a web server to the local file system.The HTML file is parsed via a Java Bean Splitter. The Java Bean Splitter produces a Set of URI strings.These files should be downloaded from a web server to the local file system. The files are protected with BASIC authentification.The extraction and the splitting of the download URIs works quite well with the Java Bean Splitter.The Java Bean Splitter produces URI like: http4://download.acme.com/file_1.txt?username=foo&amp;password=baaHere's the setup:&lt;route&gt; &lt;from uri='file:///tmp/files_to_retrieve/' /&gt; &lt;method bean='prepareDownLoadUri' method='parseIndexHtml' /&gt; &lt;setHeader headerName='CamelHttpMethod'&gt; &lt;constant&gt;GET&lt;/constant&gt; &lt;/setHeader&gt; &lt;setHeader headerName='CamelHttpUri'&gt; &lt;simple&gt;${body}&lt;/simple&gt; &lt;/setHeader&gt; &lt;to uri='http4://download.acme.com/' /&gt; &lt;to uri='bean:saveFileProcessor' /&gt;&lt;/route&gt;&lt;bean id='prepareDownLoadUri' class='com.acme.PrepareDownLoadUri' /&gt;&lt;bean id='saveFileProcessor' class='com.acme.SaveFileProcessor' /&gt;The injection of the URIs from the Splitter into the HttpProducer  works quite well. I debugged into the HttpProducer and it seems  that the HttpProducer does not provide the unterlying http client (in this case Apache HttpClient 4) with the authentification settings from the URI.At first  the queryString is extracted from the Exchange-Header (if provided)HttpProducer.createMethod()  line 273String url = HttpHelper.createURL(exchange  getEndpoint());The url string contains the URI produces by the splitter including the authentification parameters: http4://download.acme.com/file_1.txt?username=foo&amp;password=baaThen the HttpProducer assembles a new URI for the requests. The new URI is assembled from parts of the string url (line 273) and other parameters from the Exchange Header: HttpProducer.createMethod()  lines 285-300 // is a query string provided in the endpoint URI or in a header (header overrules endpoint) String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY  String.class); if (queryString == null) { queryString = getEndpoint().getHttpUri().getRawQuery(); } StringBuilder builder = new StringBuilder(uri.getScheme()).append('://').append(uri.getHost()); if (uri.getPort() != -1) { builder.append(':').append(uri.getPort()); } if (uri.getPath() != null) { builder.append(uri.getRawPath()); } if (queryString != null) { builder.append('?'); builder.append(queryString); } HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString());The problem is  in the assembling of the new URI  the authentification parameters are dropped. One possible solution could be:  check for authentification parameters in the url (line 273) and extract them. build the credentials  AuthScheme and provide it to the underlying http client.thanks in advance ben,2.6.0,2.8.0,0,1,408,1,10,4,0,0,0,1,0,0,1,1,components/camel-http4/src/test/java/org/apache/camel/component/http4/HttpQueryTest.java;,0,0
3782,Improvement,Closed,Fixed,,Major,Jonathan Anstey,2011/03/11 20:51:17 +0100,2011/03/11 20:51:17 +0100,Jonathan Anstey,2011/03/11 21:07:44 +0100,0.011423611,0.011423611,option to force sending original JMS message,When using mapJmsMessage=false you would think that Camel would send along the original JMS message. However  if you touch the Camel Message headers (get or set) this effectively disables the mapJmsMessage option. I came across this issue when using the failover loadbalancer. We should add an option to force Camel to send along the orginal JMS message.,2.6.0,2.7.0,0,0,57,1,0,0,0,0,0,0,0,0,2,7,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsLoadBalanceFailoverWithForceSendOriginalJmsMessageTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsLoadBalanceFailoverWithForceSendOriginalJmsMessageTest.java;,0,0
3788,Bug,Closed,Fixed,camel-http,Major,Ashwin Karpe,2011/03/17 20:47:05 +0100,2011/03/21 11:13:45 +0100,Willem Jiang,2011/03/21 11:13:45 +0100,3.601851852,0,HTTP Producer seems to send an empty body request on redelivery when the original request fails due to a connection timeout,Camel HTTP Producer is throwing an exception when it encounters a connection timeout. However instead of preserving the original message it is treating it processing the exception output. When connected to a redelivery meachanism  this results in an exception message being sent as input to the HTTP Consumer. The older versions of Camel behaved differently on read timeout. In Camel 1.x  in a read timeout  the Exception is thrown and the input message to the producer is passed through the pipeline. Now there is a difference: An exception is thrown and the output of the HTTP Producer is passed through the pipeline. Need to study why and what changed since Camel 1.x and ensure that the above does not happen.For more details  please check out the following nabble entryhttp://camel.465427.n5.nabble.com/Http-route-returning-with-200-but-also-getting-read-timed-out-td3741631.html#a3897410Cheers Ashwin...,2.0-M2; 2.6.0,2.7.3; 2.8.0,0,0,132,1,1,1,0,1,0,0,0,1,2,2,components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;,0,0
3789,Bug,Closed,Fixed,camel-core,Major,Maria Iracheta,2011/03/18 15:09:55 +0100,2011/03/27 10:37:39 +0100,Claus Ibsen,2011/03/27 11:25:22 +0100,8.8440625,0.033136574,org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy is not thread-safe,MarkerFileExclusiveReadLockStrategy is not thread-safe. When I run a File endpoint with more than one thread the MarkerFileExclusiveReadLockStrategy only deletes the last file to start being processed. The MarkerFileExclusiveReadLockStrategy uses global variables: private File lock; private String lockFileName; and gives them values on the acquireExclusiveReadLock method. When another thread calls the releaseExclusiveReadLock method it uses the global variables to delete the locked file. That means that if another thread came and called the acquireExclusiveReadLock it would have changed the values on the global variables. If lock and lockFileName are not global variables the problem seems to disappear and I can a multithreaded File endpoint and not locked file is left undeleted.,2.6.0,2.7.3; 2.8.0,0,0,111,1,6,2,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java;camel-core/src/test/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategyTest.java;,0,0
3793,Improvement,Resolved,Fixed,camel-core,Major,Jean-Michel Morel,2011/03/21 14:16:57 +0100,2011/04/30 13:25:52 +0100,Claus Ibsen,2011/05/01 11:44:26 +0100,40.89408565,0.929560185,Try to copy file when rename fails,I have a setup where I use file component to move files after being processed ou when processing fails.As I have no troubles neither on my development workstation neither on local directory on my linux environnement. It fails when the monitored directory is a NFS mounted directory pointing to a Windows 2008 Server shared directory.While it's not a camel bug  the generated logs are just useless because we can't get the reason of failure.Investigating the source code tells me that the File.renameTo method is used (with the three times try hack for Windows   so I can't get any further information on the reason.Could you implement a fallback strategy like copy the file and delete the original one ? (should it be made optional)To workaround this  I currently do the move operations manually by invoking the FileUtils.moveTo(...) from commons-io (which implements exactly the fallback method I described on renameTo failure).But  I have side effects as I'm forced to use the noop attribute.(in fact  it doesn't explain why the rename fails  but it works  and should it be a failure I'll get an explicit error message).,2.6.0,2.8.0,0,0,192,1,5,3,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/util/FileUtil.java;,0,0
3794,Improvement,Resolved,Fixed,camel-aws,Major,Christian M?ller,2011/03/21 18:24:56 +0100,2011/03/21 18:24:56 +0100,Christian M?ller,2011/03/21 22:52:23 +0100,0.185729167,0.185729167,Polish the aws component,Polish the aws component,2.7.0,2.8.0,0,1,1,1,2,1,1,0,0,1,0,0,1,9,camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/test/java/org/apache/camel/impl/DefaultEndpointTest.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConstants.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/integration/SqsComponentIntegrationTest.java;,0,0
3797,Bug,Closed,Fixed,,Major,Dejan Bosanac,2011/03/22 13:42:19 +0100,2011/03/22 13:47:19 +0100,Jonathan Anstey,2011/03/22 13:56:29 +0100,0.009837963,0.006365741,Web Console: NPE when browsing routes with no description,When some of the routes does not have a description NPE will be thrown  because of the code${i.getDescription.getText}To prevent it  just use${i.getDescriptionText},2.7.0,2.7.3; 2.8.0,0,0,36,1,2,2,1,0,0,0,0,0,1,1,components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.index.ssp;,0,0
3799,Bug,Resolved,Fixed,tooling,Minor,Hadrian Zbarcea,2011/03/23 03:46:31 +0100,2011/04/20 19:11:02 +0100,Hadrian Zbarcea,2011/04/20 19:28:39 +0100,28.65425926,0.012233796,maven eclipse goal failure,The error is:[ERROR] BUILD ERROR[INFO] ------------------------------------------------------------------------[INFO] Request to merge when 'filtering' is not identical. Original=resource src/main/resources: output=target/classes  include=[]  exclude=[**/*.java]  test=false  filtering=false  merging with=resource src/main/resources: output=target/classes  include=[**/archetype-metadata.xml]  exclude=[**/*.java]  test=false  filtering=trueand it seems to be resolved in the upcoming maven-eclipse-plugin:2.9.0 (see MECLIPSE-576). An update to the new release of the plugin  once available  should resolve this.,2.7.0,2.8.0,0,0,68,1,10,4,1,0,0,0,0,0,0,0,,0,0
3804,Improvement,Resolved,Fixed,,Minor,Rob van de Meulengraaf,2011/03/24 11:46:38 +0100,2011/04/02 11:31:54 +0100,Claus Ibsen,2011/04/02 11:31:54 +0100,8.989768519,0,The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authentication,The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authenticationA simple solution is to add setters for SecurityPolicy and Extension to the component. If these attributes are set then also set them on the underlying AbstractBayeux class.About the patch:The existing unit test is based on an interactive scenario that involves human intervention. A similar test is made that uses an extension and another one is made that needs authentication. To provide feedback on a failed authentication a cometd listener is used. The version of the cometd-dojo extension used does not support listeners so this dojo extension has also been upgraded to 1.1.4.,2.5.0,2.8.0,0,0,110,1,2,2,1,0,0,1,0,0,1,28,components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConverters.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdEndpoint.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducerConsumer.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveAuthenticatedMain.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveExtensionMain.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerInteractiveMain.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslCometdProducerConsumerTest.java;components/camel-cometd/src/test/resources/webapp/authenticated.html;components/camel-cometd/src/test/resources/webapp/dojo/dojo/dojo.js;components/camel-cometd/src/test/resources/webapp/dojo/dojo/dojo.js.uncompressed.js;components/camel-cometd/src/test/resources/webapp/dojo/dojo/dojo.xd.js;components/camel-cometd/src/test/resources/webapp/dojo/dojo/dojo.xd.js.uncompressed.js;components/camel-cometd/src/test/resources/webapp/dojo/dojo/io/iframe.js;components/camel-cometd/src/test/resources/webapp/dojo/dojo/io/script.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd.js.uncompressed.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd.xd.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd.xd.js.uncompressed.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd/ack.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd/reload.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd/timestamp.js;components/camel-cometd/src/test/resources/webapp/dojo/dojox/cometd/timesync.js;components/camel-cometd/src/test/resources/webapp/dojo/org/cometd.js;components/camel-cometd/src/test/resources/webapp/index.html;,0,0
3812,Bug,Closed,Fixed,camel-core,Major,Maximilien Wiktorowski,2011/03/28 08:26:51 +0100,2011/03/28 08:50:57 +0100,Claus Ibsen,2011/03/28 10:38:22 +0100,0.091331019,0.074594907,BeanInfo not reset when new bean looked up,In camel-bean  when a bean is looked-up and it is not the same bean as the previous one beanInfo has to be reset.This is done in getBean() method of org.apache.camel.component.bean.RegistryBean but the test is placed after setting bean=value so beanInfo is never reset :if (value != bean) {  bean = value;  processor = null;  if (!ObjectHelper.equal(ObjectHelper.type(bean)  ObjectHelper.type(value))) { beanInfo = null; },2.7.0,2.7.3; 2.8.0,0,1,65,1,2,1,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/bean/RegistryBean.java;,0,0
3824,Improvement,Resolved,Fixed,,Minor,Joshua Watkins,2011/03/31 13:15:38 +0100,2011/10/01 16:47:44 +0100,Claus Ibsen,2011/10/01 16:53:19 +0100,184.151169,0.003877315,Allow cometd component to send message headers with the message,Currently the cometd component ignores message headers. ======Code snippet from CometdConsumer.java: Message message = new DefaultMessage(); message.setBody(data); Exchange exchange = endpoint.createExchange(); exchange.setIn(message);======Exchange message headers should be maintained (perhaps with a flag?).,2.6.0,2.9.0,0,1,31,1,11,2,1,0,0,0,0,0,1,5,components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdBinding.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java;,0,0
3828,Bug,Resolved,Fixed,camel-jms,Major,Guillaume Nodet,2011/04/01 19:40:34 +0100,2011/04/08 12:31:01 +0100,Claus Ibsen,2011/04/08 15:01:18 +0100,6.806064815,0.104363426,camel-jms default cache level should be CACHE_NONE when transaction is enabled,I lost a huge amount of time chasing the problem as the default value just screw the whole transaction (the session is created outside the transaction and cached  so usually not enlisted in the tx).,2.6.0; 2.7.0,2.8.0,0,1,35,1,1,1,1,1,0,0,0,0,1,30,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/JmsSpringSimpleTXResequencerTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/issues/TransactionErrorHandlerRedeliveryDelayTest-context.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/spring.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/AbstractTransactionTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/ActiveMQWithoutTransactionManager.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionErrorHandlerTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionThrottlingRoutePolicyTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionalClientTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionalClientWithRollbackTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMXTXUseOriginalBodyTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMXTXUseOriginalBodyWithDLCErrorHandlerTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMXTXUseOriginalBodyWithTXErrorHandlerTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JmsToJmsTransactedSecurityTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JmsToJmsTransactedTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JmsTransacted-context.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/RouteIdTransactedTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactedAsyncUsingThreadsTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionErrorHandlerBuilderAsSpringBeanTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionErrorHandlerCustomerSpringParserTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionInterceptSendToEndpointTest.xml;components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionMinimalConfigurationTest.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/hawtdb/JmsToHawtDBAggregateTest.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/jms/FileToJmsTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/jms/JmsPollingConsumerTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/tx/JmsToHttpTXTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/tx/JmsToHttpTXWithOnExceptionAndNoTransactionErrorHandlerConfiguredTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/tx/JmsToHttpTXWithOnExceptionTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/tx/JmsToHttpTXWithRollbackTest-context.xml;,0,0
3834,Bug,Closed,Fixed,camel-smpp,Major,Steve Gansemer,2011/04/04 21:37:57 +0100,2011/04/05 22:02:22 +0100,Christian M?ller,2011/05/30 23:04:02 +0100,56.05978009,55.04282407,SmppProducer sends incorrect data_coding parameter,The dataCoding parameter on the SMPP uri allows for a value of 0 4  or 8. Our aggregator expects the data_coding parameter on the SMPP request from the SmppProducer to be 0=SMSC Default Alphabet. However  when 0  4  or 8 is specified for the dataCoding parameter  the actual value sent on the smpp request is 1  5  or 9. It appears the MessageClass.Class1 on the GeneralDataCoding object in SmppProducer is masking an additional 1 to the byte value.It seems the dataCoding parameter should allow you to specify the actual value that is needed as defined by the SMPP Protocol specification.,2.7.0,2.7.2; 2.8.0,0,0,99,2,3,2,1,0,0,0,0,0,1,2,components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java;components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppProducerTest.java;,0,0
3849,Bug,Closed,Fixed,camel-cache,Major,Piotr Klimczak,2011/04/08 15:13:09 +0100,2011/04/11 08:36:17 +0100,Claus Ibsen,2011/04/11 09:19:10 +0100,2.754178241,0.029780093,OSGi - No possibility to enable ehcache clustering as: ehcache.xml is ignored and there is no possibility to set cacheManagerFactory described camel-cache docs,This bug is caused by more than one problem as:1. camel-cache bundle provides ehcache.xml config which is ignored so then default ehcache-failsafe.xml is taken by ehcache bundle.2. according to camel-cache docs there is a way to set cacheManagerFactory but it seems to be not implemented asa) default CacheManagerFactory instance is created when when CacheComponent is instantiated.b) setter method: public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) is used just nowhere.c) there is no suitable filed in class CacheConfigurationAll above problems cause camel-cache to be not able to work in java- clustered world as default failsafe config. is really failsafe- w/o clustering.,2.6.0; 2.7.0,2.7.3; 2.8.0,0,0,97,1,17,4,1,1,0,0,0,0,2,9,tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/cache/CacheTest.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheComponent.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheManagerFactory.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/DefaultCacheManagerFactory.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedMessageBodyReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedTokenReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedXPathReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheValidate.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheManagerFactoryRefTest.java;,0,0
3852,Improvement,Resolved,Fixed,camel-cache,Minor,Claus Ibsen,2011/04/11 09:22:16 +0100,2011/04/21 19:28:19 +0100,Ben O'Day,2011/04/21 19:28:35 +0100,10.42105324,0.000185,camel-cache - Should use Camel style constant keys,The CacheConstant use all upper cases and they are not using the Camel style which we should use.It should be'CamelCacheAdd' instead of 'ADD'and so forth.This also ensures those headers is not propagated over remote transports as they should not.In fact we should consider removing those headers in the camel-cache code as they are just input parameters to control the operation.,2.7.0,2.8.0,0,1,60,1,9,2,1,0,0,0,0,0,1,11,components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheConstants.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheEndpoint.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedMessageBodyReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedTokenReplacer.java;components/camel-cache/src/main/java/org/apache/camel/processor/cache/CacheBasedXPathReplacer.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheProducerTest.java;components/camel-cache/src/test/java/org/apache/camel/processor/cache/CacheBasedBodyReplacerTest.java;components/camel-cache/src/test/java/org/apache/camel/processor/cache/CacheBasedTokenReplacerTest.java;components/camel-cache/src/test/java/org/apache/camel/processor/cache/CacheBasedXPathElementReplacerTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/cache/CacheTest.java;,0,0
3861,Bug,Closed,Fixed,camel-web,Minor,Claus Ibsen,2011/04/14 09:54:27 +0100,2011/04/14 09:54:27 +0100,Claus Ibsen,2011/04/14 10:38:36 +0100,0.030659722,0.030659722,camel-web - Cannot browse endpoints if messages was consumed from jms queue,You get a NPE if you brows the endpoint.Caused by: java.lang.NullPointerException at org.apache.camel.web.resources.$scalate$ExchangeResource_index_ssp$$anonfun$$scalate$render$2.apply(ExchangeResource.index.ssp.scala:46) at org.apache.camel.web.resources.$scalate$ExchangeResource_index_ssp$$anonfun$$scalate$render$2.apply(ExchangeResource.index.ssp.scala:40) at scala.collection.Iterator$class.foreach(Iterator.scala:631),2.7.0,2.7.2; 2.8.0,0,0,17,1,0,0,1,0,0,1,0,0,1,1,components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ExchangeResource.index.ssp;,0,0
3873,Bug,Closed,Fixed,camel-xmpp,Minor,Claus Ibsen,2011/04/16 13:45:18 +0100,2011/04/16 13:45:18 +0100,Claus Ibsen,2011/04/16 13:47:07 +0100,0.001261574,0.001261574,camel-xmpp - Should stop and clean session  so hot-deploy works,See this stacktrace14:10:55 806 | ERROR | ExtenderThread-8 | ContextLoaderListener | 72 - org.springframework.osgi.extender - 1.2.0 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=qbus-camel-osgi  config=osgibundle:/META-INF/spring/*.xml))org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://articleRoute@localhost?password=******&amp;room=mechatron%40conference.mw-pc]. Reason: java.lang.NullPointerException at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:362)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:93)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ProducerCache.startProducer(ProducerCache.java:124)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:429)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:847)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:86)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:893)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.RouteService.startChildService(RouteService.java:250)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.RouteService.warmUp(RouteService.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1800)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1726)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1528)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1420)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1321)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1299)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[61:org.springframework.context:3.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[61:org.springframework.context:3.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[61:org.springframework.context:3.0.5.RELEASE] at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[71:org.springframework.osgi.core:1.2.0] at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)[72:org.springframework.osgi.extender:1.2.0] at java.lang.Thread.run(Thread.java:619)[:1.6.0_14]Caused by: java.lang.NullPointerException at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:957)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:904)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1415)[247:org.apache.servicemix.bundles.smack:3.1.0.2] at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09] at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:76)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:360)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09] ... 65 more,2.6.0,2.7.3; 2.8.0,0,0,199,1,0,0,0,0,0,1,0,0,1,4,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppComponent.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;,0,0
3891,Improvement,Resolved,Fixed,,Minor,Willem Jiang,2011/04/22 04:29:41 +0100,2011/04/22 04:29:41 +0100,Willem Jiang,2011/04/22 04:54:26 +0100,0.0171875,0.0171875,Avoiding to process the bean which value is null in CamelBeanPostProcessor,When user use the FactoryBean to return a null object within Spring 2.x  the CamelBeanPostProcessor will throw a NPE exception.Although this issue can't be reproduced within Spring 3.x  we should consider to put the NP check in the CamelBeanPostProcessor as an enhancement.,2.8.0,2.8.0,0,0,42,1,1,1,1,0,0,0,0,0,1,1,components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java;,0,0
3905,Improvement,Resolved,Fixed,camel-cache,Trivial,Piotr Klimczak,2011/04/27 08:44:25 +0100,2011/04/27 22:27:27 +0100,Claus Ibsen,2011/04/27 22:27:39 +0100,0.571689815,0.000139,camel-cache exception message: CamelCacheOperation not specified in the message header [CamelCacheKey],Caused by: net.sf.ehcache.CacheException: CamelCacheOperation not specified in the message header &#91;CamelCacheKey&#93;Sound like a mistake? Or maybe my English is so bad? as this message doesn't make sense for me...Simply it should be:Caused by: net.sf.ehcache.CacheException: CamelCacheOperation header not specified in message,2.8.0,2.8.0,0,0,41,1,2,2,1,0,0,0,0,0,1,1,components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;,0,0
3908,Improvement,Resolved,Fixed,camel-mail,Major,Donald Whytock,2011/04/27 16:30:01 +0100,2011/04/27 22:00:14 +0100,Claus Ibsen,2011/04/27 22:08:02 +0100,0.234733796,0.005416667,Prevent 'FolderNotOpen' exception when closing out an email exchange,When an email exchange is complete it should set either the SEEN or DELETED flags in the folder on the email server. But if the folder isn't open  either because of automatic closing or timeout  attempting to set the flag results in a FolderNotOpen exception. The attached version of MailConsumer includes a check in processCommit() that opens the folder if it's not open at exchange completion.,2.7.1,2.8.0,0,0,66,1,1,1,1,0,0,0,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;,0,0
3912,Bug,Closed,Fixed,camel-core,Major,Roberto Rojas,2011/04/29 04:39:38 +0100,2011/04/29 17:01:37 +0100,Claus Ibsen,2011/04/29 19:44:02 +0100,0.628055556,0.112789352,Consumer URI parameters ignored after Route Restart,The URI parameters for a consumer appear to be ignored or disappear when the route where this consumer defined gets restarted.One example could be JPA query passed in the URI and is used to filter the results from the consumer.The attached test case shows this.Look at the Readme.txt  camel-context.xml  and JPARouteRestartTest class for more information.Also  took a stab at fixing the problem and provided a patch with a possible solution. I ran the unit tests after that change and all passed.,2.7.1,2.7.3; 2.8.0,0,0,89,1,4,2,1,0,0,0,0,1,1,3,camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollEndpoint.java;camel-core/src/test/java/org/apache/camel/impl/ScheduledPollEndpointConfigureConsumerRestartTest.java;,0,0
3917,Bug,Closed,Fixed,camel-cxf,Major,Akitoshi Yoshida,2011/04/29 16:45:56 +0100,2011/04/29 19:32:47 +0100,Claus Ibsen,2011/04/29 19:56:21 +0100,0.132233796,0.016365741,CxfPayloadConverter may start failing to convert a CxfPayload to a Node,There is an issue with CxfPayloadConverter that can lead to a failure in converting the CxfPayload into something which is actually convertible. This problem happens when you try to convert a CxfPayload instance that has an empty body list into a Node instance. This returns null and subsequently registers this type mapping key (CxfPayload-&gt;Node) in org.apache.camel.impl.converter.BaseTypeConverterRegistry's conversion-misses table. Because of this  a subsequent conversion using a CxfPayload instance with an non empty body list will permanently fail.I am attaching a modified CxfPayloadConversionTest that includes testCxfPayloadToNode that illustrates this problem. Currently  the last assertion of this test is failing when this issue is present.I think we can fix this problem by returning Void.TYPE instead of a null for this case.In this way  the conversion is regarded as a success and there will be no entry in the conversion-misses table.So  I am also attaching the modiefied CxfPayloadConverter class that can handle this test case.,2.7.1,2.7.3; 2.8.0,0,0,152,1,3,2,1,0,0,0,0,0,1,2,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/converter/CxfPayloadConverterTest.java;,0,0
3936,Bug,Closed,Fixed,camel-sql,Major,Baptiste Gaillard,2011/05/03 18:38:42 +0100,2011/05/03 20:55:56 +0100,Christian M?ller,2011/05/03 21:19:56 +0100,0.111967593,0.016666667,JdbcAggregationRepository count (*) is not working with MySQL 5.0,The JdbcAggregationRepository makes a  'SELECT COUNT (*) FROM....' SQL request at line 131 in the source code. This appears to be incorrect with MySQL because theire is a space between COUNT and (. By replacing the request with  'SELECT COUNT(*) FROM....' (without the white space) the bug is corrected for MySQL (I think it should be tested with other database without the space). This request can be tested with Mysql Query Browser (the returned error is the same as the one encountered when we execute the JdbcAggregationRepository with Camel). The exception returned is the following:  ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID:COE-WRKST2-1749-1304443569312-2:2:1:88:1. Exhausted after delivery attempt: 1 caught: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1 at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:233) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:728) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:744) at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:775) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:131) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:114) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:114) at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:251) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:189) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.lang.Thread.run(Thread.java:662)Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1 at sun.reflect.GeneratedConstructorAccessor83.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at com.mysql.jdbc.Util.handleNewInstance(Util.java:409) at com.mysql.jdbc.Util.getInstance(Util.java:384) at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1054) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3566) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3498) at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1959) at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2113) at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568) at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2113) at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2275) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96) at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:643) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586) ... 42 more,2.7.1,2.8.0,0,0,400,2,5,3,0,0,0,0,0,0,1,1,components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregationRepository.java;,0,0
3942,Bug,Closed,Fixed,camel-core,Minor,Jean-Christophe Delmas,2011/05/05 17:10:38 +0100,2011/05/09 12:05:12 +0100,Claus Ibsen,2011/05/09 13:14:34 +0100,3.836064815,0.048171296,AnnotationTypeConverterLoader fails for folders containing spaces,This problem appears when jar dependencies with type converters have path containing space characters.In my case  the camel-mail-2.7.1.jar jar is located in my local maven repository.I get this error during my project startup: [...]Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/D:/Documents and Settings/501915291/.m2/repository/org/apache/camel/camel-mail/2.7.1/camel-mail-2.7.1.jar!/META-INF/services/org/apache/camel/TypeConverter at java.net.URI$Parser.fail(URI.java:2809) at java.net.URI$Parser.checkChars(URI.java:2982) at java.net.URI$Parser.parse(URI.java:3019) at java.net.URI.&lt;init&gt;(URI.java:578) at java.net.URL.toURI(URL.java:918) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:118) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:108) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:69) ... 63 moreFIX:findPackages method in AnnotationTypeConverterLoader shouldn't use URIs to store already visited jars.,2.7.1,2.7.3; 2.8.0,0,0,83,1,3,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/CoreTypeConverterLoader.java;,0,0
3949,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/05/06 09:14:07 +0100,2011/05/06 09:14:07 +0100,Claus Ibsen,2011/05/06 11:46:53 +0100,0.106087963,0.106087963,Sending a message to log endpoint should not convert payload to StreamCache,We should not automatic try to convert the payload to a StreamCache if you send a message to a log endpoint. StreamCache newBody = message.getBody(StreamCache.class); if (newBody != null) { message.setBody(newBody); }Only if people have explicit enabled stream cache we can safely log it.Otherwise we should not output streams in the log.We should use the extractBodyForLogging from MessageHelper instead which cater for this.,2.7.0,2.8.0,0,0,72,1,1,1,0,0,0,1,0,0,1,6,camel-core/src/main/java/org/apache/camel/component/log/LogFormatter.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java;camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java;camel-core/src/main/java/org/apache/camel/util/MessageHelper.java;camel-core/src/test/java/org/apache/camel/component/log/LogInputStreamTest.java;camel-core/src/test/java/org/apache/camel/impl/LogDebugBodyStreamsTest.java;,0,0
3950,Bug,Closed,Fixed,camel-web,Minor,Jimmy Rueedi,2011/05/06 15:46:37 +0100,2011/05/08 08:11:26 +0100,Claus Ibsen,2011/05/08 10:49:27 +0100,1.793634259,0.109733796,Route cannot be started within web-console  if autoStartup='false' is set in camel.xml,When a route has autoStartup='false' set in the camel.xml  it cannot be started anymore in the web- console.In the logfile  an entry is generated  similar to this:'Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp7446303-52'If a route does not have autoStartup='false'  it can be stopped and started normally (as before with ActiveMQ 5.4.2 / Camel 2.4.0)Reproduce steps: Configure a route with '&lt;route autoStartup='false'&gt;' Start the ActiveMQ Service Navigate to 'http://server.domain.tld:8161/camel/routes try to start the route with the button 'Start' check the logfile 'activemq.log',2.7.1,2.7.3; 2.8.0,0,0,89,1,2,2,0,0,0,0,0,1,1,2,components/camel-web/src/main/java/org/apache/camel/web/resources/RouteStatusResource.java;components/camel-web/src/main/webapp/WEB-INF/applicationContext.xml;,0,0
3964,Improvement,Resolved,Fixed,camel-script,Minor,Teiva Harsanyi,2011/05/12 00:00:24 +0100,2011/05/29 09:38:42 +0100,Claus Ibsen,2011/05/29 10:11:19 +0100,17.42424769,0.022650463,Script arguments,As I said here : http://fusesource.com/forums/thread.jspa?threadID=2946&amp;tstart=0  the ScriptEngine class (http://download.oracle.com/javase/6/docs/api/javax/script/ScriptEngine.html) provides a put method which enable to add a Java object into the created script  thanks to the JSR-223. But Camel does not provide a 'bridge' to this method.So I propose to pass the arguments via the header map of the message.Indeed  on client side  I created a Map&lt;String  Object&gt; which contains the future scripts arguments. Then I put this map into the header.Next on the camel-script component  I check a particular key (a public static final attribute that I added) and if the value returned is a Map  I try to add the Map's objects with the engine.put(String  Object) method.,2.7.1,2.8.0,0,0,117,1,3,2,0,0,0,0,0,0,1,2,components/camel-script/src/main/java/org/apache/camel/builder/script/ScriptBuilder.java;components/camel-script/src/test/java/org/apache/camel/builder/script/JavaScriptExpressionTest.java;,0,0
3968,Improvement,Resolved,Fixed,camel-soap,Major,Claus Ibsen,2011/05/12 18:02:42 +0100,2011/07/27 11:16:17 +0100,Willem Jiang,2011/07/29 12:27:30 +0100,77.76722222,2.049456019,camel-soap - Add support for multiple parameters,camel-soap is limited to only work with one parameter.There is some code that throws an exception stating multiple parameters is not supported.We should add support for that.See nabblehttp://camel.465427.n5.nabble.com/Multiple-parameters-in-CXF-service-method-tp4386208p4386208.html,2.6.0,2.8.1; 2.9.0,2,3,31,1,5,3,0,0,0,0,0,0,1,10,components/camel-soap/pom.xml;components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/SoapJaxbDataFormat.java;components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/MethodInfo.java;components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java;components/camel-soap/src/test/java/org/apache/camel/converter/soap/name/ServiceInterfaceStrategyTest.java;components/camel-soap/src/test/java/org/apache/camel/dataformat/soap/MultiPartClientMarshalTest.java;components/camel-soap/src/test/java/org/apache/camel/dataformat/soap/MultiPartCustomerServiceImpl.java;components/camel-soap/src/test/java/org/apache/camel/dataformat/soap/MultiPartCxfServerTest.java;components/camel-soap/src/test/resources/org/apache/camel/dataformat/soap/MultiPartCustomerService.wsdl;components/camel-soap/src/test/resources/org/apache/camel/dataformat/soap/MultiPartCxfServerTest-context.xml;,0,0
3971,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2011/05/13 11:18:11 +0100,2011/05/13 11:18:11 +0100,Claus Ibsen,2011/05/18 10:41:30 +0100,4.974525463,4.974525463,Dumping route to XML created by Java DSL using an expression may not output the actual used expression,See this unit testManagedCamelContextDumpRoutesAsXmlTestThe route in Java DSL from('seda:bar').routeId('myOtherRoute') .filter().header('bar') .to('mock:bar') .end();And the output in XML &lt;route group='org.apache.camel.management.ManagedCamelContextDumpRoutesAsXmlTest$1' id='myOtherRoute'&gt; &lt;from uri='seda:bar'/&gt; &lt;filter id='filter1'&gt; &lt;expressionDefinition/&gt; &lt;to uri='mock:bar' id='to2'/&gt; &lt;/filter&gt; &lt;/route&gt;The same example created by Spring XML  outputs the XML correct,2.7.0,2.8.0,0,0,70,1,0,0,0,0,0,0,0,0,2,20,camel-core/src/main/java/org/apache/camel/builder/ExpressionClauseSupport.java;camel-core/src/main/java/org/apache/camel/component/mock/AssertionClause.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/model/CatchDefinition.java;camel-core/src/main/java/org/apache/camel/model/ChoiceDefinition.java;camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java;camel-core/src/main/java/org/apache/camel/model/IdempotentConsumerDefinition.java;camel-core/src/main/java/org/apache/camel/model/OnCompletionDefinition.java;camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/ResequenceDefinition.java;camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java;camel-core/src/main/java/org/apache/camel/model/TryDefinition.java;camel-core/src/main/java/org/apache/camel/model/WhenDefinition.java;camel-core/src/main/java/org/apache/camel/model/language/ExpressionDefinition.java;camel-core/src/test/java/org/apache/camel/management/ManagedCamelContextDumpRoutesAsXmlTest.java;camel-core/src/test/java/org/apache/camel/util/DumpModelAsXmlAggregateRouteTest.java;camel-core/src/test/java/org/apache/camel/util/DumpModelAsXmlChoiceFilterRouteTest.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;,0,0
3973,Improvement,Resolved,Fixed,camel-core; jmx,Major,Claus Ibsen,2011/05/13 11:39:32 +0100,2011/05/13 11:39:32 +0100,Claus Ibsen,2011/05/13 11:54:54 +0100,0.010671296,0.010671296,Add send body operations to managed CamelContext so you can pass in headers as well,Currently we only support sendBody / requestBody on ManagedCamelContext. We should add operations that includes a map of headers. Then we supports sending a message that has headers as well.Also the existing operations should accept a java.lang.Object as body instead of a fixed String.,2.7.0,2.8.0,0,0,44,1,0,0,0,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java;camel-core/src/test/java/org/apache/camel/management/ManagedCamelContextAutoStartupTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCamelContextSuspendResumeTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCamelContextSuspendStartTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCamelContextTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAutoStartupTest.java;,0,0
3974,Bug,Closed,Fixed,camel-spring-ws,Major,Richard Kettelerij,2011/05/13 22:53:06 +0100,2011/05/13 22:53:06 +0100,Richard Kettelerij,2011/05/29 23:19:00 +0100,16.01798611,16.01798611,Spring-WS producer doesn't propagate headers,The Spring-WS producer only sets the body of the exchange  headers aren't propagated.See Nabble: http://camel.465427.n5.nabble.com/spring-ws-component-not-propagating-in-headers-to-out-message-td4393731.html,2.7.1,2.7.3; 2.8.0,0,1,18,1,4,3,0,0,0,0,0,0,1,3,components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ProducerLocalRouteTest.java;components/camel-spring-ws/src/test/resources/org/apache/camel/component/spring/ws/ProducerLocalRouteTest-context.xml;,0,0
3982,Improvement,Resolved,Fixed,camel-hazelcast,Major,Claus Straube,2011/05/17 14:39:21 +0100,2011/05/19 08:02:35 +0100,Claus Ibsen,2011/05/19 08:02:35 +0100,1.724467593,0,Updated Hazelcast to version 1.9.3,Updated Hazelcast to version 1.9.3. This offers some major bugfixes in Hazelcast and new functionality in the camel camponent (e.g. list inserting by index).,2.8.0,2.8.0,0,0,25,1,1,1,0,0,0,0,0,0,1,3,components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastListProducerTest.java;parent/pom.xml;platforms/karaf/features/src/main/resources/features.xml;,0,0
3994,Improvement,Resolved,Fixed,camel-core,Major,Alfred Hiebl,2011/05/19 07:43:08 +0100,2011/06/06 12:07:11 +0100,Claus Ibsen,2011/06/06 18:22:57 +0100,18.44431713,0.260949074,Java DSL - New means to explicitly end try/catch blocks,We are facing a problem with split() in combination with doTry/doCatch().Could you add a method 'endDoTry()' to the ProcessorDefinition? My use case is this: @Override public void configure() throws Exception { from('timer://myTimer?period=10000) .log('begin') .setBody(constant('x y z')) .doTry() .log('processing') .split(body()) .log('split') .end() .endDoTry() // would need some way like this to get back to the TryDefinition .doCatch(Exception.class) .log('Exception') .end(); }I tested this by adding endDoTry() to the ProcessorDefinition  and it works just fine. public TryDefinition endDoTry() { return (TryDefinition) this; }An endDoCatch in the TryDefinition would be great too. Is it possible that these endXXX() methods get added to 2.6.0  not just 2.7.0 or trunk?See also: http://camel.465427.n5.nabble.com/Route-with-choice-and-split-td4375184.html,2.6.0,2.8.0,0,1,135,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/test/java/org/apache/camel/processor/DoTryCatchWithSplitterTest.java;,0,0
4010,Bug,Resolved,Fixed,camel-ftp,Major,Laurentiu Trica,2011/05/24 16:16:50 +0100,2011/11/06 09:29:52 +0100,Claus Ibsen,2011/11/06 12:57:39 +0100,165.8616782,0.144293981,Camel FTP component fails to process multiple files at once from a specified folder,Camel FTP component fails to process multiple files at once from a specified folder (let's assume the folder is /in).When the consumer connects to a ftp account and finds a list of  let's say  3 files  it will try to retrieve them in parallel but this is not handled properly.As you can see from the below FTP server log  this is what Camel FTP does: it changes the current directory to /in retrieves the file it changes the current directory to / the second (probably) thread changes the directory to /in retreives the second file the first (probably) thread sends a delete command but it sends it as if it were in the root folder but it is actually in the /in folder the FTP gives an error that the file doesn't exist somehow the FTP Component blocks itself on the first file...See my comments in the following log starting with *****(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 257 '/' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 250 CWD successful. '/in' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PASV(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 227 Entering Passive Mode (192 168 0 25 228 206)(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; RETR WS_1001_1.xml(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 150 Connection accepted(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; SSL connection for data connection established(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 226 Transfer OK(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD /(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 250 CWD successful. '/' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PWD(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 257 '/' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 250 CWD successful. '/in' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PASV(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 227 Entering Passive Mode (192 168 0 25 228 207)(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; RETR WS_1001_2.xml(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 150 Connection accepted(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; DELE in/WS_1001_1.xml ***** The location is already /in  should be DELE WS_1001_1.xml(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 550 File not found(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PASV(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 227 Entering Passive Mode (192 168 0 25 228 208)(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; NLST in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 550 Directory not found(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; PWD(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 257 '/in' is current directory.(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; CWD in ***** Current directory is already /in(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)&gt; 550 CWD failed. '/in/in': directory not found.For the whole FTP server logs go here: http://pastie.org/private/kknnkxpbyzqmai7gsm8z5gFor the Servicemix/Camel(Trace) log: http://pastie.org/private/eulookxiepan3nkjyu41aA workaround that seems to work is to use the maxMessagesPerPoll=1 option.,2.6.0,2.8.3; 2.9.0,0,0,446,1,3,2,0,0,0,0,0,0,1,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpAsyncProcessTest.java;,0,0
4014,Improvement,Resolved,Fixed,camel-cxf,Major,Sergey Zhemzhitsky,2011/05/26 08:36:11 +0100,2012/06/15 15:13:47 +0100,Willem Jiang,2012/07/13 14:12:53 +0100,414.2338194,27.95770833,cxf:rsServer requires class instead of interface in the serviceClass attribute,Here are part of the conversation from the mailing list:1.Hi there I'm using apache-servicemix-4.3.1-fuse-01-09 and I need to consume RESTful requests.Here is the documentation I have used: http://camel.apache.org/cxfrs.htmlHere is my configuration file&lt;beans xmlns='http://www.springframework.org/schema/beans' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:jaxrs='http://cxf.apache.org/jaxrs' xmlns:cxf='http://camel.apache.org/schema/cxf' xsi:schemaLocation=' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd '&gt; &lt;import resource='classpath:META-INF/cxf/cxf.xml' /&gt; &lt;import resource='classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml' /&gt; &lt;import resource='classpath:META-INF/cxf/cxf-extension-http.xml' /&gt; &lt;import resource='classpath:META-INF/cxf/osgi/cxf-extension-osgi.xml' /&gt; &lt;cxf:rsServer id='myServer' address='/' serviceClass='org.test.MyService' /&gt; &lt;camelContext id='camel' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;route&gt; &lt;from uri='cxfrs://bean:myServer?exchangePattern=InOut'/&gt; &lt;transform&gt; &lt;constant&gt;Hello World!!!&lt;/constant&gt; &lt;/transform&gt; &lt;/route&gt; &lt;/camelContext&gt;&lt;/beans&gt;Here is implementation of org.test.MyService@Path('/service')@Produces('application/json')public class MyService { @POST @Path('/resource') public Response add(@QueryParam('res') String res) { return Response.ok(new Status('The Resource has been processed')).build(); }}I'm wondering why we have to specify the serviceClass attribute and why this attribute should point at the real class. I'm asking because the response of such a service will always be 'Hello World!!!' and implementation of MyService.add method does not matter in that case.2.Hi Ben You are right  the serviceClass is just used to build up the JAXRS service module. And Camel CXF RS Consumer doesn't all serviceClass instance at the end  it just route the request to the camel route.3. Hi Willem  BenThanks for the information.I tried to use the interface instead of class in the serviceClass attribute and I didn't succeed because of an exception that told that the class is required.Here is the exception:Caused by: java.lang.RuntimeException: Resource class interface org.test.MyService has no valid constructor at org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider.&lt;init&gt;(PerRequestResourceProvider.java:45) at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.updateClassResourceProviders(JAXRSServerFactoryBean.java:338) at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:119) ... 26 moreI think that using an interface would be better in that case.,2.6.0; 2.7.0; 2.7.1,2.9.3; 2.10.1; 2.11.0,0,4,270,1,11,4,0,1,0,0,0,0,2,5,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CamelResourceProvider.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/SubResourceClassInvocationHandler.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceResource.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/SubResourceClassInvocationHandler.java;,0,0
4019,Improvement,Resolved,Fixed,camel-freemarker,Minor,Fernando Ribeiro,2011/05/27 02:23:35 +0100,2011/05/28 14:35:11 +0100,Claus Ibsen,2011/05/28 14:35:11 +0100,1.508055556,0,Replace the NoCacheStorage Class,The NoCacheStorage class can safely be replaced by FreeMarker's NullCacheStorage class (created per my suggestion based on our needs in Camel) introduced in 2.3.16.,2.7.1,2.8.0,0,0,24,1,1,1,0,0,0,0,0,0,1,2,components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/FreemarkerComponent.java;components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/NoCacheStorage.java;,0,0
4021,Bug,Closed,Fixed,camel-core,Minor,Arkadi Shishlov,2011/05/27 11:26:05 +0100,2011/05/27 14:42:07 +0100,Claus Ibsen,2011/05/27 15:05:58 +0100,0.152696759,0.0165625,ConcurrentModificationException at DefaultCamelContext.getRouteDefinition(),Similar to CAMEL-3493 there is also a race in getRouteDefinition()java.util.ConcurrentModificationException at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)[:1.6.0_21] at java.util.AbstractList$Itr.next(AbstractList.java:343)[:1.6.0_21] at org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1098)[cih-core-1.0.jar:1.0] at com.tieto.cih.core.main.GatewayRouteSetup.startGatewayRoutes(GatewayRouteSetup.java:86)[cih-core-1.0.jar:1.0] at com.tieto.cih.core.main.GatewayRouteSetup.process(GatewayRouteSetup.java:73)[cih-core-1.0.jar:1.0]As route count could be quite large  it would be nice to have them stored in synchronized map or something like that instead of list.,2.7.1,2.7.3; 2.8.0,0,0,56,1,0,0,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;,0,0
4022,Bug,Resolved,Fixed,,Critical,Hadrian Zbarcea,2011/05/27 14:27:40 +0100,2011/06/09 16:53:53 +0100,Claus Ibsen,2011/06/10 09:42:27 +0100,13.80193287,0.700393519,Issue using errorBuilderRef with the xml dsl,While fixing issues around the errorHandler I noticed that &lt;onException&gt; definitions defined in the camel context are ignored if a route specifies its own errorHandlerRef. The reason is that we set the onException definition on the default error handler. I have a fix for that  but I discovered a different issue (I think) for which I would like to discuss the solution.When we have an onException definition that looks kinda like this:&lt;onException&gt; &lt;exception&gt; java.lang.IllegalArgumentException&lt;/exception&gt; &lt;to uri='mock:illegalArgumentException'/&gt;&lt;/onException&gt;... something happens  the IAE exception is caught  we do something  but in that process another exception is thrown. Currently  that would be caught by the default error handler  which may not be what we want.What error handler (if any) should handle exceptions thrown while in onException?The onException mechanism is somewhat similar to a try/catch. I don't think the exceptions thrown while handling onException should be handled by the same error handler configured for the route  or even the context scoped one. The processing should be very simple  predictable and immutable. Since the default 'CamelDefaultErrorHandlerBuilder' can be replaced  it is not imho a solution and we need one global one that does as little as possible (the problem would be agreeing what that is: no redeliveries  logging or not  etc).Thoughts?,2.7.1,2.8.0,0,0,213,1,20,3,0,0,0,0,0,0,7,58,camel-core/src/main/java/org/apache/camel/model/ChoiceDefinition.java;camel-core/src/test/java/org/apache/camel/issues/ExceptionCamel4022Test.java;camel-core/src/test/java/org/apache/camel/issues/ExceptionTest.java;camel-core/src/test/java/org/apache/camel/issues/ExceptionThrownFromOnExceptionTest.java;camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionComplexWithNestedErrorHandlerRouteWithDefaultErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionMisconfiguredTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringRouteContextOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringRouteContextOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.xml;camel-core/src/test/java/org/apache/camel/issues/OnExceptionNotHandledErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/OnExceptionNotHandledErrorHandlerRefIssueTwoRoutesTest.java;camel-core/src/test/java/org/apache/camel/issues/OnExceptionNotHandledRouteScopedErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/OnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionNotHandledErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionNotHandledErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionNotHandledErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionNotHandledErrorHandlerRefIssueTwoRoutesTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.xml;camel-core/src/test/java/org/apache/camel/issues/OnExceptionErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/OnExceptionErrorHandlerRefIssueTwoRoutesTest.java;camel-core/src/test/java/org/apache/camel/issues/OnExceptionRouteScopedErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/OnExceptionRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionRouteScopedErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringOnExceptionRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionErrorHandlerRefIssueTwoRoutesTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionRouteScopedErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringOnExceptionRouteScopedErrorHandlerRefIssueTwoRoutesTest.xml;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionErrorHandlerRefIssueTwoRoutesTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionNotHandledErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionNotHandledErrorHandlerRefIssueTwoRoutesTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionRouteScopedErrorHandlerRefIssueTest.java;camel-core/src/test/java/org/apache/camel/issues/ContextScopedOnExceptionRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionRouteScopedErrorHandlerRefIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionRouteScopedErrorHandlerRefIssueTwoRoutesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledErrorHandlerRefIssueTwoRoutesTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionNotHandledRouteScopedErrorHandlerRefIssueTwoRoutesTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionRouteScopedErrorHandlerRefIssueTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/ContextScopedSpringOnExceptionRouteScopedErrorHandlerRefIssueTwoRoutesTest.xml;camel-core/src/test/java/org/apache/camel/issues/ExceptionCamel4022Test.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringExceptionCamel4022Test.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringExceptionCamel4022Test.xml;,0,0
4033,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/05/31 15:15:51 +0100,2011/05/31 15:15:51 +0100,Claus Ibsen,2011/05/31 16:30:08 +0100,0.051585648,0.051585648,Loop EIP - Add copy option to let it start next loop with a copy of the original exchange,The Loop EIP will use pipes and filters. So if you loop 3 times  then on the 2nd and 3rd time its the output from the previous processing that is being used.We should add an option so people can use a copy of the original exchange instead  so its the same copy being looped on each iteration.The wiki documentation should be updated to describe the difference in these two modes.See nabblehttp://camel.465427.n5.nabble.com/Loop-usage-tp4432628p4432628.html,2.7.0,2.8.0,0,0,74,1,1,1,0,0,0,0,0,0,1,12,camel-core/src/main/java/org/apache/camel/model/LoopDefinition.java;camel-core/src/main/java/org/apache/camel/model/NodeFactory.java;camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java;camel-core/src/test/java/org/apache/camel/processor/LoopCopyTest.java;camel-core/src/test/java/org/apache/camel/processor/LoopNoCopyTest.java;components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/SLoopDefinition.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/LoopCopyTest.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/LoopNoCopyTest.scala;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLoopCopyTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLoopNoCopyTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringLoopCopyTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringLoopNoCopyTest.xml;,0,0
4044,Bug,Closed,Fixed,camel-core,Major,R?my DUBOIS,2011/06/03 18:03:12 +0100,2011/06/10 22:47:11 +0100,Daniel Kulp,2011/06/11 04:01:27 +0100,7.415451389,0.218240741,ChoiceProcessor : unable to find the mBeans processor,Using the jconsole  we are not able to locate some processors after a ChoiceProcessor.For example :from('direct:start').to('mock:test1').id('mock1').choice().when(predicate).to('mock:test2').id('test2').otherwise().to('mock:test3').id('test3').end().to('mock:outOfChoice').id('outOfChoice');The processors mock1 and outOfChoice are well found but not the processors test2 and test3.,2.7.0,2.7.3; 2.8.0,0,0,30,1,8,3,1,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/model/ChoiceDefinition.java;camel-core/src/test/java/org/apache/camel/model/ChoiceDefinitionTest.java;,0,0
4047,Bug,Resolved,Fixed,camel-core,Major,Daniel Kulp,2011/06/03 18:56:21 +0100,2011/06/06 18:09:51 +0100,Daniel Kulp,2011/06/08 04:05:35 +0100,4.381412037,1.413703704,javax.script dependency in camel-core,The OSGi imports for camel-core ends up with a non-optional dependency on javax.script due to it being used in the Activator. However  the karaf feature for camel-core doesn't have a dependency on org.apache.servicemix.specs.scripting-api-1.0 .One of two things should be done:1) mark javax.script as optional. This MAY require some updates to the Activator to work when it's not available.2) Update the karaf features file to add:&lt;bundle dependency='true'&gt;mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/${servicemix-specs-version}&lt;/bundle&gt;,2.8.0,2.8.0,0,0,76,1,9,3,1,0,0,0,0,0,0,0,,0,0
4057,Bug,Closed,Fixed,camel-core,Major,Mateusz Nowakowski,2011/06/06 12:26:53 +0100,2011/06/09 06:26:38 +0100,Ben O'Day,2011/06/10 19:21:35 +0100,4.287986111,1.538159722,continued(true) doesn't work when is invoked for the second time in the Camel flow,When Camel flow contains error handling as continued(true)  it is not invoked when the error occurs for the second time (even in different onException).What is more the exception is not handled even by global onException and Camel flow is interruped.,2.4.0; 2.7.2,2.7.3; 2.8.0,0,0,41,1,5,3,1,1,0,0,0,0,2,4,camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueTwoTest.java;,0,0
4067,Bug,Closed,Fixed,camel-hdfs,Major,Christian Schneider,2011/06/07 17:10:30 +0100,2011/06/07 17:10:30 +0100,Christian Schneider,2011/06/07 17:18:21 +0100,0.005451389,0.005451389,Test failures in camel-hdfs on windows as Streams are not closed correctly,On windows some hdfs tests fail as the streams are not correctly being closed. The first stacktrace looks like below. This is a bit misleading as in fact the problem is that not all exchanges could be processed. The reason is that the file component cant rename the file as it is still open. This is because an inputStream is opened for the file but never closed.junit.framework.AssertionFailedError: expected:&lt;40&gt; but was:&lt;12&gt; at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.failNotEquals(Assert.java:283) at junit.framework.Assert.assertEquals(Assert.java:64) at junit.framework.Assert.assertEquals(Assert.java:195) at junit.framework.Assert.assertEquals(Assert.java:201) at org.apache.camel.component.hdfs.HdfsProducerFileWriteTest.testSimpleWriteFile(HdfsProducerFileWriteTest.java:72) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197),2.7.2,2.8.0,0,0,135,1,1,1,1,0,0,0,1,0,1,3,components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsFileType.java;components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsWritableFactories.java;components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsProducerFileWriteTest.java;,0,0
4075,Improvement,Resolved,Fixed,camel-quartz,Major,Claus Ibsen,2011/06/09 05:04:33 +0100,2013/08/03 07:37:36 +0100,Willem Jiang,2013/08/12 07:39:41 +0100,795.1077315,9.001446759,Create camel-quartz2 component to support Quartz 2.1.x,Quartz 2.0.1 has been released. We should upgrade the camel-quartz to use that version.There is an OSGi bundle in the works  to be pushed to central repo:http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.quartz/Also there is a SMX tickethttps://issues.apache.org/jira/browse/SMXCOMP-884,2.7.2,2.12.0,6,10,38,1,23,8,1,0,0,0,0,0,4,95,components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/CamelJob.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzComponent.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzEndpoint.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzMessage.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/CronScheduledRoutePolicy.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledJob.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledRoutePolicy.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/SimpleScheduledRoutePolicy.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzCronRouteWithSmallCacheTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzEndpointConfigureTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzNameCollisionTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzPropertiesTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/StatefulQuartzRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/CronScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/MultiplePoliciesOnRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SimpleScheduledCombinedRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SimpleScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringMultiplePoliciesOnRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringScheduledRoutePolicyTest.java;components/camel-quartz2/pom.xml;parent/pom.xml;platforms/karaf/features/src/main/resources/features.xml;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelQuartz2Test.java;apache-camel/pom.xml;apache-camel/src/main/descriptors/common-bin.xml;parent/pom.xml;components/camel-quartz2/pom.xml;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/CamelJob.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzComponent.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzConstants.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzConsumer.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzEndpoint.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzMessage.java;components/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/StatefulCamelJob.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/CronScheduledRoutePolicy.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledJob.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledJobState.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledRouteDetails.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledRoutePolicy.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/ScheduledRoutePolicyConstants.java;components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/SimpleScheduledRoutePolicy.java;components/camel-quartz2/src/main/resources/META-INF/LICENSE.txt;components/camel-quartz2/src/main/resources/META-INF/NOTICE.txt;components/camel-quartz2/src/main/resources/META-INF/services/org/apache/camel/component/quartz2;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzAddDynamicRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzAddRoutesAfterCamelContextStartedTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzAutoStartTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzComponentTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzCronRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzCronRouteWithSmallCacheTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzEndpointConfigureTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzJobRouteUnderscoreTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzNameCollisionTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzOneCamelContextRestartTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzOneCamelContextSuspendResumeTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzPropertiesTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzRouteFireNowTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzRouteRestartTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzSimpleRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzStartDelayedOptionTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzStartDelayedTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzStatefulJobRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzTwoCamelContextRestartTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzTwoCamelContextSameNameClashTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzTwoCamelContextSuspendResumeTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/QuartzTwoCamelContextTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/SpringQuartzCronRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartAppTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.java;components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/StatefulQuartzRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/CronScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/MultiplePoliciesOnRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/MyRoutePolicy.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/RouteAutoStopFalseCronScheduledPolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SimpleDate.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SimpleScheduledCombinedRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SimpleScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringCronScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringMultiplePoliciesOnRouteTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringSimpleScheduledRoutePolicyTest.java;components/camel-quartz2/src/test/resources/log4j.properties;components/camel-quartz2/src/test/resources/org/apache/camel/component/quartz2/SpringQuartzCronRouteTest.xml;components/camel-quartz2/src/test/resources/org/apache/camel/component/quartz2/SpringQuartzPersistentStoreRestartTest.xml;components/camel-quartz2/src/test/resources/org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.xml;components/camel-quartz2/src/test/resources/org/apache/camel/component/quartz2/myquartz.properties;components/camel-quartz2/src/test/resources/org/apache/camel/routepolicy/quartz2/CronPolicies.xml;components/camel-quartz2/src/test/resources/org/apache/camel/routepolicy/quartz2/MultiplePolicies.xml;components/camel-quartz2/src/test/resources/org/apache/camel/routepolicy/quartz2/SimplePolicies.xml;components/camel-quartz2/src/test/resources/org/apache/camel/routepolicy/quartz2/myquartz.properties;components/camel-quartz2/src/test/resources/tables_derby.sql;components/pom.xml;parent/pom.xml;,0,0
4076,Bug,Closed,Fixed,camel-core; camel-ftp,Major,Anuj,2011/06/09 08:49:51 +0100,2011/06/10 10:16:31 +0100,Claus Ibsen,2011/06/10 11:02:29 +0100,1.092106481,0.031921296,FileIdempotentRepository fileStore does not get loaded on bootrapping  therefore files are processed again,I am using JVM based initialization of Camel using Spring.I use the documented Camel initialization procedure of main.setApplicationContext('my-spring-camel-config.xml');main.start()I also use the documented FileIdempotentRepository that points to a FileStore.However  when Camel initializes this filestore is not loaded up. Hence  the LRU cache contained within this is empty.As a result  all my files are FTPed again from the remote server.This happens everytime I start my JVM resulting in expensive FTP of files.,2.7.2,2.7.3; 2.8.0,0,0,70,1,6,2,1,0,0,0,1,0,1,3,camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/test/java/org/apache/camel/processor/FileIdempotentConsumerLoadStoreTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/idempotent/FileConsumerIdempotentLoadStoreTest.java;,0,0
4092,Improvement,Resolved,Fixed,camel-blueprint; camel-core; camel-spring,Minor,Claus Ibsen,2011/06/11 18:36:30 +0100,2011/06/27 10:15:39 +0100,Claus Ibsen,2011/07/24 10:55:02 +0100,42.67953704,27.02734954,XML DSL having attributes that is a Class type should be a String type instead and use ClassResolver to lookup the class,In the XML DSL  some of the EIPs etc. have an attribute where you can configure a Class&lt;?&gt; type. For example &lt;xpath&gt; has a resultType attribute. The XSD type is a xs:string.The problem is JAXB can only convert the xs:string to a Class&lt;?&gt; if the class can be loaded by JAXB/JDK. This may not work to well with custom types in OSGi / JBoss etc. Instead we should use ClassResolver from CamelContext to lookup those classes  as it works in OSGI/blueprint/JBoss etc.,2.8.0,2.9.0,0,0,82,1,0,0,1,0,0,0,0,0,2,15,camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/model/ConvertBodyDefinition.java;camel-core/src/main/java/org/apache/camel/model/DataFormatDefinition.java;camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/model/dataformat/JibxDataFormat.java;camel-core/src/main/java/org/apache/camel/model/dataformat/TidyMarkupDataFormat.java;camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/main/java/org/apache/camel/model/language/SimpleExpression.java;camel-core/src/main/java/org/apache/camel/model/language/XPathExpression.java;camel-core/src/main/java/org/apache/camel/model/language/XQueryExpression.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/model/StartingRoutesErrorReportedTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringSetHeaderXPathResultTypeTest.xml;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/CamelBlueprint4Test.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-21.xml;,0,0
4103,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/06/14 09:39:09 +0100,2011/06/14 09:39:09 +0100,Claus Ibsen,2011/06/14 09:40:41 +0100,0.001064815,0.001064815,In doTry .. doCatch .. doFinally the FAILURE_ENDPOINT details should be available as well in case an exception was thrown,In doCatch you have access to the caught exception using the exchange property CAUGHT_EXCEPTION. But we should also make FAILURE_ENDPOINT available as well. This information is present when you use onException / errorHandler. So we should make this consistent  and be avail in doCatch / doFinally as well.,2.7.0,2.8.0,0,0,48,1,0,0,1,0,0,0,0,0,3,7,camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;camel-core/src/test/java/org/apache/camel/processor/TryCatchCaughtExceptionFinallyTest.java;camel-core/src/test/java/org/apache/camel/processor/TryCatchCaughtExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/TryCatchCaughtExceptionTwoTimesTest.java;camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;camel-core/src/test/java/org/apache/camel/processor/TryCatchCaughtExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/TryFinallyCaughtExceptionTest.java;,0,0
4107,Bug,Resolved,Fixed,camel-core; camel-test,Major,Nikolaos Dimos,2011/06/15 13:49:02 +0100,2011/06/15 15:00:03 +0100,Claus Ibsen,2011/06/15 15:22:27 +0100,0.064872685,0.015555556,Error using multiple error handlers and onException (java.lang.IllegalStateException: SendProcessor has not been started),When we use more than one errorHandler in our routes and onException  we face test failures with the following exception:java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint&#91;mock://custom&#93;) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:94)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:621)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:242)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:189)&#91;camel-core-2.7.2.jar:2.7.2&#93; at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:121)&#91;camel-core-2.7.2.jar:2.7.2&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#91;:1.6.0_20&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#91;:1.6.0_20&#93;,2.7.2,2.8.0,1,1,100,1,5,2,1,0,0,0,0,0,1,3,camel-core/src/test/java/org/apache/camel/issues/MultipleErrorHandlerOnExceptionIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringMultipleErrorHandlerOnExceptionIssueTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/issues/SpringMultipleErrorHandlerOnExceptionIssueTest.xml;,0,0
4114,Improvement,Closed,Fixed,camel-cxf,Major,Christian Schneider,2011/06/16 15:33:37 +0100,2011/06/16 15:33:37 +0100,Christian Schneider,2011/06/27 10:50:20 +0100,10.80327546,10.80327546,Refactorings in camel-cxf,There are some dependency cycles between packages in camel-cxf. Also some classes could need a bit internal cleanup. I open this ticket so my different commits around this can be seen in context.,2.7.2,2.8.0,0,0,33,1,3,2,1,0,0,0,0,0,2,17,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfBlueprintEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpointBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpointUtils.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfSpringEndpointBean.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfEndpointUtils.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanWithBusTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeansRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfEndpointUtilsTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfEndpointUtilsWithSpringTest.java;,0,0
4116,Improvement,Resolved,Fixed,camel-spring-ws,Major,Joakim Sundqvist,2011/06/17 13:28:09 +0100,2011/06/17 17:04:58 +0100,Richard Kettelerij,2011/06/17 23:35:21 +0100,0.421666667,0.271099537,SpringWebserviceConsumer should check if there is an Exception connected to the exchange and throw that one if it exists so that the default Errorhandling in spring-ws can take place,If an Exception is thrown in the camel flow then that exception is not propagated to spring-web-services.Example: &lt;camel:from uri='spring-ws:rootqname:{foo.com}BarRequest?endpointMapping=#endpointMapping'/&gt; &lt;camel:to uri='bean:exceptionThrower?method=throwException'/&gt;This would result in an empty response from spring web-services with a status code of 202 (accepted).If the check was made on the Exchange to see if there was an Exception thrown then that one could be rethrown and the Exception-handling in spring web services could do its magic.In SpringWebserviceConsumer add this to the invoke method: if(exchange.getException() != null){ throw exchange.getException(); },2.7.2,2.8.0,0,0,101,1,3,3,1,0,0,0,0,0,2,5,components/camel-spring-ws/pom.xml;components/camel-spring-ws/pom.xml;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConsumer.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ConsumerExceptionPropagationRouteTest.java;components/camel-spring-ws/src/test/resources/org/apache/camel/component/spring/ws/ConsumerExceptionPropagationRouteTest-context.xml;,0,0
4120,Improvement,Closed,Fixed,camel-sql,Major,Claus Ibsen,2011/06/20 07:52:13 +0100,2011/06/20 22:42:10 +0100,Christian M?ller,2011/06/20 23:20:55 +0100,0.644930556,0.026909722,camel-sql - JDBC aggregation repository - Should use ClassResolver from Camel to load classes,The ClassLoadingAwareObjectInputStream should use the classResolver from CamelContext  which ensures better class loading on various platforms and OSGi etc.,2.7.0,2.8.0,0,0,19,2,1,1,0,0,0,0,1,0,1,2,components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/ClassLoadingAwareObjectInputStream.java;components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcCamelCodec.java;,0,0
4122,Improvement,Resolved,Fixed,jmx,Minor,james strachan,2011/06/20 16:38:38 +0100,2011/06/20 16:39:39 +0100,Claus Ibsen,2011/06/22 09:42:30 +0100,1.711018519,1.7103125,JMX API to create/delete endpoint,we can create endpoints on the fly via the camel-web REST API; or by just sending a message to a new endpoint URI or consuming from a URI. But there is currently no JMX way to do so which is a bit of an omission.Something like...createEndpoint(String uri);would be a nice addition to the MBeans API on a ManagedCamelContext. Maybe a removeEndpoint(String uri) too would be handy.,2.7.0,2.8.0,0,0,66,1,3,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java;camel-core/src/test/java/org/apache/camel/management/ManagedCamelContextTest.java;,0,0
4140,Improvement,Resolved,Fixed,,Minor,Chris Love,2011/06/22 19:31:04 +0100,2011/06/22 20:52:28 +0100,Richard Kettelerij,2011/06/22 20:55:14 +0100,0.058449074,0.001921296,Improve pom.xml for camel-jibx - use maven-jibx-plugin,I have a patch attached that updates the pom.xml in the camel-jibx component.1. The maven-jibx-plugin has fixed http://jira.codehaus.org/browse/JIBX-3552. Using a profile to allow a user to skip the unit tests using -Dmaven.test.skip=true. The plugin will run even if unit tests are skipped  so using a profile to correct that.,2.8.0,2.8.0,0,0,52,1,2,2,0,0,0,0,0,0,1,1,components/camel-jibx/pom.xml;,0,0
4149,Bug,Closed,Fixed,camel-core,Minor,S?ren Markert,2011/06/24 12:37:29 +0100,2011/06/25 09:49:36 +0100,Claus Ibsen,2011/06/26 10:36:11 +0100,1.915763889,1.032349537,ThrottlingInflightRoutePolicy can deadlock,Using ThrottlingInflightRoutePolicy can deadlock a route in some situations. The unit test pasted in below shows one such situation.What happens is that the bottom route processes its first exchange  then suspends. Since it is suspended it will not take the next exchange from the seda queue  and so it will never check whether it should re-enable the route.Perhaps it will work by putting the check to re-enable the route in the onExchangeBegin method  if that is called even when the route is suspended?import org.apache.camel.Exchange;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.impl.DefaultInflightRepository;import org.apache.camel.impl.ThrottlingInflightRoutePolicy;import org.apache.camel.impl.ThrottlingInflightRoutePolicy.ThrottlingScope;import org.apache.camel.test.CamelTestSupport;public class ThrottleTest extends CamelTestSupport { @Produce(uri = 'direct:input') protected ProducerTemplate input; protected MockEndpoint resultEndpoint; @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() { resultEndpoint = new MockEndpoint('mock:result'); resultEndpoint.setCamelContext(getContext()); getContext().setInflightRepository(new DefaultInflightRepository() { @Override public void add(Exchange exchange) { super.add(exchange); System.out.println(' add ' + this.size()); } @Override public void remove(Exchange exchange) { super.remove(exchange); System.out.println(' remove ' + this.size()); } }); ThrottlingInflightRoutePolicy throttler = new ThrottlingInflightRoutePolicy(); throttler.setMaxInflightExchanges(1); throttler.setScope(ThrottlingScope.Context); from('direct:input') .inOnly('seda:hey'  'seda:hey'  'seda:hey'  'seda:hey'  'seda:hey') .delay(1000) .inOnly('log:inputDone'); from('seda:hey') .routePolicy(throttler) .inOut('log:outputDone') .to(resultEndpoint); } }; } public void testThatAllExchangesAreReceived() throws Exception { input.sendBody('hello'); resultEndpoint.expectedMessageCount(5); resultEndpoint.assertIsSatisfied(); }},2.7.0,2.7.3; 2.8.0,0,1,240,1,2,1,0,0,0,0,1,0,1,3,camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java;camel-core/src/main/java/org/apache/camel/impl/ThrottlingInflightRoutePolicy.java;camel-core/src/test/java/org/apache/camel/processor/ThrottlingInflightRoutePolicyContextScopeTest.java;,0,0
4159,Improvement,Resolved,Fixed,camel-core,Minor,S?ren Markert,2011/06/28 15:30:11 +0100,2011/06/28 15:42:59 +0100,Claus Ibsen,2011/06/29 10:40:36 +0100,0.798900463,0.790011574,MockEndpoint.expectedHeaderReceived checks only one header,The method MockEndpoint.expectedHeaderReceived sets one header key and one header value to check. Subsequent calls to the same method overwrites the key and value. As a (non-expert) user of the MockEndpoint  I would expect this method to work somewhat along the lines of Map.put  so that multiple headers can be expected. Alternatively  replace it with MockEndpoint.expectedHeadersReceived(Map&lt;String  Object&gt; headers) or something like that.MockEndpoint.expectedPropertyReceived has the same issue.The unit test below demonstrates the bug. Have fun import java.util.HashMap;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.CamelTestSupport;public class MockEndpointTest extends CamelTestSupport { @Produce(uri = 'direct:input') protected ProducerTemplate input; protected MockEndpoint resultEndpoint; @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() { resultEndpoint = new MockEndpoint('mock:result'); resultEndpoint.setCamelContext(getContext()); from('direct:input') .inOnly('log:output?showHeaders=true') .to(resultEndpoint); } }; } public void testStuff() throws Exception { HashMap&lt;String  Object&gt; headers = new HashMap&lt;String  Object&gt;();// headers.put('h1'  'hello'); headers.put('h2'  'world'); resultEndpoint.expectedHeaderReceived('h1'  'hello'); resultEndpoint.expectedHeaderReceived('h2'  'world'); input.sendBodyAndHeaders(null  headers); resultEndpoint.expectedMessageCount(1); resultEndpoint.assertIsNotSatisfied(); }},2.7.0,2.8.0,0,1,199,1,5,2,0,0,0,0,0,0,2,6,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanWithAnnotationAndExchangeTest.java;camel-core/src/test/java/org/apache/camel/component/mock/MockEndpointTest.java;components/camel-hl7/src/test/java/org/apache/camel/component/hl7/HL7DataFormatTest.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/test/java/org/apache/camel/component/mock/MockEndpointTest.java;,0,0
4165,Bug,Resolved,Fixed,examples,Major,Willem Jiang,2011/06/30 14:13:27 +0100,2011/06/30 14:13:27 +0100,Willem Jiang,2011/06/30 14:46:32 +0100,0.022974537,0.022974537,LoanBroker example have some issues when it is deployed into osgi container like ServiceMix,When you deploy the camel-example-loanbroker bundle into OSGi container  the osgi container only load the WebService route because there are some confliction of the bean ids.,2.6.0; 2.7.0; 2.7.1; 2.7.2,2.8.0,0,0,26,1,1,1,0,1,0,0,0,0,2,9,examples/camel-example-loan-broker/pom.xml;examples/camel-example-loan-broker/src/main/resources/META-INF/spring/queueCamelContext.xml;examples/camel-example-loan-broker/src/main/resources/META-INF/spring/webServiceCamelContext.xml;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/queue/version/LoanBrokerQueueServerTest.java;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/queue/version/LoanBrokerQueueTest.java;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/queue/version/LoanBrokerServerTest.java;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/queue/version/LoanBrokerTest.java;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/webservice/version/LoanBrokerTest.java;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/webservice/version/LoanBrokerWSTest.java;,0,0
4167,Bug,Resolved,Fixed,camel-core,Minor,Lucien Schmitz,2011/06/30 17:16:19 +0100,2011/07/01 08:18:38 +0100,Charles Moulliard,2011/07/01 11:37:29 +0100,0.764699074,0.138090278,Label of marshal and unmarshal processors do not appear in trace output,My route is defined as following: from(mqIn) .routeId(Helper.getRouteId(this.getClass().getName())) .errorHandler(deadLetterChannel('log:DEAD').maximumRedeliveries(1).retryAttemptedLogLevel(LoggingLevel.WARN)) .onException(EAIException.class).maximumRedeliveries(0).handled(true).to('bean:AuditBO?method=handleException').end() //.transacted('PROPAGATION_REQUIRES_NEW') .setHeader('UBS_ID' new AuditId()) .wireTap('seda:auditNew') .unmarshal('SwiftDataFormat') .setHeader('MT'  getMT) .setHeader('SWIFTAddress'  getSwiftAddress) .to(mqOut);The tracing output is the following[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) wireTap(seda://auditNew) --&gt; &lt;&lt;&lt; Pattern:InOnly  Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:String  ...[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) --&gt; setHeader&#91;MT&#93; &lt;&lt;&lt; Pattern:InOnly  Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) setHeader&#91;MT&#93; --&gt; setHeader&#91;SWIFTAddress&#93; &lt;&lt;&lt; Pattern:InOnly  Headers:{MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.in.IcgToCore) setHeader&#91;SWIFTAddress&#93; --&gt; direct://core &lt;&lt;&lt; Pattern:InOnly  Headers:{SWIFTAddress=ZYAMCHZ0XXXX  MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.core.CoreToMQ) direct://core --&gt; &lt;&lt;&lt; Pattern:InOnly  Headers:{SWIFTAddress=ZYAMCHZ0XXXX  MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}  BodyType:com.ubs.eai.wmswift.SwiftDataMessage  Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0[ main] Tracer INFO ID-w01b2bc3-3197-1309192772128-0-2 &gt;&gt;&gt; (wmswift.core.CoreToMQ) --&gt; choice &lt;&lt;&lt; Pattern:InOnly  Headers:{MT=502  UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7  SWIFTAddress=ZYAMCHZ0XXXX}  The bug I found is the missing label of the unmarshal processor.,2.7.1,2.8.0,0,0,126,1,6,3,0,0,0,0,0,0,5,15,camel-core/src/main/java/org/apache/camel/model/MarshalDefinition.java;camel-core/src/main/java/org/apache/camel/model/UnmarshalDefinition.java;camel-core/src/main/java/org/apache/camel/model/MarshalDefinition.java;camel-core/src/main/java/org/apache/camel/model/UnmarshalDefinition.java;camel-core/src/test/java/org/apache/camel/impl/StringDataFormatTest.java;camel-core/src/test/java/org/apache/camel/model/LoadRouteFromXmlTest.java;camel-core/src/test/java/org/apache/camel/processor/MyLoggingSentEventNotifer.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueSubRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionHandleAndTransformWithDefaultErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipDataModificationTest.java;camel-core/src/main/java/org/apache/camel/model/MarshalDefinition.java;camel-core/src/test/java/org/apache/camel/model/LoadRouteFromXmlTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueSubRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionHandleAndTransformWithDefaultErrorHandlerTest.java;camel-core/src/main/java/org/apache/camel/model/UnmarshalDefinition.java;,0,0
4168,Improvement,Resolved,Fixed,camel-core,Minor,Lucien Schmitz,2011/06/30 17:22:40 +0100,2011/07/01 11:45:16 +0100,Charles Moulliard,2011/08/02 08:23:13 +0100,32.62538194,31.8596875,Add getRouteId() to TraceEventMessage,It would be good to find the routeId from the TraceEventMessage  in the case that the trace information is sent to a route.In my example  extracts from XML: &lt;bean id='CamelTracer' class='org.apache.camel.processor.interceptor.Tracer'&gt; &lt;property name='destination' ref='traced'/&gt; &lt;property name='logLevel' value='OFF'/&gt; &lt;/bean&gt; &lt;endpoint id='traced' uri='seda:auditrace?waitForTaskToComplete=Never'/&gt;And my route is: @EndpointInject(ref='traced') Endpoint traced;  @Override public void configure() throws Exception { from(traced) .routeId('util.AuditTrace') .noTracing() .to('bean:AuditBO?method=trace'); }An instance object of TraceEventMessage is sent down this route and there is no getRouteId() defined. This would make the TraceEventMessage even more helpful.,2.7.1,2.9.0,0,0,83,1,5,3,0,0,0,0,0,0,4,6,camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorCustomJpaMessage.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceEventMessage.java;components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/jpa/JpaTraceEventMessage.java;components/camel-jpa/src/test/java/org/apache/camel/processor/interceptor/JpaTraceEventMessageTest.java;,0,0
4171,Bug,Resolved,Fixed,camel-core; camel-groovy; osgi,Minor,Sergey Zhemzhitsky,2011/07/01 13:00:20 +0100,2011/11/07 08:31:46 +0100,Claus Ibsen,2012/10/22 13:44:12 +0100,479.030463,350.2169676,Groovy language - classNotFoundException in OSGi environment,The problem is in the following method of the GroovyLanguage@SuppressWarnings('unchecked')protected Class&lt;Script&gt; parseExpression(String expression) { return new GroovyClassLoader().parseClass(expression);}It uses the default constructor to create GroovyClassLoader  which uses Thread context classloader  which may not be equal to the classloader of the bundle where the camel context is defined.Caused by: java.lang.NoClassDefFoundError: groovy/lang/Script at java.lang.ClassLoader.defineClass1(Native Method)&#91;:1.6.0_24&#93; at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)&#91;:1.6.0_24&#93; at java.lang.ClassLoader.defineClass(ClassLoader.java:616)&#91;:1.6.0_24&#93; at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)&#91;:1.6.0_24&#93; at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:55) at groovy.lang.GroovyClassLoader$ClassCollector.createClass(GroovyClassLoader.java:519) at groovy.lang.GroovyClassLoader$ClassCollector.onClassNode(GroovyClassLoader.java:536) at groovy.lang.GroovyClassLoader$ClassCollector.call(GroovyClassLoader.java:540) at org.codehaus.groovy.control.CompilationUnit$11.call(CompilationUnit.java:747) at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:932) at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:509) at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:487) at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:464) at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:306) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:287) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:267) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:214) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:224) at org.apache.camel.language.groovy.GroovyLanguage.parseExpression(GroovyLanguage.java:44) at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:38) at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:27) at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:41)&#91;68:org.apache.camel.camel-core:2.6.0.fuse-01-09&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;68:org.apache.camel.camel-core:2.6.0.fuse-01-09&#93; ... 92 moreCaused by: java.lang.ClassNotFoundException: groovy.lang.Script at java.net.URLClassLoader$1.run(URLClassLoader.java:202)&#91;:1.6.0_24&#93; at java.security.AccessController.doPrivileged(Native Method)&#91;:1.6.0_24&#93; at java.net.URLClassLoader.findClass(URLClassLoader.java:190)&#91;:1.6.0_24&#93; at java.lang.ClassLoader.loadClass(ClassLoader.java:307)&#91;:1.6.0_24&#93; at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:696)&#91;134:groovy-all:1.7.5&#93; at groovy.lang.GroovyClassLoader$InnerLoader.loadClass(GroovyClassLoader.java:449) at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:793)&#91;134:groovy-all:1.7.5&#93; at java.lang.ClassLoader.loadClass(ClassLoader.java:248)&#91;:1.6.0_24&#93; ... 115 more,2.7.2,2.9.5; 2.10.3; 2.11.0,0,2,135,1,14,5,0,0,0,0,0,0,1,3,components/camel-groovy/pom.xml;components/camel-groovy/src/main/java/org/apache/camel/language/groovy/GroovyExpression.java;components/camel-groovy/src/main/java/org/apache/camel/language/groovy/GroovyLanguage.java;,1,2
4173,Bug,Closed,Fixed,camel-mail,Major,Christian Schneider,2011/07/04 14:10:26 +0100,2011/07/04 14:10:26 +0100,Christian Schneider,2011/07/04 14:25:38 +0100,0.010555556,0.010555556,Nullpointer in camel-mail when body is null,When trying to send a mail with an empty body (null) then we get the following NullPointer exception.We should instead either complain about the null body or send the mail with an empty body.13:27:27 010 | INFO | tp1062262230-101 | ache.camel.processor.CamelLogger 87 | 55 - org.apache.camel.camel-core - 2.7.1 | Exchange[ExchangePattern:InOut  BodyType:org.apache.cxf.message.MessageContentsList  Body:&#91;com.ier.ebo_servicerequest.ServiceRequestType@10e07658&#93;]13:27:27 013 | ERROR | tp1062262230-101 | ache.camel.processor.CamelLogger 232 | 55 - org.apache.camel.camel-core - 2.7.1 | Failed delivery for exchangeId: ID-MacBook-Pro-de-bahaaldine-local-51035-1309771358240-2-6. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerExceptionorg.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#91;:1.6.0_24&#93; at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)&#91;72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)&#91;78:org.eclipse.jetty.security:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.Server.handle(Server.java:346)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)&#91;73:org.eclipse.jetty.util:7.3.1.v20110307&#93; at java.lang.Thread.run(Thread.java:680)&#91;:1.6.0_24&#93;Caused by: java.lang.NullPointerException at javax.mail.util.ByteArrayDataSource.&lt;init&gt;(ByteArrayDataSource.java:137)&#91;69:javax.mail:1.4.3&#93; at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; ... 98 more13:27:27 023 | WARN | tp1062262230-101 | ache.cxf.common.logging.LogUtils 371 | - - | Interceptor for {http://www.ier.com/WS_ServiceRequest}WSServiceRequestService#{http://www.ier.com/WS_ServiceRequest}createServiceRequest has thrown exception  unwinding noworg.apache.cxf.interceptor.Fault: Could not prepare mail; nested exception is java.lang.NullPointerException at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:218)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:195)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:142)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#91;:1.6.0_24&#93; at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#91;:1.6.0_24&#93; at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)&#91;72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2&#93; at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)&#91;124:org.apache.cxf.bundle:2.4.0&#93; at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)&#91;78:org.eclipse.jetty.security:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)&#91;79:org.eclipse.jetty.servlet:7.3.1.v20110307&#93; at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)&#91;84:org.ops4j.pax.web.pax-web-jetty:1.0.1&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.Server.handle(Server.java:346)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)&#91;75:org.eclipse.jetty.http:7.3.1.v20110307&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)&#91;77:org.eclipse.jetty.server:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)&#91;74:org.eclipse.jetty.io:7.3.1.v20110307&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)&#91;73:org.eclipse.jetty.util:7.3.1.v20110307&#93; at java.lang.Thread.run(Thread.java:680)&#91;:1.6.0_24&#93;Caused by: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)&#91;55:org.apache.camel.camel-core:2.7.1&#93; at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)&#91;125:org.apache.camel.camel-cxf:2.7.1&#93; ... 41 moreCaused by: java.lang.NullPointerException at javax.mail.util.ByteArrayDataSource.&lt;init&gt;(ByteArrayDataSource.java:137)&#91;69:javax.mail:1.4.3&#93; at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)&#91;281:org.apache.camel.camel-mail:2.7.1&#93; at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)&#91;49:org.springframework.context.support:3.0.5.RELEASE&#93; ... 98 more,2.7.2,2.8.0,0,0,777,1,1,1,0,0,0,1,0,0,1,4,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/DetermineContentTypeIssueTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailCustomContentTypeTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailProducerUnsupportedCharsetTest.java;,1,4
4184,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/07/07 11:29:44 +0100,2011/07/07 11:29:44 +0100,Claus Ibsen,2011/07/07 17:16:21 +0100,0.240706019,0.240706019,Using adviceWith 2 times or more in Java DSL with a context scoped onException causing the 1st advised route to not work as expected,See nabblehttp://camel.465427.n5.nabble.com/intercept-using-adviceWith-tp4520468p4520468.html,2.8.0,2.8.0,0,0,5,1,1,1,0,0,0,0,0,0,1,12,camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java;camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java;camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/AdviceWithTwoRoutesContextScopedOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/AdviceWithTwoRoutesOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/AdviceWithTwoRoutesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/SpringAdviceWithTwoRoutesContextScopedOnExceptionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/SpringAdviceWithTwoRoutesOnExceptionTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/SpringAdviceWithTwoRoutesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/SpringAdviceWithTwoRoutesContextScopedOnExceptionTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/SpringAdviceWithTwoRoutesOnExceptionTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/SpringAdviceWithTwoRoutesTest.xml;,0,0
4214,Improvement,Closed,Fixed,osgi,Trivial,Jonas Bengtsson,2011/07/12 12:59:57 +0100,2011/07/13 21:15:59 +0100,Christian M?ller,2011/08/08 18:23:20 +0100,27.22457176,25.88010417,A name should be specified in the karaf features-file,When doing a features:list in karaf  the repository for camel is listed as repo-0  which looks ugly to me. It would be better if it were given a name on the form camel-${pom.version}  similar to the names used by other projects such as Karaf and ActiveMQ.,2.7.2,2.8.0; 2.7.4,0,0,46,2,3,2,0,0,0,0,0,0,1,1,platforms/karaf/features/src/main/resources/features.xml;,0,0
4224,Improvement,Resolved,Fixed,camel-xmpp,Major,James Green,2011/07/13 15:49:46 +0100,2012/08/27 08:22:04 +0100,Rich Newcomb,2012/08/28 05:59:59 +0100,411.5904282,0.901331019,Add Lazy Connection to XMPP,We are trying to use XMPP as an endpoint but we have a serious problem.If the XMPP server is inaccessible  we cannot start Camel - it just issues a FailedToCreateProducerException exception and shuts itself down.Given we are running Camel from an ActiveMQ instance this prevents critical infrastructure from being restarted when our XMPP server is offline.,2.7.2,2.11.0,0,2,56,1,8,2,0,0,0,0,0,0,2,9,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppComponent.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppConsumer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppGroupChatProducer.java;components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/EmbeddedXmppTestServer.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppDeferredConnectionTest.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRobustConnectionTest.java;,0,0
4229,Improvement,Resolved,Fixed,tests,Major,Willem Jiang,2011/07/15 03:57:19 +0100,2011/07/15 03:57:19 +0100,Willem Jiang,2011/07/15 14:07:35 +0100,0.423796296,0.423796296,Added wrap method for template  consumer and context in org.apache.camel.test.junit4.CamelContextSupport,User complain about the change of CAMEL-3960 causes some issue when using the CamelTestSupport in scala.A simple solution is add some wrap method to get the value protected static member.Here is the mail thread&#91;1&#93; of it.&#91;1&#93;http://camel.465427.n5.nabble.com/CamelTestSupport-template-variable-missing-changed-in-2-8-0-td4587700.html,2.8.0,2.8.0,0,0,59,1,1,1,0,0,0,0,0,1,2,4,components/camel-testng/src/main/java/org/apache/camel/testng/CamelTestSupport.java;components/camel-scala/pom.xml;components/camel-scala/src/test/scala/org/apache/camel/scala/CamelTestSupportTest.scala;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;,0,0
4233,Improvement,Resolved,Fixed,camel-core,Major,james strachan,2011/07/15 09:13:05 +0100,2011/07/15 13:04:07 +0100,Claus Ibsen,2011/07/16 10:45:44 +0100,1.064340278,0.903900463,avoid runtime package scanning to discover TypeConverters,Package scanning to discover classes annotated with @Converter is slow. Plus on many containers (especially commercial JEE containers) its not even possible; since ClassLoader.getResource() doesn't often return file system based URIs you can easily convert to a java.io.File so you can list files in a directory.Finding known resources/classes in class loaders generally works; scanning packages is generally more problematic - as well as being slow.So it would be better if Camel could use a text file per jar containing all the fully qualified class names of the converters to use. Then no package scanning is required. Or rather we only need to use package scanning if a text file contains packages (rather than fully qualified classes). i.e. do the package scanning at build time (when you have full access to the file system  rather than at runtime when you generally don't have access to the files - and expanding jars to look inside them is awfully slow.In addition it'd be great if we added a maven plugin - or Java compiler AnnotationProcessor we can use with the compile step - to generate the META-INF/services/org/apache/camel/TypeConverter file automatically as part of the build. Then users don't even have to think about it; they just add @Converter to a class and the plugin generates the text file as part of the build.  using fully qualified class names - so no package scanning required at runtime - and much faster startup times too,2.7.0,2.8.0,0,1,247,1,4,1,0,0,0,0,1,0,1,38,camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java;camel-core/src/main/java/org/apache/camel/util/StringHelper.java;camel-core/src/test/java/org/apache/camel/util/StringHelperTest.java;components/camel-atom/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-cache/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-context/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-cxf/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-dns/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-exec/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-flatpack/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-hl7/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-http/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-http4/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-jcr/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-jetty/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-mail/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-mina/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-netty/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-quickfix/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-restlet/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-rss/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-scala/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-snmp/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-spring-integration/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-spring-ws/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-syslog/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;components/camel-xmlbeans/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;examples/camel-example-etl/src/main/resources/META-INF/services/org/apache/camel/TypeConverter;tests/camel-typeconverterscan-test/pom.xml;tests/camel-typeconverterscan-test/src/main/resources/META-INF/LICENSE.txt;tests/camel-typeconverterscan-test/src/main/resources/META-INF/NOTICE.txt;tests/camel-typeconverterscan-test/src/test/java/org/apache/camel/tests/typeconverterscan/MyBean.java;tests/camel-typeconverterscan-test/src/test/java/org/apache/camel/tests/typeconverterscan/MyConverter.java;tests/camel-typeconverterscan-test/src/test/java/org/apache/camel/tests/typeconverterscan/RouteTest.java;tests/camel-typeconverterscan-test/src/test/resources/META-INF/services/org/apache/camel/TypeConverter;tests/camel-typeconverterscan-test/src/test/resources/log4j.properties;tests/pom.xml;,0,0
4236,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/07/15 12:22:13 +0100,2011/07/15 12:22:13 +0100,Claus Ibsen,2011/07/15 15:50:54 +0100,0.144918981,0.144918981,When performing lookup in registry and having expected type as parameter  then report better failure if ClassCastException,When Camel lookup in the registry  it may lookup in different runtime registries  such as OSGi blueprint. If an explicit type has been provided as a parameter you will get a ClassCastException if the type does not match. But you cannot see which types was a stake. So we should provide a better exception.Caused by: java.lang.ClassCastException at java.lang.Class.cast(Class.java:2990)&#91;:1.6.0_24&#93; at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:43) at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:47) at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:54) ... 42 more,2.7.0,2.8.0,0,0,68,1,0,0,0,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/NoSuchBeanException.java;camel-core/src/main/java/org/apache/camel/impl/CompositeRegistry.java;camel-core/src/main/java/org/apache/camel/impl/JndiRegistry.java;camel-core/src/main/java/org/apache/camel/impl/SimpleRegistry.java;camel-core/src/test/java/org/apache/camel/impl/RegistryLookupTypeClassCastExceptionTest.java;camel-core/src/test/java/org/apache/camel/impl/SimpleRegistryTest.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintContainerRegistry.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/ApplicationContextRegistry.java;,0,0
4237,Bug,Closed,Fixed,,Major,Jonathan Anstey,2011/07/15 17:20:42 +0100,2011/07/15 17:20:42 +0100,Jonathan Anstey,2011/07/15 17:22:46 +0100,0.001435185,0.001435185,Archetypes fail to build in offline mode,If build tooling/archetypes with the --offline Maven argument you may see an error like&#91;ERROR&#93; Unresolveable build extension: Error resolving version for plugin 'org.apache.maven.archetype:archetype-packaging'Seems the version for archetype-packaging in the dependencyManagement section defined in the parent pom is not propagating down to build extension... when Maven is not in offline mode it can simply grab the latest version from the metadata at central. I'm committing a simple fix shortly.,2.7.2,2.8.0; 2.7.4,0,0,70,1,2,1,0,0,0,0,0,0,1,9,tooling/archetypes/camel-archetype-activemq/pom.xml;tooling/archetypes/camel-archetype-blueprint/pom.xml;tooling/archetypes/camel-archetype-component/pom.xml;tooling/archetypes/camel-archetype-java/pom.xml;tooling/archetypes/camel-archetype-scala/pom.xml;tooling/archetypes/camel-archetype-spring-dm/pom.xml;tooling/archetypes/camel-archetype-spring/pom.xml;tooling/archetypes/camel-archetype-web/pom.xml;tooling/archetypes/camel-archetype-webconsole/pom.xml;,0,0
4246,Bug,Resolved,Fixed,camel-core,Minor,Yaytay,2011/07/19 12:34:51 +0100,2011/07/22 10:28:43 +0100,Claus Ibsen,2011/07/22 12:33:05 +0100,2.998773148,0.086365741,TraceInterceptor does not work correctly for AsyncProcessing,TraceEventHandlers are not called correctly when a node is processed asynchronously.From org.apache.camel.processor.interceptor.TraceInterceptor: try { // special for interceptor where we need to keep booking how far we have routed in the intercepted processors if (node.getParent() instanceof InterceptDefinition &amp;&amp; exchange.getUnitOfWork() != null) { TracedRouteNodes traced = exchange.getUnitOfWork().getTracedRouteNodes(); traceIntercept((InterceptDefinition) node.getParent()  traced  exchange); } // process the exchange try { sync = super.process(exchange  callback); } catch (Throwable e) { exchange.setException(e); } } finally { // after (trace out) if (shouldLog &amp;&amp; tracer.isTraceOutExchanges()) { logExchange(exchange); traceExchangeOut(exchange  traceState); } }As it is this results in traceExchangeOut being called before the callback  which is wrong.The call to super.process needs to wrap the callback to call traceExchangeOut (and the finally block shouldn't run if the process is asynch).This isn't a regression  but the change to make more routes asynchronous makes it more noticeable.,2.7.1,2.8.1; 2.9.0,0,0,136,1,0,0,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncTraceHandlerTest.java;,0,0
4252,Bug,Resolved,Fixed,camel-ftp,Minor,Claus Ibsen,2011/07/20 09:20:47 +0100,2011/07/20 09:20:47 +0100,Claus Ibsen,2011/07/20 17:18:04 +0100,0.331446759,0.331446759,camel-ftp - Using tempFileName option should use the separator option to allow control of path separators in the generated file name,See nabblehttp://camel.465427.n5.nabble.com/FTP-temp-file-not-being-created-correctly-on-Windows-Camel-2-7-2-tp4591581p4591581.html,2.7.2; 2.8.0,2.8.1; 2.9.0,0,0,5,1,0,0,1,0,0,0,0,0,2,5,components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FileToFtpTempFileNameTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/test/java/org/apache/camel/component/file/FilerProducerFileNamesTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithPathPathSeparatorUnixNoStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithPathPathSeparatorWindowsNoStepwiseTest.java;,0,0
4254,Bug,Closed,Fixed,camel-soap,Major,Oliver Jelinski,2011/07/21 13:59:30 +0100,2011/07/28 08:44:46 +0100,Willem Jiang,2011/08/04 11:19:35 +0100,13.88894676,7.107511574,Missing setter or constructor-argument for elementNameStrategyRef in SoapJaxbDataFormat,Because the variable 'elementNameStrategyRef' in org.apache.camel.dataformat.soap.SoapJaxbDataFormat can't be set  it is always null. Therefore declaring the data format with spring-dsl leads to an automatic fallback to the default strategy 'TypeNameStrategy' in org.apache.camel.dataformat.soap.SoapJaxbDataFormat.checkElementNameStrategy(Exchange exchange). This further leads to wrong results when marshalling.So the following declararion does not work correctly:... &lt;bean id='myStrategy' class='org.apache.camel.dataformat.soap.name.ServiceInterfaceStrategy'&gt; &lt;constructor-arg value='my.package.MyServiceInterface'/&gt; &lt;constructor-arg value='true'/&gt; &lt;/bean&gt;... &lt;camelContext xmlns='http://camel.apache.org/schema/spring'&gt;... &lt;dataFormats&gt; &lt;soapjaxb id='mySoap'  contextPath='my.package'  elementNameStrategyRef='myStrategy'/&gt; &lt;/dataFormats&gt;... &lt;route&gt; &lt;from uri='cxf:/MyService?serviceClass=my.package.MyServiceInterface' /&gt;... &lt;convertBodyTo type='my.package.MyType'/&gt; &lt;marshal ref='mySoap'/&gt;...,2.7.0; 2.7.3,2.8.1; 2.9.0,0,1,74,1,8,3,1,1,0,0,0,0,1,2,components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/SoapJaxbDataFormat.java;components/camel-soap/src/test/resources/org/apache/camel/dataformat/soap/SoapSpringRoundtripTest-context.xml;,0,0
4257,Improvement,Resolved,Fixed,camel-jms,Minor,Dmitri Maximovich,2011/07/21 17:24:35 +0100,2013/09/24 10:51:11 +0100,Claus Ibsen,2013/09/24 10:51:11 +0100,795.7268056,0,Expose setDeliveryMode property in org.apache.camel.component.jms.JmsComponent,It would be beneficial if org.apache.camel.component.jms.JmsComponent would allow to specify JMS deliveryMode explicitly. Currently  from what I can tell  there is only boolean deliveryPersistent property which is not enough if JMS provider supports additional non-standard delivery modes. Example is Tibco EMS RELIABLE_DELIVERY mode.,2.7.2,2.12.2; 2.13.0,0,4,43,1,7,4,1,0,0,0,0,0,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteDeliveryModePreserveQoSTest.java;,0,0
4261,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2011/07/22 08:15:15 +0100,2011/07/22 08:15:15 +0100,Claus Ibsen,2011/07/22 10:19:08 +0100,0.086030093,0.086030093,Properties component - Cached locations may add duplicates,See nabblehttp://camel.465427.n5.nabble.com/LRUCache-memory-leak-when-using-camel-properties-file-tp4621357p4621357.htmlThe internal cache should be a soft cache and we should use a key holder to ensure equals/hashCode,2.8.0,2.8.1; 2.9.0,0,0,22,1,0,0,1,0,0,1,1,0,1,2,camel-core/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentTest.java;,2,2
4264,Bug,Resolved,Fixed,camel-core,Major,Willem Jiang,2011/07/25 11:02:53 +0100,2011/07/26 11:14:08 +0100,Christian M?ller,2011/08/26 02:59:25 +0100,31.66425926,30.65644676,The routeContext stack of DefaultUnitOfWork should be thread safe,Here is the stack tracejava.util.EmptyStackException at java.util.Stack.peek(Stack.java:85) at java.util.Stack.pop(Stack.java:67) at org.apache.camel.impl.DefaultUnitOfWork.popRouteContext(DefaultUnitOfWork.java:226) at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:260) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70) at org.apache.camel.processor.Pipeline.process(Pipeline.java:143) at org.apache.camel.processor.Pipeline.process(Pipeline.java:78) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:113) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:397) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)You can find more information in this mail thread&#91;1&#93;&#91;1&#93;http://camel.465427.n5.nabble.com/EmptyStackException-in-DefaultUnitOfWork-popRouteContext-td4630106.html,2.7.3; 2.8.0,2.8.1; 2.9.0,3,4,64,2,10,5,1,1,0,0,0,0,3,4,camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;parent/pom.xml;platforms/karaf/features/pom.xml;,0,0
4268,Improvement,Closed,Fixed,camel-aws,Minor,Chris Chen,2011/07/26 08:10:59 +0100,2011/07/26 17:03:09 +0100,Christian M?ller,2011/09/26 22:25:26 +0100,62.59336806,62.22380787,Camel-AWS: Add support for adding CacheControl and ContentDisposition metadata support when uploading file,Add support for setting the CacheControl and ContentDisposition metadata information for the object.Proposed Implementation:1) Add two new headers: CamelAwsS3CacheControl and CamcelAwsS3ContentDisposition. 2) Add corresponding enumerations in S3Constants3) Set the corresponding data into PutObjectRequest in S3Producer.,2.8.0,2.8.2; 2.9.0,0,0,35,2,6,1,0,0,0,0,0,0,1,1,components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java;,0,0
4269,Bug,Resolved,Fixed,camel-ftp,Major,Marek Niewiadomski,2011/07/26 12:53:51 +0100,2011/07/26 14:13:05 +0100,Claus Ibsen,2011/07/26 14:25:39 +0100,0.06375,0.008726852,Connection to sftp server occasionally don't want to come back,Problem appear if somebody kill logged on user on sftp server while you are connected with consumer.Camel is not able to reconnect on next poll even if it says that it will do this.RemoteFileConsumer is not connected but it thinks that it is still logged in.I think 'loggedIn' flag should be down after each disconnecting action like in attached patch.2011-07-24 22:35:14 848 WARN &#91;RemoteFilePollingConsumerPollStrategy:37&#93; Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://test@host 2011-07-24 22:35:14 849 WARN &#91;RemoteFilePollingConsumerPollStrategy:52&#93; Consumer Consumer&#91;sftp://test@host/test?delay=60000&amp;delete=true&amp;localWorkDirectory=%2Fvar%2Ftest%2Ftemp&amp;password=xxxx&amp;throwExceptionOnConnectFailed=true&#93; could not poll endpoint: sftp://test@host/test?delay=60000&amp;delete=true&amp;localWorkDirectory=%2Fvar%2Ftest%2Ftemp&amp;password=xxxx&amp;throwExceptionOnConnectFailed=true caused by: Cannot change directory to: test org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: test at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:408) at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:393) at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:77) at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:49) at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: 4:  at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285) at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:406) ... 14 moreCaused by: java.io.IOException: Pipe closed at java.io.PipedInputStream.read(PipedInputStream.java:291) at java.io.PipedInputStream.read(PipedInputStream.java:361) at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333) at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359) at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819) at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268) ... 15 more,2.7.2; 2.7.3,2.8.1; 2.9.0,0,0,164,1,1,1,1,1,0,0,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;,0,0
4272,Improvement,Resolved,Fixed,camel-jdbc,Major,Willem Jiang,2011/07/26 15:58:50 +0100,2011/07/26 15:58:50 +0100,Willem Jiang,2011/07/26 16:29:41 +0100,0.021423611,0.021423611,camel-jdbc should provide a option not set the autoCommit flag,When the jdbc connection is work as XA resource  the connection autoCommit flag doesn't support to be reset.So we should provide an option in the camel-jdbc endpont not to set the autoCommit flag on the connection.,2.8.0,2.8.2; 2.9.0,0,0,36,1,1,1,1,0,1,0,0,0,1,2,components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java;components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java;,0,0
4274,Bug,Resolved,Fixed,camel-core,Minor,Yaytay,2011/07/27 07:11:34 +0100,2011/07/27 08:25:39 +0100,Claus Ibsen,2011/07/27 08:25:39 +0100,0.051446759,0,MDCUnitOfWork behaviour incorrect with nested routes,MDCUnitOfWork.clear() removes any content set by MDCUnitOfWork from MDC.If there are two separate exchange running at the same time in the same thread  as happens when a ProduceTemplate is used from Java  this is incorrect because the MDC of the parent is cleared after the child completes.Conceptually the MDC should be a stack  but MDC only accepts strings so the simplest thing to do is for MDCUnitOfWork to replace the previous values in clear().,2.8.0,2.8.1; 2.9.0,0,0,74,1,2,2,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/MDCUnitOfWork.java;camel-core/src/test/java/org/apache/camel/processor/MDCResetTest.java;,0,0
4282,Improvement,Resolved,Fixed,examples; tooling,Minor,Claus Ibsen,2011/07/29 13:09:09 +0100,2011/07/29 13:09:09 +0100,Claus Ibsen,2011/07/29 14:23:02 +0100,0.05130787,0.05130787,Camel archetypes and examples should enable JMX for ActiveMQ,The camel-activemq archetype setup an embedded AMQ broker which has JMX disabled.We should check all our examples and archetypes that JMX is enabled for AMQ when its embedded.As it may confuse end users that they can see Camel in JMX  but not AMQ.,2.8.0,2.9.0,0,0,43,1,0,0,1,0,0,0,0,0,1,7,examples/camel-example-jms-file/src/main/resources/META-INF/spring/camelContext.xml;examples/camel-example-pojo-messaging/src/main/resources/META-INF/spring/camel-context.xml;examples/camel-example-route-throttling/src/main/resources/META-INF/spring/camel-server.xml;examples/camel-example-spring-jms/src/main/resources/META-INF/spring/camel-server-aop.xml;examples/camel-example-spring-jms/src/main/resources/META-INF/spring/camel-server.xml;tooling/archetypes/camel-archetype-activemq/src/main/resources/archetype-resources/src/main/resources/META-INF/spring/camel-context.xml;tooling/archetypes/camel-archetype-webconsole/src/main/resources/archetype-resources/src/main/webapp/WEB-INF/applicationContext.xml;,0,0
4283,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/07/29 15:43:39 +0100,2011/07/29 15:43:39 +0100,Claus Ibsen,2011/07/29 15:57:47 +0100,0.009814815,0.009814815,dump as xml fails if message body is already xml,MessageHelper.dumpAsXml has a problem if the message body is already xml.,2.8.0,2.8.2; 2.9.0,0,0,11,1,0,0,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/MessageHelper.java;camel-core/src/test/java/org/apache/camel/management/ManagedBrowseableEndpointAsXmlTest.java;camel-core/src/test/java/org/apache/camel/util/MessageHelperTest.java;,0,0
4287,Bug,Resolved,Fixed,,Major,Jonathan Anstey,2011/08/01 14:12:22 +0100,2011/08/01 14:13:30 +0100,Jonathan Anstey,2011/08/01 14:13:30 +0100,0.000787,0,camel-aws won't build offline,If you build camel-aws in Maven's offline mode (-o)  you may get the following error:No versions available for org.codehaus.jackson:jackson-core-asl:jar:[1.4 ) within specified rangeThis will occur even if you have the libs locally. This is happening because Maven cannot download the remote metadata to get a list of versions for jackson-core-asl. Specifying a hard version for this (not a range) gets around the issue. Committing a fix shortly.,2.8.0,2.8.1; 2.9.0,0,0,66,1,1,1,1,0,0,0,0,0,1,1,components/camel-aws/pom.xml;,0,0
4293,Bug,Resolved,Fixed,camel-core,Major,Vincent MATHON,2011/08/02 10:05:57 +0100,2011/08/03 18:47:41 +0100,Claus Ibsen,2011/08/03 20:35:12 +0100,1.436979167,0.074664352,@Bean method name is ignored,Since 2.8.0 Exchange.BEAN_METHOD_NAME is always used instead of @Bean method name (see BeanInfo.createInvocation(Object pojo  Exchange exchange)). As a consequence  the wrong method is choosen when I use a beanref invokation on a method that uses @Bean parameter binding.I built a simple test case as a zip file containing an Eclipse Helios maven project (see attachment). The test fails with camel 2.8.0 and succeeds with 2.7.3 and earlier (at least until 2.6.0).regards Vincent MATHON,2.8.0,2.8.1; 2.9.0,0,0,73,1,4,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/test/java/org/apache/camel/language/BeanAnnotationParameterTest.java;camel-core/src/test/java/org/apache/camel/language/BeanAnnotationParameterTwoTest.java;,0,0
4294,Bug,Resolved,Fixed,camel-cxf,Major,herriot one,2011/08/02 14:19:30 +0100,2011/08/03 02:02:24 +0100,Willem Jiang,2011/08/04 09:26:14 +0100,1.796342593,1.308217593,Camel CXF Endpoint creates incomplete WSDL,The dynamically created WSDL for a cxf:cxfEndpoint declaration is malformed when using a complex type as parameter.Please see as well the discussion here.http://camel.465427.n5.nabble.com/Camel-CXF-Endpoint-creating-incomplete-WSDL-td4642433.htmlUse attached test project to run mvn test with version 2.8.0 and 2.7.2  this should show the error.,2.8.0,2.8.1; 2.9.0,1,0,43,1,8,4,1,0,0,0,0,1,2,9,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/wsdl/Order.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/wsdl/OrderEndpoint.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/wsdl/OrderTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wsdl/camel-cxf.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wsdl/camel-route.xml;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/wsdl/OrderTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wsdl/camel-cxf.xml;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wsdl/camel-route.xml;,0,0
4297,Improvement,Resolved,Fixed,,Major,Jonathan Anstey,2011/08/02 18:37:51 +0100,2011/08/02 18:37:51 +0100,Jonathan Anstey,2011/08/02 19:14:17 +0100,0.025300926,0.025300926,Add errorHandler option for DMLC to camel-jms,In Spring 3 a org.springframework.util.ErrorHandler can be used to react to unhandled exceptions (unlike JMSExceptions handled by an javax.jms.ExceptionListenerSee http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jms/listener/AbstractMessageListenerContainer.html#setErrorHandler(org.springframework.util.ErrorHandler)I'm going to add an option for this to camel-jms shortly.,2.8.0,2.8.2; 2.9.0,0,0,33,1,1,1,1,0,0,0,0,0,2,10,components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ProducerRemoteRouteTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ProducerRemoteRouteTimeOutTest.java;components/camel-spring-ws/src/test/resources/org/apache/camel/component/spring/ws/ProducerRemoteRouteTimeOutTest-context.xml;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;,0,0
4305,Bug,Resolved,Fixed,camel-spring,Minor,Claus Ibsen,2011/08/04 10:43:34 +0100,2011/08/04 10:43:34 +0100,Claus Ibsen,2011/08/04 10:45:24 +0100,0.001273148,0.001273148,xslt component - Cannot load xslt file from file system,See nabblehttp://camel.465427.n5.nabble.com/Custom-URIResolver-for-Camel-tp4665485p4665485.htmlThe Spring IO resource is a bit pants  as you ask for it to give an input stream  and then it fails doing that for a plain file url.Instead it gives you an URL connection  and you get a unknown host exception.,2.8.0,2.8.1; 2.9.0,0,0,46,1,0,0,1,0,0,0,0,0,1,3,components/camel-spring/src/main/java/org/apache/camel/component/xslt/XsltComponent.java;components/camel-spring/src/test/java/org/apache/camel/component/xslt/XsltRouteFileTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/xslt/XsltRouteFileTest.xml;,0,0
4311,Bug,Resolved,Fixed,camel-bindy,Minor,surya,2011/08/06 02:41:37 +0100,2011/08/06 02:41:37 +0100,Claus Ibsen,2011/08/07 11:32:13 +0100,1.368472222,1.368472222,Camel Bindy Parser One to Many KvP Unmarshall Issue,Bindy KvP unmarshall issue. While unmarshalling FIX messages  camel-bindy causing inconsistencies if the incoming fix messages are defined to map using 'OneToMany' annotations.In a given route for eg: BindyKeyValuePairDataFormat kvpBindyDataFormat = new BindyKeyValuePairDataFormat('org.apache.camel.dataformat.bindy.model.fix.complex.onetomany'); public void configure() { from(URI_DIRECT_START).unmarshal(kvpBindyDataFormat).to(URI_MOCK_RESULT); }kvpBindyDataFormat is single instance for multiple threads and with in 'BindyKeyValuePairFactory' class instance varialbe below is shared across multiple threads causing data inconsistencies.private Map&lt;String  List&lt;Object&gt;&gt; lists = new HashMap&lt;String  List&lt;Object&gt;&gt;(); Values from previous thread/messages are retained in the current thread causing issues.For eg in the test case: public class BindyComplexOneToManyKeyValuePairUnMarshallTest extends CommonBindyTest if we send another message with no repeating groups are sent.String message2 = '8=FIX 4.19=2034=135=049=INVMGR56=BRKR' + '1=BE.CHM.00111=CHM0001-0158=this is a camel - bindy test'  + '10=220';The output message has repeating group data from message processed in earlier thread are pouplated causing data inconsistencies.Please suggest the fix considering multi-threading scenario. I am willing to volunteer for the fix.Regards Surya,2.7.0; 2.7.2; 2.7.3; 2.8.0,2.8.1; 2.9.0,0,1,147,1,5,2,1,1,0,0,0,0,1,3,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyKeyValuePairFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/kvp/BindyKeyValuePairDataFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fix/BindyComplexOneToManyKeyValuePairUnMarshallTest.java;,0,0
4319,Bug,Resolved,Fixed,examples,Trivial,Alexey Markevich,2011/08/09 15:15:07 +0100,2011/08/10 18:59:33 +0100,Claus Ibsen,2011/08/10 18:59:33 +0100,1.155856481,0,Example feature: wrong spring version,Featureapache-camel-2.8.0.zip/apache-camel-2.8.0/examples/camel-example-etl/src/main/resources/features.xml contains &lt;bundle&gt;mvn:org.springframework/spring-jdbc/2.5.6.SEC01&lt;/bundle&gt; &lt;bundle&gt;mvn:org.springframework/spring-orm/2.5.6.SEC01&lt;/bundle&gt; Exception during 'hibernate-feauture' feature installation:12:23:21 337 | INFO | l Console Thread | araf.shell.console.jline.Console 258 | 36 - org.apache.karaf.shell.console - 2.2.1 | Exception caught while executing command java.lang.Exception: Could not start bundle mvn:org.springframework/spring-jdbc/2.5.6.SEC01 in feature(s) hibernate-feauture-0.0.0: The bundle 'org.springframework.jdbc_2.5.6.SEC01 &#91;332&#93;' could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version='&#91;2.5.6.SEC01 2.5.6.SEC01&#93;' at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)&#91;38:org.apache.karaf.features.core:2.2.1&#93;...Caused by: org.osgi.framework.BundleException: The bundle 'org.springframework.jdbc_2.5.6.SEC01 &#91;332&#93;' could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version='&#91;2.5.6.SEC01 2.5.6.SEC01&#93;' at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1317)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1301)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:319)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:284)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:276)&#91;osgi-3.6.0.v20100517.jar:&#93; at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:350)&#91;38:org.apache.karaf.features.core:2.2.1&#93; ... 15 moreSolution:Change version for bundles org.springframework/spring-jdbc and org.springframework/spring-orm to 3.0.5.RELEASE instead 2.5.6.SEC01.,2.8.0,2.8.1; 2.9.0,0,0,107,1,0,0,1,0,0,0,0,0,2,3,examples/camel-example-etl/src/main/resources/features.xml;examples/camel-example-etl/src/main/resources/features.xml;examples/camel-example-tracer/src/main/resources/features.xml;,0,0
4325,Bug,Resolved,Fixed,camel-restlet,Major,Cedric de Launois,2011/08/10 15:20:22 +0100,2011/09/02 04:35:33 +0100,Willem Jiang,2011/09/02 10:21:21 +0100,22.79234954,0.240138889,Wrong exception uri when an HTTP error code is returned,When a REST service returns an HTTP error code (e.g. 404)  the URI property of the exception is incorrect.The URI is the URI of the origin endpoint of the route.It should be instead the URI of the endpoint that threw the exception.For instance  in the following route :&lt;route id='restproxy'&gt; &lt;from uri='restlet:http://localhost:9080/oe/ws/offre/{id}'/&gt; &lt;doTry&gt; &lt;to uri='restlet:http://bla.dot.com:8080/oe/ws/offre/{id}'/&gt; &lt;doCatch&gt; &lt;exception&gt;org.apache.camel.CamelException&lt;/exception&gt; &lt;log message='URI=${exception.uri}'/&gt; &lt;/doCatch&gt; &lt;/doTry&gt;&lt;/route&gt;The logged URI is 'restlet:http://localhost:9080/oe/ws/offre/{id}' but should be instead the real URI used  e.g. 'restlet:http://bla.dot.com:8080/oe/ws/offre/1'.This bug might be fixed by the following code change in class org.apache.camel.component.restlet.RestletProducer  method populateRestletProducerException() : String uri = exchange.getFromEndpoint().getEndpointUri(); + String uri = response.getRequest().getResourceRef(),2.6.0; 2.7.0; 2.8.0,2.8.2; 2.9.0,0,0,128,1,2,2,1,1,0,0,0,0,1,3,components/camel-restlet/pom.xml;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletExceptionResponseTest.java;,0,0
4342,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/08/17 11:15:43 +0100,2011/08/17 11:15:43 +0100,Claus Ibsen,2011/08/17 11:19:15 +0100,0.002453704,0.002453704,Validator component - Should be able to validate from a File payload,The validator component should be able to validate a message which is from a java.io.File.What is needed is a couple of type converters to ensure this.,2.9.0,2.9.0,0,0,26,1,0,0,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/test/java/org/apache/camel/component/validator/FileValidatorRouteTest.java;camel-core/src/test/java/org/apache/camel/converter/jaxp/XmlConverterTest.java;,0,0
4348,Improvement,Resolved,Fixed,camel-core,Minor,Bengt Rodehav,2011/08/18 11:01:07 +0100,2011/08/18 12:28:04 +0100,Claus Ibsen,2011/08/18 12:33:40 +0100,0.064270833,0.003888889,Add String->TimeZone converter so that time zone can be specified for camel-quartz,It is possible to specify a time zone for Quartz  however  in order for that to work Camel needs a String to TimeZone type converter since Quartz requires a TimeZone.Attached is a patch containing a type converter that works. By setting the type converter explicitly on the context like this context.getTypeConverterRegistry().addTypeConverter(TimeZone.class  String.class  new String2TimeZoneConverter());it is possible to create an endpoint URI looking like this:quartz://groupName/timerName?cron=&lt;cronExpression&gt;&amp;trigger.timeZone=Europe/StockholmHowever  it would be really useful if this type converter could be included in camel-core. This has been discussed on the camel user list:http://camel.465427.n5.nabble.com/How-to-specify-a-time-zone-for-camel-quartz-td4700077.html,2.8.0,2.8.1; 2.9.0,0,0,89,1,4,2,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/converter/DateTimeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/CorePackageScanClassResolver.java;camel-core/src/test/java/org/apache/camel/converter/DateTimeConverterTest.java;,0,0
4351,Improvement,Resolved,Fixed,camel-cxf,Major,Sergey Zhemzhitsky,2011/08/18 16:44:09 +0100,2011/08/29 03:24:45 +0100,Willem Jiang,2011/08/31 07:12:19 +0100,12.60289352,2.158032407,Impossible to use placeholders in endpointName and serviceName attributes of cxf:cxfEndpoint,Here is how endpointName and serviceName are declared in XSD.&lt;xsd:attribute name='endpointName' type='xsd:QName' /&gt; &lt;xsd:attribute name='serviceName' type='xsd:QName' /&gt; So the xml parser fails to parse the following element&lt;cxf:cxfEndpoint id='service' address='${http.service.endpoint.path}' wsdlURL='${http.service.wsdl.path}' serviceName='${http.service.serviceName}' endpointName='${http.service.portName}'&gt;&lt;/cxf:cxfEndpoint&gt;,2.7.3,2.9.0,0,0,55,1,9,3,1,0,0,0,0,0,3,13,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanDefinitionParser.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/QNameConverter.java;components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeans.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfEndpointTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeans.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanDefinitionParser.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/QNameConverter.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeans.xml;,0,0
4352,Bug,Resolved,Fixed,camel-ftp,Minor,Claus Ibsen,2011/08/18 18:07:32 +0100,2011/08/18 18:07:32 +0100,Claus Ibsen,2011/08/18 18:45:30 +0100,0.026365741,0.026365741,Ftp consumer using done file should cater for if stepwise has been enabled  and thus the done file path is to be calculated differently,The workaround is to use ${file:onlyname} or not using stepwise.,2.6.0,2.8.1; 2.9.0,0,0,10,1,1,1,1,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerDoneFileNameFixedStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerDoneFileNameFixedTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerDoneFileNameStepwiseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerDoneFileNameTest.java;,0,0
4353,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/08/19 07:07:02 +0100,2011/08/19 07:07:02 +0100,Claus Ibsen,2011/08/19 08:52:57 +0100,0.073553241,0.073553241,Using transacted in Java DSL without Spring XML setting up TX manager should report better error when not able to find a TX manager in the registry,See nabblehttp://camel.465427.n5.nabble.com/Transaction-configuration-in-Java-DSL-tp4711625p4711625.htmlYou will see an error likeException in thread 'main' org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: &gt;&gt;&gt; Policy&#91;ref:null&#93; &lt;&lt;&lt; We should improve that and report a more details error.,2.8.0,2.8.2; 2.9.0,0,0,34,1,0,0,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/NoSuchBeanException.java;camel-core/src/main/java/org/apache/camel/model/TransactedDefinition.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/JavaDslTransactedNoTXManagerTest.java;,0,0
4356,Improvement,Resolved,Fixed,camel-ftp,Minor,Marco Crivellaro,2011/08/19 14:23:18 +0100,2011/08/26 14:03:43 +0100,Willem Jiang,2011/08/29 14:42:49 +0100,10.01355324,3.027152778,faster way of testing for file existence,when storing a file the ftp component checks if the file exists in the endpoint  this is done by listing the content of the destination folder and looping through all files listed. the list operation takes a long time when the destination folder contains hundreds of files. instead of listing for all files the component can simply list for the file it is interested on  this way the number of files contained in destination folder won't affect the time it takes the producer to process the exchange. I currently have a case where delivering to an endpoint is taking more than a minute because of this issue. Both ftp and sftp libraries used supports listing for a single file so the changes would be the following: FtpOperations.javapublic boolean existsFile(String name) throws GenericFileOperationFailedException { String[] names = client.listNames(name); if (names == null) { return false; } return (names.lenght &gt;= 1); } SftpOperations.javapublic boolean existsFile(String name) throws GenericFileOperationFailedException { Vector files = channel.ls(name); if (names == null) { return false; } return (names.size &gt;= 1); },2.8.0,2.8.2; 2.9.0,0,1,215,1,9,3,0,0,0,0,1,0,3,10,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileFastExistFailTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileFastExistFailTest.java;,0,0
4357,Improvement,Resolved,Fixed,camel-core,Major,Christian Schneider,2011/08/19 14:38:41 +0100,2011/08/19 14:38:41 +0100,Christian Schneider,2011/08/22 14:34:55 +0100,2.997384259,2.997384259,Move org.apache.camel.Main to org.apache.camel.main.Main,I am currently looking into the dependencies betwen packages in camel-core. The packages org.apache.camel and org.apache.camel.spi form the camel api.So I am trying to make them not depend on other packages from camel-core. One problem there is the starter class Main. It needs access to impl packages as it needs to start camel. So it should not live in org.apache.camel.I propose to move it to org.apache.camel.main. To not break anything right now I will create a deprecated class Main in org.apache.camel that extends the moved Main. We can remove the deprecated version in camel 3.0,2.8.0,2.9.0,0,0,95,1,4,2,0,0,0,0,0,0,4,13,camel-core/src/main/java/org/apache/camel/Main.java;camel-core/src/test/java/org/apache/camel/MainExample.java;camel-core/src/test/java/org/apache/camel/MainTest.java;camel-core/src/test/java/org/apache/camel/main/MainExample.java;camel-core/src/test/java/org/apache/camel/main/MainTest.java;camel-core/src/main/java/org/apache/camel/main/Main.java;camel-core/pom.xml;camel-core/src/main/java/org/apache/camel/main/package.html;camel-core/src/main/java/org/apache/camel/impl/MainSupport.java;camel-core/src/main/java/org/apache/camel/main/Main.java;camel-core/src/main/java/org/apache/camel/main/MainSupport.java;camel-core/src/test/java/org/apache/camel/impl/MainSupportTest.java;components/camel-guice/src/main/java/org/apache/camel/guice/Main.java;,0,0
4358,Improvement,Resolved,Fixed,camel-core,Major,Christian Schneider,2011/08/19 16:58:16 +0100,2011/08/19 16:58:16 +0100,Christian Schneider,2011/09/14 13:10:37 +0100,25.84190972,25.84190972,Refactoring of management code to remove cycles and clearly separate between API and impl,Currently the management code (org.apache.camel.management.*) contains a mix of implementation code and APIs. This leads to cycle in the management code as well as to bigger cycles involving all of camel-core.So I propose to do several changes: move interfaces and annotations that form the API to camel.spi.management. As these are probably not used by external components or user code no compatibility classes are created create new package camel.suppport for classes that implement API or SPI classes and are expected to be extended by many impl classes. classes in support may only access the camel API and SPI Move EventNotifierSupport and ServiceSupport to this package. Create deprecate dummys in the old locations to avoid breaking older code Move DefaultEventFactory from management to management.eventI will post a patch shortly for review,2.8.0,2.9.0,0,0,131,1,8,3,0,0,0,0,0,0,8,238,camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java;camel-core/src/main/java/org/apache/camel/impl/DefaultDebugger.java;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultInflightRepository.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPackageScanClassResolver.java;camel-core/src/main/java/org/apache/camel/impl/DefaultPollingConsumerPollStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultProducerTemplate.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRoute.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRouteNode.java;camel-core/src/main/java/org/apache/camel/impl/DefaultServicePool.java;camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;camel-core/src/main/java/org/apache/camel/impl/EventDrivenConsumerRoute.java;camel-core/src/main/java/org/apache/camel/impl/MainSupport.java;camel-core/src/main/java/org/apache/camel/impl/PollingConsumerSupport.java;camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java;camel-core/src/main/java/org/apache/camel/impl/RoutePolicySupport.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/impl/ThrottlingInflightRoutePolicy.java;camel-core/src/main/java/org/apache/camel/impl/converter/BaseTypeConverterRegistry.java;camel-core/src/main/java/org/apache/camel/management/DefaultEventFactory.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultStatistic.java;camel-core/src/main/java/org/apache/camel/management/DelegatePerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/EventNotifierSupport.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationInterceptStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/management/JmxNotificationBroadcasterAware.java;camel-core/src/main/java/org/apache/camel/management/JmxNotificationEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/LoggingEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/MBeanInfoAssembler.java;camel-core/src/main/java/org/apache/camel/management/ManagedAttribute.java;camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/ManagedOperation.java;camel-core/src/main/java/org/apache/camel/management/ManagedResource.java;camel-core/src/main/java/org/apache/camel/management/PerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/PublishEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/Statistic.java;camel-core/src/main/java/org/apache/camel/management/event/DefaultEventFactory.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBeanProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBrowsableEndpoint.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedComponent.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedConsumer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedConsumerCache.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedDelayer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpoint.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpointRegistry.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedErrorHandler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedInstance.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedPerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProducer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProducerCache.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRoute.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSendProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedService.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSuspendableRoute.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThreadPool.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThrottler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThrottlingInflightRoutePolicy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedTracer.java;camel-core/src/main/java/org/apache/camel/processor/BatchProcessor.java;camel-core/src/main/java/org/apache/camel/processor/CamelLogger.java;camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java;camel-core/src/main/java/org/apache/camel/processor/DefaultChannel.java;camel-core/src/main/java/org/apache/camel/processor/DelegateAsyncProcessor.java;camel-core/src/main/java/org/apache/camel/processor/DelegateProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Enricher.java;camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java;camel-core/src/main/java/org/apache/camel/processor/InterceptorToAsyncProcessorBridge.java;camel-core/src/main/java/org/apache/camel/processor/MarshalProcessor.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/OnCompletionProcessor.java;camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java;camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;camel-core/src/main/java/org/apache/camel/processor/RoutePolicyProcessor.java;camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/main/java/org/apache/camel/processor/StreamResequencer.java;camel-core/src/main/java/org/apache/camel/processor/ThreadsProcessor.java;camel-core/src/main/java/org/apache/camel/processor/Traceable.java;camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;camel-core/src/main/java/org/apache/camel/processor/UnmarshalProcessor.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/main/java/org/apache/camel/processor/aggregate/MemoryAggregationRepository.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/MemoryIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/processor/loadbalancer/LoadBalancerSupport.java;camel-core/src/main/java/org/apache/camel/spi/ManagementStrategy.java;camel-core/src/main/java/org/apache/camel/spi/management/JmxNotificationBroadcasterAware.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedAttribute.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedInstance.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedOperation.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedResource.java;camel-core/src/main/java/org/apache/camel/spi/management/PerformanceCounter.java;camel-core/src/main/java/org/apache/camel/spi/management/Statistic.java;camel-core/src/main/java/org/apache/camel/spi/management/package.html;camel-core/src/main/java/org/apache/camel/support/EventNotifierSupport.java;camel-core/src/main/java/org/apache/camel/support/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/support/package.html;camel-core/src/main/java/org/apache/camel/util/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/util/EventHelper.java;camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java;camel-core/src/test/java/org/apache/camel/impl/RouteSuspendResumeWarmUpTest.java;camel-core/src/test/java/org/apache/camel/impl/ServiceSupportTest.java;camel-core/src/test/java/org/apache/camel/management/AddEventNotifierTest.java;camel-core/src/test/java/org/apache/camel/management/CustomEndpoint.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierEventsTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierExchangeCompletedTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierExchangeSentTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierFailureHandledEventsTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierRedeliveryEventsTest.java;camel-core/src/test/java/org/apache/camel/management/EventNotifierServiceStoppingFailedEventTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomBeanTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomProcessorTest.java;camel-core/src/test/java/org/apache/camel/management/MultipleEventNotifierEventsTest.java;camel-core/src/test/java/org/apache/camel/management/RemoveEventNotifierTest.java;camel-core/src/test/java/org/apache/camel/processor/DataFormatServiceTest.java;camel-core/src/test/java/org/apache/camel/processor/MyLoggingSentEventNotifer.java;camel-core/src/test/java/org/apache/camel/processor/UnitOfWorkProducerTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncEndpointEventNotifierTest.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextPublisher.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiEventAdminNotifier.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/wsdl/Order.java;components/camel-hazelcast/src/main/java/org/apache/camel/processor/idempotent/hazelcast/HazelcastIdempotentRepository.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jpa/src/main/java/org/apache/camel/processor/idempotent/jpa/JpaMessageIdRepository.java;components/camel-nagios/src/main/java/org/apache/camel/component/nagios/NagiosEventNotifier.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjConsumerTest.java;components/camel-routebox/src/main/java/org/apache/camel/component/routebox/RouteboxServiceSupport.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/SpringManagementMBeanAssembler.java;components/camel-spring/src/test/java/org/apache/camel/spring/StartAndStopEventNotifier.java;components/camel-spring/src/test/java/org/apache/camel/spring/management/MyEventNotifier.java;components/camel-sql/src/main/java/org/apache/camel/processor/idempotent/jdbc/JdbcMessageIdRepository.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java;components/camel-sql/src/main/java/org/apache/camel/processor/idempotent/jdbc/JdbcMessageIdRepository.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/ActivityMonitorEngine.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/JpaBamProcessor.java;components/camel-bam/src/main/java/org/apache/camel/bam/rules/ActivityRules.java;components/camel-bam/src/main/java/org/apache/camel/bam/rules/ProcessRules.java;components/camel-bam/src/main/java/org/apache/camel/bam/rules/TemporalRule.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheManagerFactory.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerThrowExceptionOnLoginFailedTest.java;components/camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBAggregationRepository.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzEndpoint.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java;components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregationRepository.java;components/camel-web/src/main/java/org/apache/camel/web/resources/CamelContextResource.java;camel-core/src/main/java/org/apache/camel/api/management/JmxNotificationBroadcasterAware.java;camel-core/src/main/java/org/apache/camel/api/management/ManagedAttribute.java;camel-core/src/main/java/org/apache/camel/api/management/ManagedInstance.java;camel-core/src/main/java/org/apache/camel/api/management/ManagedOperation.java;camel-core/src/main/java/org/apache/camel/api/management/ManagedResource.java;camel-core/src/main/java/org/apache/camel/api/management/PerformanceCounter.java;camel-core/src/main/java/org/apache/camel/api/management/package.html;camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/management/DelegatePerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationInterceptStrategy.java;camel-core/src/main/java/org/apache/camel/management/InstrumentationProcessor.java;camel-core/src/main/java/org/apache/camel/management/JmxNotificationEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/MBeanInfoAssembler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBeanProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBrowsableEndpoint.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedComponent.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedConsumer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedConsumerCache.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedDelayer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpoint.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpointRegistry.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedErrorHandler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEventNotifier.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedPerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProducer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedProducerCache.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRoute.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSendProcessor.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedService.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSuspendableRoute.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThreadPool.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThrottler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedThrottlingInflightRoutePolicy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedTracer.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/FileIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/processor/idempotent/MemoryIdempotentRepository.java;camel-core/src/main/java/org/apache/camel/spi/management/JmxNotificationBroadcasterAware.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedAttribute.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedInstance.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedOperation.java;camel-core/src/main/java/org/apache/camel/spi/management/ManagedResource.java;camel-core/src/main/java/org/apache/camel/spi/management/PerformanceCounter.java;camel-core/src/main/java/org/apache/camel/spi/management/package.html;camel-core/src/test/java/org/apache/camel/management/CustomEndpoint.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomBeanTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedCustomProcessorTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/ZooKeeperEndpoint.java;components/camel-jpa/src/main/java/org/apache/camel/processor/idempotent/jpa/JpaMessageIdRepository.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/SpringManagementMBeanAssembler.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/DefaultStatistic.java;camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedPerformanceCounter.java;camel-core/src/main/java/org/apache/camel/management/mbean/Statistic.java;camel-core/src/main/java/org/apache/camel/spi/ManagementStrategy.java;camel-core/src/main/java/org/apache/camel/spi/management/Statistic.java;,0,0
4360,Improvement,Resolved,Fixed,camel-test,Minor,Claus Ibsen,2011/08/20 09:35:42 +0100,2011/08/20 09:35:42 +0100,Claus Ibsen,2011/08/20 09:37:02 +0100,0.000926,0.000926,Camel test - Debugger should be explicit enabled if end user want to leverage it,The debugger adds a little overhead and silently enables tracer as well. We should have the end user to explicit enable the debugger if he need to use it from his unit tests.,2.8.0,2.9.0,0,0,33,1,0,0,0,0,0,0,0,0,1,9,components/camel-test/src/main/java/org/apache/camel/test/CamelTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugJUnit4Test.java;components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugNoLazyTypeConverterTest.java;components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugTest.java;components/camel-testng/src/main/java/org/apache/camel/testng/CamelTestSupport.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugNoLazyTypeConverterTest.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugTest.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugTestNGTest.java;,0,0
4362,Bug,Closed,Fixed,camel-jpa,Major,David J. M. Karlsen,2011/08/21 18:02:19 +0100,2011/11/22 23:57:01 +0100,Christian M?ller,2011/11/23 00:22:03 +0100,93.2637037,0.017384259,Bug in parsing of JPA uri,According to http://camel.apache.org/jpa.html entityName is optional.When configuring with the following uri (e.g. w/o entityName):&lt;camel:endpoint id='jpaEndpoint' uri='jpa:?persistenceUnit=journalPersistenceUnit&amp;usePersist=true' /&gt;the following warning will be displayed2011-08-21 18:57:11 381 &#91;main&#93;[][][][][][][] WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttruedue to the incorrect if test in the JpaComponent:// lets interpret the next string as a class if (path != null) { // provide the class loader of this component to work in OSGi environments as camel-jpa must be able // to resolve the entity classes Class&lt;?&gt; type = getCamelContext().getClassResolver().resolveClass(path  JpaComponent.class.getClassLoader()); if (type != null) { endpoint.setEntityType(type); } }path is not null  but it is the rest of the string and not the entityname. e.g it should not start with ? if it is an entityname - else it is the options.,2.8.0,2.8.4; 2.9.0,0,0,132,2,4,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/test/java/org/apache/camel/impl/DefaultComponentReferencePropertiesTest.java;components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaComponentTest.java;,0,0
4365,Bug,Resolved,Fixed,camel-freemarker,Minor,Claus Ibsen,2011/08/22 15:14:12 +0100,2011/08/22 15:14:12 +0100,Claus Ibsen,2011/08/22 15:19:41 +0100,0.00380787,0.00380787,Freemarker - Loading template from file system fails,This only affects Camel 2.9.,2.9.0,2.9.0,0,0,5,1,0,0,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/ResourceHelper.java;components/camel-freemarker/src/test/java/org/apache/camel/component/freemarker/FreemarkerFileLetterTest.java;components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityFileLetterTest.java;,0,0
4367,Bug,Resolved,Fixed,camel-netty,Minor,Szabolcs Berecz,2011/08/22 22:49:59 +0100,2011/08/26 13:56:45 +0100,Willem Jiang,2011/08/26 15:03:04 +0100,3.675752315,0.046053241,Camel-netty option 'encoder' and 'decoder' does not work,Contrary to the documentation  the 'encoder' and 'decoder' option is unusable as it's value is taken as-is instead of resolving the references using the registry.This bug was introduced in the revision 960621 as part of CAMEL-2907.Patch can be found at https://github.com/szabolcsberecz/camel/commit/b3bcc8dd284575c931048ea410c44577474e25dd,2.4.0; 2.5.0; 2.6.0; 2.7.0; 2.7.1; 2.7.2; 2.7.3; 2.8.0,2.8.1; 2.9.0,0,0,54,1,6,3,0,1,0,0,0,0,1,2,components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConfiguration.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettySingleCodecTest.java;,0,0
4370,Bug,Resolved,Fixed,camel-core,Major,Sergey Zhemzhitsky,2011/08/23 07:17:09 +0100,2011/08/24 08:54:13 +0100,Claus Ibsen,2011/08/24 09:49:18 +0100,1.105659722,0.038252315,It's hardly possible to use all expression of the Simple language to create file names in the file component,Sometimes it can be necessary to use custom headers to create a file name.For example  I declare my file endpoint in the following manner:&lt;route id='fileReader'&gt; &lt;from uri='file://rootFolder?move=.backup&amp;amp;moveFailed=.error/${header.CustomHeader}' /&gt; &lt;to uri='file://out'/&gt;&lt;/route&gt;The header 'CustomHeader' cannot be read because of the following snippets of code in the org.apache.camel.component.file.GenericFile/** * Bind this GenericFile to an Exchange */public void bindToExchange(Exchange exchange) { exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE  this); GenericFileMessage&lt;T&gt; in = new GenericFileMessage&lt;T&gt;(this); exchange.setIn(in); populateHeaders(in);}/** * Populates the {@link GenericFileMessage} relevant headers * * @param message the message to populate with headers */public void populateHeaders(GenericFileMessage&lt;T&gt; message) { if (message != null) { message.setHeader(Exchange.FILE_NAME_ONLY  getFileNameOnly()); message.setHeader(Exchange.FILE_NAME  getFileName()); message.setHeader('CamelFileAbsolute'  isAbsolute()); message.setHeader('CamelFileAbsolutePath'  getAbsoluteFilePath()); if (isAbsolute()) { message.setHeader(Exchange.FILE_PATH  getAbsoluteFilePath()); } else { // we must normalize path according to protocol if we build our own paths String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath()); message.setHeader(Exchange.FILE_PATH  path); } message.setHeader('CamelFileRelativePath'  getRelativeFilePath()); message.setHeader(Exchange.FILE_PARENT  getParent()); if (getFileLength() &gt;= 0) { message.setHeader('CamelFileLength'  getFileLength()); } if (getLastModified() &gt; 0) { message.setHeader(Exchange.FILE_LAST_MODIFIED  new Date(getLastModified())); } }}As you can see a new 'in' message is created and not all the headers from the original message are copied to it.,2.7.1,2.8.1; 2.9.0,0,0,217,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java;camel-core/src/test/java/org/apache/camel/component/file/FromFileMoveDoneCustomHeaderTest.java;,0,0
4374,Improvement,Resolved,Fixed,camel-test,Major,Andreas Kuhtz,2011/08/24 12:19:30 +0100,2011/08/24 16:05:13 +0100,Willem Jiang,2011/08/25 04:42:36 +0100,0.682708333,0.525960648,The debugger doesn't work in the CamelSpringTestSupport with route defined in XML,The debugger doesn't work in the CamelSpringTestSupport with route defined in XML. This issue is related to CAMEL-4368 (closed and I cannot re-open).I've created a patch with 2 new tests that show the problem and a solution (check the doSetup() method in the tests). However I think this could be improved by moving the SpringCamelContext.setNoStart(true); to CamelSpringTestSupport).,2.8.0,2.8.2; 2.9.0,0,0,67,1,7,2,0,0,0,0,0,0,1,8,components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugSpringCamelContextTest.java;components/camel-test/src/test/resources/org/apache/camel/test/patterns/applicationContext.xml;components/camel-testng/pom.xml;components/camel-testng/src/main/java/org/apache/camel/testng/CamelSpringTestSupport.java;components/camel-testng/src/main/java/org/apache/camel/testng/CamelTestSupport.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugSpringCamelContextTest.java;components/camel-testng/src/test/java/org/apache/camel/testng/patterns/DebugSpringTest.java;components/camel-testng/src/test/resources/org/apache/camel/testng/patterns/applicationContext.xml;,0,0
4382,Improvement,Resolved,Fixed,,Major,Jonathan Anstey,2011/08/25 17:48:22 +0100,2011/08/25 17:48:22 +0100,Jonathan Anstey,2011/08/25 18:29:31 +0100,0.028576389,0.028576389,add support to set the cipher used for SFTP,Right now a user has to manually configure a JSch instance to set the cipher used. We should have an option for that.,2.8.0,2.8.2; 2.9.0,0,0,23,1,2,1,0,0,0,1,0,0,1,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConfiguration.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSetCipherTest.java;,0,0
4388,Bug,Resolved,Fixed,camel-core,Major,Sergey Zhemzhitsky,2011/08/27 11:52:57 +0100,2011/08/27 17:01:17 +0100,Claus Ibsen,2011/08/27 17:31:40 +0100,0.235219907,0.021099537,Exeptions cannot be propagated to the parent route when using LogEIP,Here is unit test that demonstrates the problem.For the unit test pass successfully it's necessary to delete LogEIP from the route.package org.apache.camel.impl;import org.apache.camel.Exchange;import org.apache.camel.Processor;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class PropagateExceptionTest extends CamelTestSupport { @Test public void failure() throws Exception { getMockEndpoint('mock:handleFailure').whenAnyExchangeReceived(new Processor() { @Override public void process(Exchange exchange) throws Exception { throw new RuntimeException('TEST EXCEPTION'); } }); getMockEndpoint('mock:exceptionFailure').expectedMessageCount(1); sendBody('direct:startFailure'  'Hello World'); assertMockEndpointsSatisfied(); } @Test public void success() throws Exception { getMockEndpoint('mock:handleSuccess').whenAnyExchangeReceived(new Processor() { @Override public void process(Exchange exchange) throws Exception { throw new RuntimeException('TEST EXCEPTION'); } }); getMockEndpoint('mock:exceptionSuccess').expectedMessageCount(1); sendBody('direct:startSuccess'  'Hello World'); assertMockEndpointsSatisfied(); } @Override protected RouteBuilder[] createRouteBuilders() throws Exception { return new RouteBuilder[] { new RouteBuilder() { public void configure() throws Exception { from('direct:startFailure') .onException(Throwable.class) .to('mock:exceptionFailure') .end() .to('direct:handleFailure') .to('mock:resultFailure'); from('direct:handleFailure') .errorHandler(noErrorHandler()) .log('FAULTY LOG') .to('mock:handleFailure'); } }  new RouteBuilder() { public void configure() throws Exception { from('direct:startSuccess') .onException(Throwable.class) .to('mock:exceptionSuccess') .end() .to('direct:handleSuccess') .to('mock:resultSuccess'); from('direct:handleSuccess') .errorHandler(noErrorHandler()) .to('mock:handleSuccess'); } } }; }},2.7.1,2.8.1; 2.9.0,0,0,209,1,2,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/LogProcessor.java;camel-core/src/test/java/org/apache/camel/processor/LogEipPropagateExceptionTest.java;,0,0
4408,Improvement,Resolved,Fixed,camel-soap,Major,Andreas Kuhtz,2011/09/02 15:13:00 +0100,2011/09/02 17:32:54 +0100,Claus Ibsen,2011/09/02 18:38:13 +0100,0.142511574,0.045358796,Fix OSGi-exports of camel-soap,The OSGi exports of camel-soap is not correct. If I run exports in karaf I get the following output.  karaf@localhost&gt; exports 135 ID Packages 135 org.apache.camel.dataformat.soap; version='0.0.0' 135 org.apache.camel.dataformat.soap.name; version='0.0.0' 135 org.xmlsoap.schemas.soap.envelope; version='2.8.1.SNAPSHOT' I think org.apache.camel.dataformat.soap and org.apache.camel.dataformat.soap.name should be exported with version='2.8.1.SNAPSHOT' ???? (The same issue is on trunk).,2.8.0,2.8.1; 2.9.0,0,0,61,1,9,2,0,0,0,0,0,0,1,2,components/camel-rss/pom.xml;components/camel-soap/pom.xml;,0,0
4410,Improvement,Resolved,Fixed,camel-servlet,Minor,Babak Vahdat,2011/09/03 14:09:31 +0100,2011/09/04 08:46:42 +0100,Willem Jiang,2011/09/04 15:47:31 +0100,1.068055556,0.292233796,The URI of the ServletEndpoint exposed to the JMX is not accurate,As an example a ServletEndpoint with the URI 'servlet:///test?matchOnUriPrefix=true&amp;servletName=test' is exposed as '/test' on the JMX-MBeanServer! For details see:http://camel.465427.n5.nabble.com/backslashes-on-Endpoint-URI-by-JConsole-td4757427.html,2.8.0,2.8.1; 2.9.0,0,0,22,1,6,2,0,0,0,0,0,0,4,6,components/camel-servlet/src/test/java/org/apache/camel/component/servlet/ExposedServletEndpointURIToJMXTest.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/http/GHttpEndpoint.java;components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java;components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletEndpoint.java;components/camel-servlet/src/test/java/org/apache/camel/component/servlet/ExposedServletEndpointURIToJMXTest.java;components/camel-gae/src/main/java/org/apache/camel/component/gae/http/GHttpEndpoint.java;,0,0
4414,Improvement,Resolved,Fixed,camel-core,Major,Christian Schneider,2011/09/05 09:18:41 +0100,2011/09/05 09:18:41 +0100,Christian Schneider,2011/09/05 14:43:11 +0100,0.225347222,0.225347222,CamelLogger should not be a Processor and a log class at the same time and it should not have ServiceSupport,CamelLogger currently does too many things.1. It is a log class that stores a log level and a slf4j logger. It suppports some methods for logging with the set level2. It is a processor for logging exchanges3. It extends ServiceSupport even though it has no services (is apparently needed fro ThroughputLoggerSo what I propose is: Leave the current class as is but mark as @Deprecated Introduce a new CamelLogger that only supports 1. Introduce a CamelLogProcessor in processor that only supports 2. Make ThroughputLogger not extend CamelLogger but instead delegate to the new CamelLogger,2.8.0,2.9.0,0,0,96,1,0,0,0,0,0,0,1,0,3,42,camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeFormatter.java;camel-core/src/main/java/org/apache/camel/processor/CamelLogProcessor.java;camel-core/src/main/java/org/apache/camel/processor/CamelLogger.java;camel-core/pom.xml;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/builder/LoggingErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetConsumer.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/component/log/LogComponent.java;camel-core/src/main/java/org/apache/camel/component/log/LogEndpoint.java;camel-core/src/main/java/org/apache/camel/component/log/LogProducer.java;camel-core/src/main/java/org/apache/camel/component/mock/MockComponent.java;camel-core/src/main/java/org/apache/camel/impl/LoggingExceptionHandler.java;camel-core/src/main/java/org/apache/camel/impl/ThrottlingInflightRoutePolicy.java;camel-core/src/main/java/org/apache/camel/model/LogDefinition.java;camel-core/src/main/java/org/apache/camel/processor/CamelLogProcessor.java;camel-core/src/main/java/org/apache/camel/processor/CamelLogger.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/DefaultErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/LogProcessor.java;camel-core/src/main/java/org/apache/camel/processor/LoggingErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/ThroughputLogger.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/main/java/org/apache/camel/util/CamelLogger.java;camel-core/src/test/java/org/apache/camel/component/log/LogEndpointTest.java;camel-core/src/test/java/org/apache/camel/processor/ThroughPutLoggerTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaConsumer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ServerChannelHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;components/camel-spring/src/test/resources/org/apache/camel/component/log/SpringLogTest-context.xml;parent/pom.xml;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/component/log/LogProducer.java;camel-core/src/main/java/org/apache/camel/util/CamelLogger.java;camel-core/src/test/java/org/apache/camel/processor/ThroughPutLoggerTest.java;,0,0
4418,Improvement,Resolved,Fixed,camel-hazelcast,Major,Ioannis Canellos,2011/09/06 14:24:54 +0100,2011/10/24 07:58:20 +0100,Ioannis Canellos,2011/10/24 08:14:10 +0100,47.7425463,0.01099537,camel-hazelcast should allow the user to provide an existing instance to the component,The camel-hazelcast component currently is using Hazelcast default instance. It should allow the user to specify an existing HazelcastInstance and fall back to the default instance if none is provided. Finally  in the case that the component is using the default instance it should shut it down when the component is stopped.,2.7.0; 2.8.0,2.9.0,0,0,53,1,4,2,0,1,0,0,1,0,1,36,components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/HazelcastComponent.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/HazelcastDefaultConsumer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/HazelcastDefaultEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/atomicnumber/HazelcastAtomicnumberEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/atomicnumber/HazelcastAtomicnumberProducer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/instance/HazelcastInstanceConsumer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/instance/HazelcastInstanceEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/list/HazelcastListConsumer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/list/HazelcastListEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/list/HazelcastListProducer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/map/HazelcastMapConsumer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/map/HazelcastMapEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/map/HazelcastMapProducer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/multimap/HazelcastMultimapConsumer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/multimap/HazelcastMultimapEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/multimap/HazelcastMultimapProducer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/queue/HazelcastQueueConsumer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/queue/HazelcastQueueEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/queue/HazelcastQueueProducer.java;components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaEndpoint.java;components/camel-hazelcast/src/main/java/org/apache/camel/processor/idempotent/hazelcast/HazelcastIdempotentRepository.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastInstanceConsumerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastListConsumerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastListProducerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastMapConsumerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastMapProducerForSpringTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastMapProducerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastMultimapConsumerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastMultimapProducerForSpringTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastMultimapProducerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastQueueConsumerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastQueueProducerTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastSedaConfigurationTest.java;components/camel-hazelcast/src/test/java/org/apache/camel/component/hazelcast/HazelcastSedaConfigurationTest.java.orig;components/camel-hazelcast/src/test/java/org/apache/camel/processor/idempotent/hazelcast/HazelcastIdempotentRepositoryTest.java;components/camel-hazelcast/src/test/resources/META-INF/spring/test-camel-context-map.xml;,0,0
4439,Bug,Resolved,Fixed,,Minor,Gert Vanthienen,2011/09/12 08:01:02 +0100,2011/09/12 08:01:02 +0100,Gert Vanthienen,2011/09/12 08:20:31 +0100,0.013530093,0.013530093,Error in camel-restlet feature definition,The current contents of the camel-features.xml file reads:&lt;feature name='camel-restlet' version='2.7.1-fuse-00-43' resolver='(obr)'&gt; &lt;feature version='2.7.1-fuse-00-43'&gt;camel-core&lt;/feature&gt; &lt;bundle dependency='true'&gt;mvn:org.apache.camel/camel-restlet/2.7.1-fuse-00-43&lt;/bundle&gt; &lt;bundle&gt;mvn:http://maven.restlet.org!org.restlet.jse/org.restlet/2.0.5&lt;/bundle&gt;&lt;/feature&gt;It actually should read http://fernandoribeiro.eti.br/2011/09/12/bug-in-fuse-4-4/ (Thanks to Fernando Ribeiro for the heads up!),2.8.0,2.8.2; 2.9.0,0,0,41,1,2,2,0,0,0,0,0,0,1,1,platforms/karaf/features/src/main/resources/features.xml;,0,0
4440,Improvement,Resolved,Fixed,,Minor,Claus Ibsen,2011/09/12 08:49:34 +0100,2011/09/13 09:21:19 +0100,Ioannis Canellos,2011/09/13 09:21:19 +0100,1.022048611,0,camel-csv - Make it consistent what unmarshal returns as object  so its the same for 1 or more rows,See nabblehttp://camel.465427.n5.nabble.com/unmarshal-CsvDataFormat-different-behavior-for-one-or-multiples-lines-tp4778814p4778814.htmlThe camel-csv should always return the same List&lt;List&gt;&gt; regardless if there is 0  1 or 2+ rows returned. That makes it consistent and easier for end users who need to work with this data.,2.8.0,2.9.0,0,0,38,1,2,2,0,0,0,0,0,0,1,2,components/camel-csv/src/main/java/org/apache/camel/dataformat/csv/CsvDataFormat.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvUnmarshalPipeDelimiterTest.java;,0,0
4444,Bug,Resolved,Fixed,camel-ftp,Major,Olivier Cheslet,2011/09/12 14:39:47 +0100,2011/09/13 09:25:01 +0100,Claus Ibsen,2011/09/13 12:34:29 +0100,0.912986111,0.131574074,Wrong slash in FTP component for doneFile,I tried to use the doneFile with FTP component.When I used it to my FTP on my windows machine everything goes fine.When I tried to act the same with a FTP host on a Linux machine  I got an issue.I sniff the packet to see what goes wrong and I see this :the doneFile DELE public/Test/in/myFile.txt the file to processDELE public/Test/in/myFile.xmlAfter a Quick look on the code:org.apache.camel.component.file.GenericFileEndpoint line 682 String answer = pattern; if (ObjectHelper.isNotEmpty(path) &amp;&amp; ObjectHelper.isNotEmpty(pattern)) { // done file must always be in same directory as the real file name answer = path + File.separator + pattern; } if (getConfiguration().needToNormalize()) { // must normalize path to cater for Windows and other OS answer = FileUtil.normalizePath(answer); }We use the 'File.Separator' but in this case  it should get a kind of 'FTP.Separator' or the FTP component should return true to the needToNormalize method and change the narmalizePath method to manage this case.,2.8.0,2.8.2; 2.9.0,0,0,152,1,5,2,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;,0,0
4446,Bug,Resolved,Fixed,camel-bindy,Minor,Claus Ibsen,2011/09/13 17:13:37 +0100,2011/09/13 17:13:37 +0100,Claus Ibsen,2011/09/13 17:17:34 +0100,0.002743056,0.002743056,camel-bindy - Marshaling using CSV will insert wrong char separator if using an escaped separator char such as a pipe,When using bindy in CSV format with a separator in the model as '|' to denote a pipe character  then it does not work consistent for marshal and unmarshal. In marshal it will insert / as separator  but it should use | instead.See nabblehttp://camel.465427.n5.nabble.com/bindy-different-behavior-between-marshal-and-unmarshal-with-pipe-separator-tp4798488p4798488.html,2.8.0,2.8.2; 2.9.0,0,0,49,1,0,0,0,0,0,0,0,0,1,2,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/util/Converter.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyPipeDelimiterTest.java;,0,0
4449,Bug,Resolved,Fixed,camel-core,Major,Vadim TSes'ko,2011/09/14 10:34:53 +0100,2011/09/17 12:24:44 +0100,Claus Ibsen,2011/09/17 12:24:44 +0100,3.076284722,0,NullPointerException when unmarshalling using serialization data format,Spring configuration: &lt;!-- A custom CamelContext --&gt; &lt;camel:camelContext id='camel'&gt; &lt;!-- JSON data format marshalling --&gt; &lt;camel:dataFormats&gt; &lt;camel:serialization id='serialization'/&gt; &lt;/camel:dataFormats&gt; &lt;!-- RawOffer input route --&gt; &lt;camel:route&gt; &lt;camel:from uri='kestrel://etl01f/feeds'/&gt; &lt;camel:unmarshal ref='serialization'/&gt; &lt;camel:to uri='bean:shard?method=consume'/&gt; &lt;/camel:route&gt; &lt;/camel:camelContext&gt;Exception:run: [java] log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext). [java] log4j:WARN Please initialize the log4j system properly. [java] log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. [java] 13:28:07.587 [main] INFO o.a.c.s.h.CamelNamespaceHandler - OSGi environment not detected. [java] 13:28:09.028 [main] INFO o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) is starting [java] 13:28:09.028 [main] INFO o.a.camel.spring.SpringCamelContext - JMX enabled. Using ManagedManagementStrategy. [java] 13:28:09.415 [main] INFO o.a.c.i.c.AnnotationTypeConverterLoader - Found 3 packages with 14 @Converter classes to load [java] 13:28:09.489 [main] INFO o.a.c.i.c.DefaultTypeConverter - Loaded 153 core type converters (total 153 type converters) [java] 13:28:09.528 [main] INFO o.a.c.i.c.DefaultTypeConverter - Loaded additional 0 type converters (total 153 type converters) in 0.003 seconds [java] 13:28:09.730 [main] INFO o.a.c.c.kestrel.KestrelComponent - Creating endpoint for queue 'feeds' on etl01f  parameters={} [java] 13:28:09.967 [main] INFO o.a.c.c.kestrel.KestrelComponent - Creating MemcachedClient for etl01f/feeds [java] 2011-09-14 13:28:10.073 INFO net.spy.memcached.MemcachedConnection: Added {QA sa=etl01f/95.108.229.218:22133  #Rops=0  #Wops=0  #iq=0  topRop=null  topWop=null  toWrite=0  interested=0} to connect queue [java] 2011-09-14 13:28:10.084 INFO net.spy.memcached.MemcachedConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@711b50a1 [java] 13:28:10.293 [main] INFO o.a.c.c.kestrel.KestrelConsumer - Starting consumer for kestrel://etl01f/feeds [java] 13:28:10.302 [main] INFO o.a.camel.spring.SpringCamelContext - Route: route1 started and consuming from: Endpoint[kestrel://etl01f/feeds] [java] 13:28:10.318 [main] INFO o.a.camel.spring.SpringCamelContext - Total 1 routes  of which 1 is started. [java] 13:28:10.318 [main] INFO o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) started in 1.291 seconds [java] 13:28:12.858 [Camel (camel) thread #0 - Poller-kestrel://etl01f/feeds] ERROR o.a.c.processor.DefaultErrorHandler - Failed delivery for exchangeId: ID-incubos-osx-local-51787-1315992488896-0-1. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException [java] java.lang.NullPointerException: null [java] at org.apache.camel.impl.SerializationDataFormat.unmarshal(SerializationDataFormat.java:57) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:56) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.8.0.jar:2.8.0] [java] at org.apache.camel.component.kestrel.KestrelConsumer$Poller.run(KestrelConsumer.java:230) [camel-kestrel-2.8.0.jar:2.8.0] [java] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_26] [java] at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_26] [java] at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_26] [java] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26] [java] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26] [java] at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26]It seems that ExchangeHelper.convertToType() method returned null because camelContext.getTypeConverter() returned null.,2.8.0,2.8.2; 2.9.0,0,0,460,1,5,3,0,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/SerializationDataFormat.java;camel-core/src/test/java/org/apache/camel/processor/DataFormatTest.java;,0,0
4457,Improvement,Resolved,Fixed,camel-core,Major,Christian Schneider,2011/09/16 11:03:50 +0100,2011/09/16 11:03:50 +0100,Christian Schneider,2011/09/23 14:10:33 +0100,7.129664352,7.129664352,Resolve cycle between language.simple and language.simple.ast,Currently we have a big dpendency cycle between language.simple and language.simple.ast.As simple creates the ast this dependency is necessary. In the other direction ast needs types and exceptions that are inside simple.So I propose to nove these classes into a package simple.types. As I think these types and exceptions are not used outside the camel-core I will not create compatibility measures.,2.8.0,2.9.0,0,0,61,1,0,0,1,0,0,0,0,0,1,41,camel-core/src/main/java/org/apache/camel/language/simple/BaseSimpleParser.java;camel-core/src/main/java/org/apache/camel/language/simple/BinaryOperatorType.java;camel-core/src/main/java/org/apache/camel/language/simple/LogicalOperatorType.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleBackwardsCompatibleParser.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleIllegalSyntaxException.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleParserException.java;camel-core/src/main/java/org/apache/camel/language/simple/SimplePredicateParser.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleToken.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleTokenType.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleTokenizer.java;camel-core/src/main/java/org/apache/camel/language/simple/TokenType.java;camel-core/src/main/java/org/apache/camel/language/simple/UnaryOperatorType.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/BaseSimpleNode.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/BinaryExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/CompositeNodes.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/DoubleQuoteEnd.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/DoubleQuoteStart.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/LiteralExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/LogicalExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/NullExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionEnd.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionStart.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleNode.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SingleQuoteEnd.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SingleQuoteStart.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/UnaryExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/types/BinaryOperatorType.java;camel-core/src/main/java/org/apache/camel/language/simple/types/LogicalOperatorType.java;camel-core/src/main/java/org/apache/camel/language/simple/types/SimpleIllegalSyntaxException.java;camel-core/src/main/java/org/apache/camel/language/simple/types/SimpleParserException.java;camel-core/src/main/java/org/apache/camel/language/simple/types/SimpleToken.java;camel-core/src/main/java/org/apache/camel/language/simple/types/SimpleTokenType.java;camel-core/src/main/java/org/apache/camel/language/simple/types/TokenType.java;camel-core/src/main/java/org/apache/camel/language/simple/types/UnaryOperatorType.java;camel-core/src/main/java/org/apache/camel/language/simple/types/package.html;camel-core/src/test/java/org/apache/camel/language/simple/SimpleOperatorTest.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleParserExpressionInvalidTest.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleParserPredicateInvalidTest.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;,0,0
4473,Bug,Resolved,Fixed,camel-cxf,Major,Sergey Zhemzhitsky,2011/09/21 13:54:54 +0100,2011/09/21 15:18:42 +0100,Willem Jiang,2011/09/22 08:05:47 +0100,0.75755787,0.699363426,Unable to use cxf:binding configuration for the endpoint,Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'service': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'bindingConfig' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'bindingConfig' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ... 30 moreCaused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'bindingConfig' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'bindingConfig' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1358) ... 44 more,2.8.1,2.8.2; 2.9.0,0,0,131,1,3,2,1,0,0,0,0,0,1,4,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeans.xml;,0,0
4474,Bug,Closed,Fixed,camel-core,Major,David J. M. Karlsen,2011/09/21 14:04:31 +0100,2011/09/23 08:23:33 +0100,Taariq Levack,2011/09/23 08:51:48 +0100,1.782835648,0.019618056,file: consumer does not create directory,According to http://camel.apache.org/file2.html autoCreate is true by default and should for a consumer create the directory.autoCreate true Automatically create missing directories in the file's pathname. For the file consumer  that means creating the starting directory. For the file producer  it means the directory the files should be written to. This does not happen and thus a route startup would fail.,2.8.1,2.7.4; 2.8.2; 2.9.0,0,1,69,1,12,3,1,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerAutoCreateDirectoryTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerEndpointNotDirectoryTest.java;,0,0
4478,Bug,Closed,Fixed,camel-printer,Major,Denis Robert,2011/09/22 13:17:56 +0100,2011/10/01 09:49:17 +0100,Claus Ibsen,2011/10/01 09:49:17 +0100,8.855104167,0,Because local PrintService objects on Windows have a name which is not their UNC path  the PrinterProducer can never find them.,In org.apache.camel.component.printer.PrinterProducer  the line:setPrinter('////' + config.getHostname() + '' + config.getPrintername());reconstructs a UNC path which is expected to match the name of a PrintService on the system. For local printers on Windows  the name of the PrintService is simply the name of the printer without the host and any backslashes  so the PrinterProducer is never able to find them.So when config.getHostname() is 'localhost'  at least on Windows  the line should be simply:setPrinter(config.getPrintername())so that we'd have code like:if ('localhost'.equalsIgnoreCase(config.getHostname())) { setPrinter(config.getPrintername());} else { setPrinter('////' + config.getHostname() + '//' + config.getPrintername());}This can only work if issue CAMEL-4477 about the error in parseURI() in PrinterConfiguration is also fixed.,2.8.1,2.7.4; 2.8.2; 2.9.0,0,0,124,1,1,1,1,0,0,0,0,0,1,1,components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java;,0,0
4486,Bug,Resolved,Fixed,camel-core,Major,Sergey Zhemzhitsky,2011/09/25 01:12:45 +0100,2011/09/25 08:57:57 +0100,Claus Ibsen,2011/09/25 18:39:20 +0100,0.726793981,0.403738426,Exceptions are not propagated to the parent route when endpoint cannot be resolved in the RoutingSlip EIP,Here is the unit test to reproduce the issuepackage org.test;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class RecipientListTest extends CamelTestSupport { public static class Router { public String findEndpoint() { return 'unresolved://endpoint'; } } @Test public void recipientList() throws Exception { MockEndpoint endpoint = getMockEndpoint('mock://error'); endpoint.expectedMessageCount(1); sendBody('direct://parent'  'Hello World!'); assertMockEndpointsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { @Override public void configure() throws Exception { from('direct://parent') .onException(Throwable.class) .to('mock://error') .end() .to('direct://child'); from('direct://child') .errorHandler(noErrorHandler()) .routingSlip(bean(Router.class)); } }; }},2.8.1,2.8.2; 2.9.0,0,0,120,1,1,1,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/test/java/org/apache/camel/processor/RoutingSlipNoSuchEndpointExceptionTest.java;,0,0
4492,Improvement,Resolved,Fixed,camel-core,Major,David J. M. Karlsen,2011/09/27 10:56:57 +0100,2011/09/29 07:32:32 +0100,Claus Ibsen,2011/09/29 09:30:52 +0100,1.940219907,0.082175926,Be able to check classtype through simple language,See http://camel.465427.n5.nabble.com/How-do-I-access-the-message-class-name-from-Simple-td4842269.html for the full context.In short be able to access Object.getClass() for usage in Camel's simple language.,2.8.1,2.8.2; 2.9.0,0,1,21,1,2,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;,0,0
4500,Improvement,Resolved,Fixed,camel-core,Major,Christian Schneider,2011/09/29 09:48:51 +0100,2011/09/29 09:48:51 +0100,Christian Schneider,2011/10/11 15:42:20 +0100,12.24547454,12.24547454,Add a Tracer that uses JMX Notifications and provides full details of Camel Messages,We should create a base for Camel Trace toolings so these can trace the full message content.The trace event should contain: all Exchange Data including properties all Message Data including headersThere should be a setting to truncate the message body as it can be quite long and often in tracing not all details are needed.One question is if this tracing should be combined with the current Notifications or should be a separate thing.,2.8.1,2.8.2; 2.9.0,0,0,75,1,3,2,0,0,0,0,0,0,7,25,camel-core/src/main/java/org/apache/camel/management/mbean/JMXNotificationTraceEventHandler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedTracer.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/DispatchingTraceEventHandler.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorFactoryCreatesHandlerTest.java;camel-core/src/main/java/org/apache/camel/management/mbean/JMXNotificationTraceEventHandler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedTracer.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorFactoryCreatesHandlerTest.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java;camel-core/src/main/java/org/apache/camel/management/mbean/JMXNotificationTraceEventHandler.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedTracer.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventHandler.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/DispatchingTraceEventHandler.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java;camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncTraceHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorFactoryCreatesHandlerTest.java;,0,0
4503,Bug,Resolved,Fixed,,Major,Jonathan Anstey,2011/09/29 15:50:52 +0100,2011/10/20 06:04:43 +0100,Willem Jiang,2011/10/21 10:42:24 +0100,21.78578704,1.192835648,Recipient List cannot vary destination by changing property in an expression,This is probably due to producers being cached based on unresolved endpoint URI  rather than the resolved endpoint URI. Haven't tested this theory out though.See message on user list http://markmail.org/message/sdysp6sspq5lomf4,2.8.1,2.8.3; 2.9.0,0,1,33,1,9,4,0,0,0,0,0,1,2,8,tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxf2Test.java;tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxfTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/MulticastCxfTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxf2Test.java;tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxfTest.java;tests/camel-itest/src/test/resources/org/apache/camel/itest/greeter/MulticastCxfTest-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/greeter/RecipientListCxf2Test-context.xml;tests/camel-itest/src/test/resources/org/apache/camel/itest/greeter/RecipientListCxfTest-context.xml;,0,0
4506,Improvement,Resolved,Fixed,camel-ftp,Minor,Eugene Kiselev,2011/09/30 16:16:07 +0100,2011/09/30 19:56:37 +0100,Hadrian Zbarcea,2011/10/05 07:31:18 +0100,4.635543981,4.482418981,The SFTP component: the keyboard-interactive auth method support,As it was discussed in this topic http://camel.465427.n5.nabble.com/The-SFTP-component-the-keyboard-interactive-auth-method-support-td4853523.htmlThe SFTP component may be slightly improved to support the keyboard-interactive auth method and the compression Preamble:It appeared that our sftp share we get files from doesn't support the ssh password auth method and we're not allowed to put the public key to there. So the only ssh auth method we can use is the keyboard-interactive. Unfortunately the SFTP camel component doesn't support this.However this can be easily fixed simply by providing the Jsch session with both the com.jcraft.jsch.UserInfo and com.jcraft.jsch.UIKeyboardInteractive interfaces. The UIKeyboardInteractive has the only one promptKeyboardInteractive method which returns String[] containing the password entered by user interactively. In our case I simply return a password.The implementation example is attached.Also it's sometime required to set the ssh compression to be able to process longsize files. The compression fix is also implemented in the attached file. Compression requires the zlib jar to be in the pom.This was tested with the 0.1.44-1 version of the jsch and the 1.0.7 version of the jzlib.,2.8.1,2.8.2; 2.9.0,0,0,172,1,8,4,0,0,0,1,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
4515,Improvement,Resolved,Fixed,camel-spring-ws,Minor,Damian,2011/10/05 05:17:57 +0100,2013/04/27 07:30:56 +0100,Claus Ibsen,2013/04/27 07:48:39 +0100,570.1046528,0.012303241,Spring-WS should populate Camel Header with the SOAP Header,Currently the Camel-Spring-WS component does not support the setting of SOAP Headers and has issues getting them. The current issue getting the SOAP Headers when receiving a message is that the resulting header key includes the namespace.Change the component so that a Camel header 'CamelSpringWebserviceSoapHeader' can be populated with an intended SOAP Header for a request  and that this Header is also populated from the SOAP Header on a response.,2.8.1,2.11.1; 2.12.0,0,4,70,1,14,5,0,0,0,0,0,0,1,6,components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConstants.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConsumer.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/SoapHeaderResponseProcessor.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/SoapHeaderTest.java;components/camel-spring-ws/src/test/resources/org/apache/camel/component/spring/ws/SoapHeaderTest-context.xml;,0,0
4540,Bug,Resolved,Fixed,camel-jms,Major,Preben Asmussen,2011/10/12 19:00:25 +0100,2011/10/15 10:49:05 +0100,Claus Ibsen,2011/10/15 11:57:02 +0100,2.705983796,0.0471875,Unable to convert jms textmessage to bytemessage,When receiving a jms textmessage and just forward it to a another queue as a jms bytemessage the original textmessage is sendt without being converted to a jms bytemessage. JmsBinding.makeJmsMessage seems to use the exchange headers to determine of a new jms message should be created or the original send.Exchange headers seems to be populated if you do routing or set a dummy header.See http://camel.465427.n5.nabble.com/Convert-jms-message-from-textmessage-to-bytemessage-tc4895362.html/preben,2.8.1,2.8.2; 2.9.0,0,0,68,1,3,2,0,0,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/FromTextToBytesMessageTest.java;,0,0
4542,Bug,Resolved,Fixed,camel-core,Major,Bernd Fischer,2011/10/13 09:38:33 +0100,2011/10/14 10:59:56 +0100,Willem Jiang,2011/10/14 12:14:38 +0100,1.108391204,0.051875,Can't find splitter bean in registry using multiple camel contexts with 'vm' endpoint,The splitter component can use a bean with a 'split method'. It seems that this 'split bean' is handled as expression and resolved lately using Camel Context from current exchange.If I send an exchange using a separate CamelContext ('client')&lt;camelContext id='client' xmlns='http://camel.apache.org/schema/spring'&gt;&lt;/camelContext&gt;to a route defined in another CamelContext ('server') using in-memory transport like 'direct' or 'vm'&lt;camelContext id='server' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;route id='route02' trace='false' streamCache='false'&gt; &lt;from uri='vm:route02'/&gt; &lt;split&gt; &lt;method bean ='stringLineSplitter' method='split'/&gt; &lt;log message='before sending: ${body}'/&gt; &lt;inOut uri ='vm:route04'/&gt; &lt;log message='after sending'/&gt; &lt;/split&gt; &lt;to uri='mock:route02'/&gt; &lt;/route&gt;&lt;/camelContext&gt;the test fails with 'Cannot find class: stringLineSplitter' (Camel 2.8.0). 'org.apache.camel.NoSuchBeanException - No bean could be found in the registry for: stringLineSplitter' (Camel 2.9-SNAPSHOT)If I understood Camel right it failsbecause it tries to resolve this bean based on client Camel Contextwhich is still set at the current exchange send from 'client' to 'server' but itdoesn't contain the bean.If I send an exchange using same 'client' CamelContext to another route in'server' CamelContext involving 'external' components like 'jms' (ActiveMQ)&lt;camelContext id='server' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;route id='route03' trace='false' streamCache='false'&gt; &lt;from uri='jms:queue:route03'/&gt; &lt;split&gt; &lt;method bean ='stringLineSplitter' method='split'/&gt; &lt;log message='before sending: ${body}'/&gt; &lt;inOut uri ='vm:route04'/&gt; &lt;log message='after sending'/&gt; &lt;/split&gt; &lt;to uri='mock:route03'/&gt; &lt;/route&gt;&lt;/camelContext&gt;the test passed successfully. It seems that 'jms' component creates anew exchange using 'server' CamelContext.,2.8.0; 2.8.1,2.8.3; 2.9.0,0,0,199,1,2,2,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java;camel-core/src/test/java/org/apache/camel/component/vm/VMSplitterTest.java;,1,1
4551,Improvement,Resolved,Fixed,camel-core,Major,Jason Parr,2011/10/17 11:03:07 +0100,2011/10/23 09:21:35 +0100,Claus Ibsen,2011/10/23 11:58:34 +0100,6.038506944,0.109016204,NotifyBuilder wereSentTo condition fires too eagerly,Problem is:NotifyBuilder notify = new NotifyBuilder(context)  .whenDone(2).wereSentTo('mock:bar');The wereSentTo condition will fire after first message gets to endpoint 'mock:bar'  so either needs to take preceding whenDone into account  or wereSentTo needs to have a count condition added to it's method signature.See nabble trail for full details:http://camel.465427.n5.nabble.com/NotifyBuilder-condition-fails-to-match-on-an-out-activemq-endpoint-tp4689038p4867857.html,2.9.0,2.9.0,0,0,49,1,2,1,0,0,0,0,0,0,2,5,camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;camel-core/src/test/java/org/apache/camel/ContextTestSupport.java;camel-core/src/test/java/org/apache/camel/builder/NotifyBuilderTest.java;camel-core/src/test/resources/log4j.properties;camel-core/src/test/java/org/apache/camel/builder/NotifyBuilderTest.java;,0,0
4555,Improvement,Resolved,Fixed,camel-hdfs,Major,Ben Hoyt,2011/10/17 19:50:43 +0100,2011/10/22 15:02:55 +0100,Claus Ibsen,2011/10/22 15:02:55 +0100,4.800138889,0,Support nested directories with multiple segment files in the HDFS endpoint consumer,A common pattern in HDFS is for multiple segment files underneath a given directory  representing the fragments of data. Lots of tools understand to automatically merge these segment files (ie hadoop fs -getmerge  pig script loaders). This patch does the same for the HDFS consumer  using a temporary local directory for the merging.Additionally  tools like pig and oozie understand to look for a _SUCCESS file in one of these directories containing segments. This file indicates that the segments have been completely written. This patch additionally skips the directory if a _SUCCESS file is not present.,2.8.1,2.8.3; 2.9.0,0,0,95,1,2,1,0,0,0,0,0,0,1,2,components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsConsumer.java;components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsFileType.java;,0,0
4556,Bug,Resolved,Fixed,camel-netty,Minor,Matthew McMahon,2011/10/18 01:49:19 +0100,2012/04/08 11:24:53 +0100,Claus Ibsen,2012/04/08 13:55:43 +0100,173.5044444,0.10474537,NettyProducer creating new connection on every message,Using a NettyProducer without the disconnect=true configuration is causing the route to block after 10 messages on the to('netty://tcp....') call.It appears that a new socket connection is created for every message  and then after 10 connections no new connection is allowed (must be a default thread pool limit?).Using the disconnect=true option fixes the problem as a socket is connected  message sent  then disconnected. But this does not seem viable for implementations where that overhead is undesirable or where more than one response is expected on a channel.&#8211;This is a small Unit Test that shows the problem (http://camel.465427.n5.nabble.com/Camel-Netty-Producer-creating-new-connection-on-every-message-td4844805.html#none) package netty; import java.util.Arrays; import java.util.Collection; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicInteger; import junit.framework.TestCase; import org.apache.camel.CamelContext; import org.apache.camel.Exchange; import org.apache.camel.ExchangePattern; import org.apache.camel.Processor; import org.apache.camel.builder.RouteBuilder; import org.apache.camel.impl.DefaultCamelContext; import org.junit.Before; import org.junit.BeforeClass; import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.Parameterized; import org.junit.runners.Parameterized.Parameters; import org.slf4j.Logger; import org.slf4j.LoggerFactory; @RunWith(Parameterized.class) public class NettyTest extends TestCase {  private final static Logger logger = LoggerFactory.getLogger(NettyTest.class);  private final static CamelContext serverContext = new DefaultCamelContext();  private final CamelContext clientContext = new DefaultCamelContext();  private final AtomicInteger responseCounter = new AtomicInteger(0);  private final AtomicBoolean passedTen = new AtomicBoolean(false);  private Boolean disconnectClient;  public NettyTest(Boolean disconnectClient)  { this.disconnectClient = disconnectClient; }  @Parameters  public static Collection&lt;Object[]&gt; configs()  {  return Arrays.asList(new Object[][] { { true }  { false } });  }  @BeforeClass  public static void createServer() throws Exception  {  serverContext.addRoutes(new RouteBuilder()  {  @Override  public void configure() throws Exception  {  from('netty:tcp://localhost:9000?sync=true&amp;disconnectOnNoReply=false&amp;allowDefaultCodec=true&amp;tcpNoDelay=true&amp;reuseAddress=true&amp;keepAlive=false')  .setExchangePattern(ExchangePattern.InOut)  .process(new Processor() {  @Override  public void process(Exchange exchange) throws Exception  {  Object body = exchange.getIn().getBody();  logger.info('Request received : Value = {}'  body);  }  })  .transform(constant(3)).stop();  }  });  serverContext.start();  }  @Before  public void createClient() throws Exception  {  clientContext.addRoutes(new RouteBuilder()  {  @Override  public void configure() throws Exception  {  // Generate an Echo message and ensure a Response is sent  from('timer://echoTimer?delay=1s&amp;fixedRate=true&amp;period=1s')  .setExchangePattern(ExchangePattern.InOut)  .transform()  .constant(2)  .to(ExchangePattern.InOut  'netty:tcp://localhost:9000?allowDefaultCodec=true&amp;tcpNoDelay=true&amp;reuseAddress=true&amp;keepAlive=false&amp;sync=true&amp;disconnect=' + disconnectClient.toString())  .process(new Processor()  {  @Override  public void process(Exchange exchange) throws Exception  {  Object body = exchange.getIn().getBody();  logger.info('Response number {} : Value = {}'   responseCounter.incrementAndGet()  body);  if (responseCounter.get() &gt; 10) { passedTen.set(true); }  }  }).stop();  }  });  }  @Test  public void test() throws Exception  {  clientContext.getShutdownStrategy().setTimeout(1);  clientContext.start();  logger.info('Disconnect = {}'  this.disconnectClient);  Thread.sleep(TimeUnit.SECONDS.toMillis(15));  clientContext.stop();  assertTrue('More than 10 responses have been received'  passedTen.get());  } },2.8.1,2.9.2; 2.10.0,0,0,435,1,1,1,0,0,0,0,1,0,1,8,components/camel-netty/src/main/java/org/apache/camel/component/netty/ClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyCamelState.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ServerChannelHandler.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactoryAsynchTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactorySynchTest.java;,0,0
4559,Bug,Resolved,Fixed,tooling,Major,Willem Jiang,2011/10/19 10:36:45 +0100,2011/10/19 10:36:45 +0100,Willem Jiang,2011/10/19 13:54:44 +0100,0.137488426,0.137488426,Need to specify the sl4j-api version in the camel maven archetypes,There are some third part dependencies will introduce other version of sl4j-api as CAMEL-4545 shows  we need to specify the sl4j-api in the pom.xml resource.,2.8.0; 2.8.1,2.8.3; 2.9.0,0,0,36,1,1,1,0,1,,0,0,0,1,8,tooling/archetypes/camel-archetype-activemq/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-java/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-scala/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-spring-dm/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-spring/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-web/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-webconsole/src/main/resources/archetype-resources/pom.xml;,0,0
4560,Bug,Resolved,Fixed,camel-core; camel-xslt,Major,Sergey Zhemzhitsky,2011/10/19 11:04:55 +0100,2011/10/21 14:55:19 +0100,Claus Ibsen,2011/10/21 19:31:46 +0100,2.351979167,0.191979167,camel-file component does not close a file when it's used with camel-xslt,Here are the steps to reproduce: Create the directory target/in. Put the file 'file.xml' into the directory target/in. Note: the end tag in this file is not closed properly. Run the test. The test should fail. The file 'file.xml' remains in the target/in but it should not.FileLockedTest.javapackage org.apache.camel;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class FileLockedTest extends CamelTestSupport { @Test public void testFileLocked() throws Exception { MockEndpoint result = getMockEndpoint('mock:result'); result.setAssertPeriod(10000); result.expectedMessageCount(1); result.assertIsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { @Override public void configure() throws Exception { from('file:target/in?delay=100&amp;moveFailed=.error') .onException(Throwable.class) .to('mock:result') .end() .to('xslt:FileLockedTest.xsl'); } }; }}FileLockedTest.xsl&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns='http://schemas.computershare.ru/codex/2011/08/' version='1.0'&gt; &lt;xsl:output method='xml' encoding='UTF-8' omit-xml-declaration='yes' /&gt; &lt;xsl:preserve-space elements='*'/&gt; &lt;xsl:template match='/'&gt; &lt;xsl:apply-templates /&gt; &lt;/xsl:template&gt; &lt;xsl:template match='@* | node()'&gt; &lt;xsl:copy&gt; &lt;xsl:apply-templates select='@* | node()' /&gt; &lt;/xsl:copy&gt; &lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;file.xml; Note: the end tag is not closed properly&lt;root&gt;&lt;/root,2.8.1,2.8.3; 2.9.0,0,0,225,1,4,2,0,0,0,0,1,0,1,2,camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltFromFileExceptionTest.java;,0,0
4568,Bug,Resolved,Fixed,,Major,Eliot Chen,2011/10/21 05:52:23 +0100,2011/10/21 09:46:02 +0100,Willem Jiang,2011/10/24 14:57:24 +0100,3.378483796,3.216226852,SLF4JLog does not work with JdbcDriver for Quickfix/J,I discovered that to use SLF4J log  JdbcDriver cannot be present in the Quickfix/J config file. Otherwise  the default LogFactory - ScreenLogFactory will be used. We need JdbcDriver setting as it is used for persisting FIX messages into database for FIX session management.After debugging the code  I found out that this could be fixed by swapping those two lines in QuickfixjEngine.java298: isJdbcLog(settings  impliedLogFactories);299: isSL4JLog(settings  impliedLogFactories);Can we please have this fixed for the next release?,2.8.0,2.8.3; 2.9.0,0,0,74,1,6,2,0,0,0,0,0,0,3,5,components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEngine.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEngine.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjEngineTest.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEngine.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjEngineTest.java;,0,0
4579,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2011/10/25 13:22:29 +0100,2011/10/25 13:22:29 +0100,Claus Ibsen,2011/10/25 14:04:50 +0100,0.029409722,0.029409722,Add option on XSLT to allow StAX,With the new StAX converters you may convert to a StAXSource which is not supported by the XSLT transformer  and you get this exceptionCaused by: org.apache.xml.dtm.DTMException: Not supported: javax.xml.transform.stax.StAXSource@14d556e at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:477) at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:699) at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1273) at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1251) at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:107)We should add option on XSLT component to explicit enable StAX if the end user wants it.,2.8.2,2.8.3; 2.9.0,0,0,55,1,1,1,1,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltRouteAllowStAXTest.java;,0,0
4584,Bug,Resolved,Fixed,camel-saxon,Minor,Claus Ibsen,2011/10/25 20:11:25 +0100,2011/10/25 20:11:25 +0100,Claus Ibsen,2011/10/26 08:26:37 +0100,0.510555556,0.510555556,XQuery component does not work with StAXSource out of the box,The new STaXSource type converters cause camel-saxon to fail unit tests as reported by CI serversCaused by: net.sf.saxon.trans.XPathException: Unknown source class at net.sf.saxon.Configuration.buildDocument(Configuration.java:2892) at net.sf.saxon.query.StaticQueryContext.buildDocument(StaticQueryContext.java:211) at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:474)We should implement the same optimized logic as we did today in XSLT to convert to Source if StAX is allowed  as well to avoid leaking resources we need to ensure if InputStream is in use  we should ensure it gets closed.,2.8.2,2.8.3; 2.9.0,0,0,68,1,1,1,1,0,0,1,1,1,2,3,components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java;components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryFromFileExceptionTest.java;components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java;,0,0
4591,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2011/10/27 12:54:49 +0100,2011/10/27 12:54:49 +0100,Claus Ibsen,2011/10/27 14:23:31 +0100,0.061597222,0.061597222,XPath will lock File input in case of an exception during xpath evaluation,We have a similar issue with XPath  as we had with XSLT and XQuery.If the message is a java.io.File and an exception occurs during evaluation  then that file is locked on Windows platforms.We need to close the FileInputStream to unlock the file  and allow Windows to access the file.,2.8.2,2.8.3; 2.9.0,0,0,49,1,1,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java;camel-core/src/test/java/org/apache/camel/language/XPathFromFileExceptionTest.java;,0,0
4599,Improvement,Resolved,Fixed,,Major,Jonathan Anstey,2011/10/31 19:35:33 +0100,2011/10/31 19:35:33 +0100,Jonathan Anstey,2011/11/01 15:41:01 +0100,0.83712963,0.83712963,Add default for transactionName in camel-jms,Say you have a simple transacted route like:from('activemq:queue:foo') .transacted() .to(...);on new messages you get logs like:DEBUG JmsTransactionManager - Creating new transaction with name [null]: PROPAGATION_REQUIRED ISOLATION_DEFAULTwhich isn't very helpful. It would be good to actual give the TX a name with some context. Thinking of something like the following would be better:DEBUG JmsTransactionManager - Creating new transaction with name [JmsConsumer[foo]]: PROPAGATION_REQUIRED ISOLATION_DEFAULT,2.8.2,2.8.3; 2.9.0,0,0,85,1,0,0,1,0,0,0,0,0,2,3,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;,0,0
4600,Improvement,Resolved,Fixed,camel-core,Major,Jo?o Loureiro,2011/10/31 20:32:42 +0100,2011/11/01 09:39:01 +0100,Willem Jiang,2011/11/04 11:27:35 +0100,3.621446759,3.075393519,Improve URISupport.sanitizeUri and apply it in additional places,In this issue  I propose that URISupport.sanitizeUri method sanitizes the password token in URIs that contain it (i.e.  URIs in the form scheme://user:password@host). JT400 component URIs directly benefit from this improvement.Additionally  I suggest that this method be invoked in additional sensitive places (in much the same way as DefaultEndpoint.toString()).Proposed patch attached.,2.8.2,2.9.0,1,2,51,1,2,2,1,0,0,1,0,0,1,5,camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java;camel-core/src/main/java/org/apache/camel/util/URISupport.java;camel-core/src/test/java/org/apache/camel/util/URISupportTest.java;,1,1
4618,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2011/11/04 14:46:58 +0100,2011/11/07 08:01:51 +0100,Claus Ibsen,2011/11/07 08:01:51 +0100,2.718668981,0,Add support for PGP data format in Java and XML DSLs,The new PGP data format from CAMEL-4549requires to create it from Java code.We should add some syntax sugar and have it in the DSL directly like the other data formats.We may also want to look into how to configure a public and private key file  and have it load the PGPPublicKey and PGPPrivateKey for you automatic.Instead of using the PGPDataFormatUtil class.,2.9.0,2.9.0,0,0,70,1,6,2,1,0,0,0,0,0,1,13,camel-core/src/main/java/org/apache/camel/builder/DataFormatClause.java;camel-core/src/main/java/org/apache/camel/model/MarshalDefinition.java;camel-core/src/main/java/org/apache/camel/model/UnmarshalDefinition.java;camel-core/src/main/java/org/apache/camel/model/dataformat/DataFormatsDefinition.java;camel-core/src/main/java/org/apache/camel/model/dataformat/PGPDataFormat.java;components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormat.java;components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java;components/camel-crypto/src/main/resources/META-INF/services/org/apache/camel/dataformat/pgp;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/AbstractPGPDataFormatTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/SpringPGPDataFormatTest.java;components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringCryptoDataFormatTest.xml;components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringPGPDataFormatTest.xml;,0,0
4619,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/11/05 12:19:14 +0100,2011/11/05 12:19:14 +0100,Claus Ibsen,2011/11/05 12:32:17 +0100,0.0090625,0.0090625,Stop or shutdown a route with a custom timeout value  will still log using the default timeout in the logs,If you stop a route with a custom time out value  then the graceful shutdown strategy will still use the default timeout value in the logs  so that information is not correct. For example if you have a short default value  but provide a higher timeout value  then you can have the log show negative timeout values.INFO DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete  timeout in -14 seconds.,2.8.2,2.8.3; 2.9.0,0,0,75,1,0,0,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;,0,0
4642,Improvement,Resolved,Fixed,camel-jms,Minor,Claus Ibsen,2011/11/08 07:54:42 +0100,2011/11/08 07:54:42 +0100,Claus Ibsen,2011/11/08 08:44:30 +0100,0.034583333,0.034583333,Do not print javax.jms.Message in toString in camel-jms,See nabblehttp://camel.465427.n5.nabble.com/ExchangeTimedOutException-not-properly-constructed-by-Camel-2-7-1-exposing-exchange-data-tp4971556p4971556.htmlThere may be details in the JMS message you do not want to show in logs unintended.,2.7.1,2.7.5; 2.8.3; 2.9.0,0,0,21,1,0,0,1,0,0,0,1,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsMessage.java;,0,0
4647,Bug,Resolved,Fixed,camel-core,Major,Roman Stumm,2011/11/08 18:36:08 +0100,2011/11/09 10:31:09 +0100,Claus Ibsen,2011/11/09 11:19:39 +0100,0.696886574,0.033680556,Simple expression does not find method toString(),In a route builder  we have a log definition: from('direct:testSimple') .log('${body.toString}');The body contains an object  that implements a public toString() method. But the problem is  that the simple-expression does not find the method toString() and route processing stops without throwing an exception.The funny thing is  that when we just rename the method  e.g. toInfoString()  then it works:from('direct:testSimple') .log('${body.toInfoString}');Why does simple expression have a problem with a method named 'toString'?,2.8.0,2.8.3; 2.9.0,0,0,69,1,1,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanExcludedMethodTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInvokeSimpleOgnlToStringMethodTest.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanInvokeToStringMethodTest.java;,0,0
4649,Bug,Resolved,Fixed,camel-cxf,Major,Xilai Dai,2011/11/09 11:18:39 +0100,2011/11/09 13:08:22 +0100,Willem Jiang,2011/11/09 14:42:35 +0100,0.14162037,0.065428241,NPE from DefaultCxfBinding when  is null,when got soap message from CXF component like this:&lt;soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'&gt;&lt;soap:Header&gt;......&lt;/soap:Header&gt;&lt;soap:Body/&gt;&lt;/soap:Envelope&gt;the NPE will be thrown: 18:04:51 255 | WARN | tp1212500935-153 | ache.cxf.common.logging.LogUtils 372 | - - | Interceptor for {http://airportsoap.sopera.de}airport#{http://airportsoap.sopera.de}getAirportInformationByISOCountryCode has thrown exception  unwinding nowjava.lang.NullPointerException at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:395)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:103)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)&#91;163:org.apache.camel.camel-cxf:2.8.2&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:80)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:323)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:289)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)&#91;141:org.apache.cxf.bundle:2.5.0&#93; at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:939)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:875)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.Server.handleAsync(Server.java:391)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:393)&#91;59:org.eclipse.jetty.server:7.4.5.v20110725&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)&#91;54:org.eclipse.jetty.io:7.4.5.v20110725&#93; at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)&#91;54:org.eclipse.jetty.io:7.4.5.v20110725&#93; at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)&#91;53:org.eclipse.jetty.util:7.4.5.v20110725&#93; at java.lang.Thread.run(Thread.java:662)&#91;:1.6.0_24&#93;Looking into the source codes  before the line 395 of DefaultCxfBinding  the elements variable shoulde be checked if it's null.,2.8.2,2.7.5; 2.8.3; 2.9.0,0,0,128,1,1,1,0,0,0,1,0,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java;,0,0
4650,Bug,Resolved,Fixed,camel-core,Major,Tarjei Huse,2011/11/09 11:47:47 +0100,2011/11/15 12:35:04 +0100,Claus Ibsen,2011/11/15 13:08:24 +0100,6.055983796,0.023148148,NPE when using SEDA route and attaching an extra consumer,I'm trying to construct a system for moving some seda queues over toActiveMQ during system shutdown. What I did was create a Route thatconnects to some of my seda queues and then drains the queue to activemq.Basicly I got two routes  the drainer:from('seda:' + sedaId + '?size=1000') .routeId(routeName +sedaIs).noAutoStartup().to(activeMQFailuresQueue);And the main route:from('seda:' + sedaId + '?size=1000') .routeId(routeName + sedaIs).to(SomeProcessor);Now  sometimes the main route stalls for various reasons I need torestart the jvm process it is running in  so I start the first route.But when trying this in production  I got: java.lang.NullPointerException atorg.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) atorg.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:210) atorg.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155) atorg.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129) atjava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) atjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)Bvahdat added a comment:just a very tiny pointer:Looking at the source it seems that theSedaEndpoint.getConsumerMulticastProcessor() method returns 'null' causingthe NPE  as the condition:multicastStarted == false || consumerMulticastProcessor == nullis true.,2.8.2,2.8.3; 2.9.0,0,0,128,1,13,3,1,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersNPEIssueTest.java;,0,0
4655,Bug,Resolved,Fixed,camel-bindy,Major,Olivier SCHMITT,2011/11/10 08:35:18 +0100,2011/11/12 11:59:54 +0100,Claus Ibsen,2011/11/12 15:11:51 +0100,2.275381944,0.133298611,Bindy does not support quoted value with separator char in CSV datasource,i'm currently writing a tuto on Camel (2.8.2).Showing HTTP4 component usage by downloading US Gov public data  i found a problem : from('quartz://dataTimer?cron=0+?').to('direct:datas'); from('direct:datas') .to('http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt') .unmarshal(new BindyCsvDataFormat('net.thejeearchitectcookbook.camel.earthquake')) .process(new Processor() { public void process(Exchange exchange) throws Exception { Message message = exchange.getIn(); // ... } });The data format is like and my separator char is ' ':nc 71678421 0 'Wednesday  November 9  2011 14:53:13 UTC' 37.5727 -118.8170 1.3 6.60 14 'Central California'I want to get all datas as java.lang.String but the date value raises exception :java.lang.IllegalArgumentException: No position 11 defined for the field: 14  line: 2 must be specified]My separator is ' ' but some values are nested inside ' '. Unfortunately there are ' ' inside the ' '.Bindy get lost !How can i get String values nested inside ' ' and containing ' ' ?I can note that Camel CSV component deals with it without any problems.Here is my pojo :package net.thejeearchitectcookbook.camel.earthquake;import java.io.Serializable;import org.apache.camel.dataformat.bindy.annotation.CsvRecord;import org.apache.camel.dataformat.bindy.annotation.DataField;@CsvRecord( separator = ' ')public class EarthquakeInfos implements Serializable { @DataField(pos = 1) private String src; @DataField(pos = 2) private String eqid; @DataField(pos = 3) private String version; @DataField(pos = 4) private String datetime; @DataField(pos = 5) private String lat; @DataField(pos = 6) private String lon; @DataField(pos = 7) private String magnitude; @DataField(pos = 8) private String depth; @DataField(pos = 9) private String nst; @DataField(pos = 10) private String place; public String getSrc() { return src; } public void setSrc(String src) { this.src = src; } public String getEqid() { return eqid; } public void setEqid(String eqid) { this.eqid = eqid; } public String getVersion() { return version; } public void setVersion(String version) { this.version = version; } public String getLat() { return lat; } public void setLat(String lat) { this.lat = lat; } public String getLon() { return lon; } public void setLon(String lon) { this.lon = lon; } public String getDepth() { return depth; } public void setDepth(String depth) { this.depth = depth; } public String getNst() { return nst; } public void setNst(String nst) { this.nst = nst; } public String getDatetime() { return datetime; } public void setDatetime(String datetime) { this.datetime = datetime; } public String getMagnitude() { return magnitude; } public void setMagnitude(String magnitude) { this.magnitude = magnitude; } public String getPlace() { return place; } public void setPlace(String place) { this.place = place; }} I can find that CSV Camel component performs well with the same datasource :from('direct:datas').to('http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt').unmarshal().csv().process(new Processor() { public void process(Exchange exchange) throws Exception { Message message = exchange.getIn(); List&lt;List&lt;String&gt;&gt; datas = (List&lt;List&lt;String&gt;&gt;) message.getBody(); // Skip header datas = datas.subList(1  datas.size() - 1); // Process my data for (List&lt;String&gt; row : datas) { // Process Row String datetime = row.get(3); String region = row.get(9); String magnitude = row.get(6); } }});,2.8.2,2.8.3; 2.9.0,0,0,439,1,1,1,1,0,0,0,0,0,1,6,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyDoubleQuotesCsvUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySingleQuotesCsvUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv2/BindyUnmarshalCommaIssueTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv2/WeatherModel.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/car/Car.java;,0,0
4672,Bug,Resolved,Fixed,camel-bindy,Minor,Claus Ibsen,2011/11/12 15:32:23 +0100,2011/11/12 15:32:23 +0100,Claus Ibsen,2011/11/12 16:04:10 +0100,0.022071759,0.022071759,Bindy - CSV format - Should be able to marshal with quotes,See nabblehttp://camel.465427.n5.nabble.com/Bindy-CSV-marshal-does-not-properly-quote-values-defined-by-the-CsvRecord-separator-td4809017.htmlIts fairly common to marshal to/from with quotes in CSV format.We should make this easier by adding an attribute to @CsvRecord where you can define a quote char to use  either single or double etc.,2.8.2,2.8.3; 2.9.0,1,1,39,1,1,1,1,0,0,0,0,0,1,4,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/CsvRecord.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv2/BindyMarshalWithQuoteTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv2/WeatherModel.java;,0,0
4689,Improvement,Resolved,Fixed,,Major,Jonathan Anstey,2011/11/16 19:06:59 +0100,2011/11/16 19:06:59 +0100,Jonathan Anstey,2011/11/16 19:10:09 +0100,0.002199074,0.002199074,Add option to override XSLT stylesheet used via header,Similar to 'dynamic templates' in velocity component http://camel.apache.org/velocity,2.8.2,2.9.0,0,0,11,1,2,1,1,0,0,0,0,0,2,12,camel-core/src/main/java/org/apache/camel/component/xslt/XsltConstants.java;camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java;camel-core/src/test/java/org/apache/camel/component/xslt/InvalidXsltFileTest.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltFileNotFoundTest.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltFromHeaderOverrideEndpointUriTest.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltFromHeaderTest.java;camel-core/src/test/resources/org/apache/camel/component/xslt/transform_to_foo.xsl;camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java;camel-core/src/test/java/org/apache/camel/component/xslt/InvalidXsltFileTest.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltFileNotFoundTest.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltFromHeaderTest.java;components/camel-saxon/src/test/java/org/apache/camel/component/xslt/SaxonInvalidXsltFileTest.java;,0,0
4694,Improvement,Resolved,Fixed,examples,Minor,Glen Mazza,2011/11/18 22:41:20 +0100,2011/11/18 22:47:57 +0100,Hadrian Zbarcea,2011/11/18 23:57:42 +0100,0.053032407,0.0484375,Text improvements to camel-example-cxf-proxy.,Attachment has improvements to README and the camel-config.xml file shown in the online description of this sample: https://cwiki.apache.org/confluence/display/CAMEL/CXF+Proxy+Example (a web page I just updated).,2.9.0,2.8.4; 2.9.0,0,0,27,1,1,1,1,0,0,0,0,0,0,0,,0,0
4696,Bug,Resolved,Fixed,camel-core,Minor,Bilgin Ibryam,2011/11/19 00:49:23 +0100,2011/11/26 10:58:22 +0100,Bilgin Ibryam,2011/11/26 11:02:09 +0100,7.425532407,0.002627315,When a route is removed from camel  LifecycleStrategy is called twice,DefaultCamelContext.removeRoute method has these lines among others if (getRouteStatus(routeId).isStopped()) { routeService.setRemovingRoutes(true); shutdownRouteService(routeService); removeRouteDefinition(routeId); ServiceHelper.stopAndShutdownServices(routeService);I think the last line from this snippet is not needed  because the route should be already stopped in order to pass the IF statement and then it is shutdown through this call shutdownRouteService(routeService); ServiceHelper.stopAndShutdownServices(routeService) tries to stops again the route if not stopped  but the worse is it shutdown the rout again.It seems to me like a bug  other thoughts?,2.8.3,2.8.4; 2.9.0,0,0,74,1,3,2,1,0,1,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextWithLifecycleStrategyRestartTest.java;,0,0
4698,Bug,Resolved,Fixed,camel-scala,Minor,Robert Valk,2011/11/20 23:35:54 +0100,2011/11/21 04:18:21 +0100,Willem Jiang,2011/11/21 08:52:51 +0100,0.386770833,0.190625,Scala DSL does not support defining route-scoped error handlers,The Scala DSL does not allow for defining error handlers at the route scope. The 'errorHandler' method only sets the context-scoped error handler.,2.8.2; 2.9.0,2.7.5; 2.8.4; 2.9.0,0,0,23,1,2,2,1,0,0,0,0,0,1,2,components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/SRouteDefinition.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/RouteErrorHandlerTest.scala;,0,0
4705,Improvement,Resolved,Fixed,camel-core,Major,Torsten Mielke,2011/11/23 15:08:13 +0100,2011/11/23 15:56:08 +0100,Claus Ibsen,2011/11/23 16:21:57 +0100,0.051203704,0.017928241,file endpoint to raise a warning msgs if unable to auto-create the starting directory,The file component tries to auto-create any non-existing starting directories however it does not raise any warnings if its unable to create the directory (e.g. due to file permission or due to unmounted file systems). It should at least log a warning msg if it cannot auto-create the starting directory.,2.8.3,2.8.4; 2.9.0,0,0,51,1,2,2,0,0,0,0,0,0,2,2,camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;,0,0
4730,Improvement,Resolved,Fixed,camel-cometd,Major,Joshua Watkins,2011/12/01 18:38:01 +0100,2011/12/06 04:53:16 +0100,Willem Jiang,2011/12/06 08:28:41 +0100,4.576851852,0.149594907,Change cometd SslSocketConnetor to use SslSelectChannelConnector,Currently cometd uses SslSocketConnector for cometds connections. In its current configuration it can only support about 35 connections as SslSocketConnector is a blocking connector. Switching this to use the SslSelectChannelConnector in the same way it uses the SelectChannelConnector will fix this and allow the cometds to perform as the non ssl version.,2.9.0,2.9.0,0,0,52,1,4,3,0,0,0,0,1,0,1,6,components/camel-cometd/pom.xml;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdConsumer.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdProducer.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdConsumerTest.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerTest.java;,0,0
4742,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/12/05 12:58:18 +0100,2011/12/05 12:58:18 +0100,Claus Ibsen,2011/12/05 13:37:54 +0100,0.0275,0.0275,Tokenize pair - evaluated as predicate should close input stream,If you read from a file and use the tokenize pair in a predicate such as a filter / content based router  then the input stream should be closed. Otherwise OS such as Windows keep a lock on the stream  and the file cannot be moved/deleted after processing is done.See nabblehttp://camel.465427.n5.nabble.com/Riding-on-org-apache-camel-language-TokenPairPredicateTest-tp5041981p5041981.htmlNote that using tokenizePair as a predicate is must likely very unusual  as its meant for splitting a stream into tokens  and thus most often only used with the splitter EIP.,2.9.0,2.9.0,0,0,84,1,0,0,0,0,0,0,1,0,1,4,camel-core/src/main/java/org/apache/camel/support/TokenPairExpressionIterator.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerSuspendAndResumeTest.java;camel-core/src/test/java/org/apache/camel/component/file/NewFileConsumerTest.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateProcessorTest.java;,0,0
4760,Improvement,Resolved,Fixed,camel-spring,Minor,Sergey Zhemzhitsky,2011/12/09 13:58:04 +0100,2011/12/09 14:27:12 +0100,Claus Ibsen,2011/12/09 14:39:05 +0100,0.028483796,0.008252315,Unable to set logName on DefaultErrorHandler as well as executorService on LoggingErrorHandler,The following snippets do not work  although each of the specified error handlers supports logName and executorServiceRef. The issue is actual for the DeadLetterChannel error handler too.LoggingErrorHandler&lt;errorHandler id='errorHandler' type='LoggingErrorHandler' logName='${router.logger.name}' executorServiceRef='redeliveryExecutor'/&gt;DefaultErrorHandler&lt;errorHandler id='errorHandler' type='DefaultErrorHandler' logName='${router.logger.name}' executorServiceRef='redeliveryExecutor'/&gt;StackTraceCaused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [META-INF/spring/camel-context.xml]; nested exception is java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler  in error handler with id: errorHandler at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:186) ... 42 moreCaused by: java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler  in error handler with id: errorHandler,2.8.3,2.8.4; 2.9.0,0,0,141,1,7,2,0,0,0,0,0,0,1,1,components/camel-spring/src/main/java/org/apache/camel/spring/handler/ErrorHandlerDefinitionParser.java;,0,0
4765,Improvement,Resolved,Fixed,,Minor,Babak Vahdat,2011/12/11 01:01:56 +0100,2011/12/11 01:01:56 +0100,Babak Vahdat,2011/12/12 10:00:49 +0100,1.374224537,1.374224537,Avoid explicit cast while using the CamelContext.getEndpoint() or ApplicationContext.getBean() API and better rely on the overloaded counterpart of them taking a class type as the second argument (implicit cast),Some simple change examples on the trunk are:From:jpaTemplate = (JpaTemplate)applicationContext.getBean('jpaTemplate');To:jpaTemplate = applicationContext.getBean('jpaTemplate'  JpaTemplate.class);OrFrom:HttpEndpoint epOut = (HttpEndpoint) getContext().getEndpoint('http://localhost:' + port1 + '?bridgeEndpoint=true&amp;throwExceptionOnFailure=false');To:HttpEndpoint epOut = getContext().getEndpoint('http://localhost:' + port1 + '?bridgeEndpoint=true&amp;throwExceptionOnFailure=false'  HttpEndpoint.class);Here another one with the removal of @SuppressWarnings as a side effect:From: @SuppressWarnings('unchecked') public &lt;T&gt; T lookup(Class&lt;T&gt; type) { ApplicationContext context = getApplicationContext(); String[] names = context.getBeanNamesForType(type  true  true); if (names != null) { int count = names.length; if (count == 1) { // lets instantiate the single bean return (T)context.getBean(names[0]); } else if (count &gt; 1) { throw new IllegalArgumentException('Too many beans in the application context of type: ' + type + '. Found: ' + count); } } throw new IllegalArgumentException('No bean available in the application context of type: ' + type); }To: public &lt;T&gt; T lookup(Class&lt;T&gt; type) { ApplicationContext context = getApplicationContext(); String[] names = context.getBeanNamesForType(type  true  true); if (names != null) { int count = names.length; if (count == 1) { // lets instantiate the single bean return context.getBean(names[0]  type); } else if (count &gt; 1) { throw new IllegalArgumentException('Too many beans in the application context of type: ' + type + '. Found: ' + count); } } throw new IllegalArgumentException('No bean available in the application context of type: ' + type); }There're also cases where we could make a huge benefit of this so that the following code: public &lt;T&gt; T getMandatoryBean(Class&lt;T&gt; type  String name) { Object value = applicationContext.getBean(name); assertNotNull('No spring bean found for name &lt;' + name + '&gt;'  value); if (type.isInstance(value)) { return type.cast(value); } else { fail('Spring bean &lt;' + name + '&gt; is not an instanceof ' + type.getName() + ' but is of type ' + ObjectHelper.className(value)); return null; } }became just a one liner as: public &lt;T&gt; T getMandatoryBean(Class&lt;T&gt; type  String name) { return applicationContext.getBean(name  type); }I also came across the cases where the prefered API indeed was used but there were unneccessary casts around it:From:// must type cast to work with Spring 2.5.xSpringCamelContext context = (SpringCamelContext) applicationContext.getBeansOfType(SpringCamelContext.class).values().iterator().next();To:SpringCamelContext context = applicationContext.getBeansOfType(SpringCamelContext.class).values().iterator().next();Another benefit of this patch is a better test code coverage  because as one would intuitively expect DefaultCamelContext.getEndpoint(String name  Class&lt;T&gt; endpointType) makes use of DefaultCamelContext.getEndpoint(String uri) before casting and returning the answer. So that now through the usage of the first method API (expecting two parameters) we do call both of them while testing (one explicitly and the other one implicitly) There're 147 sources affected by the provided patch (one source change is just because of an already pre-existing checkstyle violation by HtmlToPdfMojo.java on the trunk).I did verify only the tests on camel-core but not the rest with the following test result (Windows-Vista):Results :Failed tests: testConcurrentAppend(org.apache.camel.component.file.FileConcurrentWriteAppendSameFileTest): mock://result Received message count. Expected: &lt;5000&gt; but was: &lt;2655&gt;Tests run: 3969  Failures: 1  Errors: 0  Skipped: 0&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; BUILD FAILURE&#91;INFO&#93; ------------------------------------------------------------------------&#91;INFO&#93; Total time: 25:49.095s&#91;INFO&#93; Finished at: Sun Dec 11 00:45:35 CET 2011&#91;INFO&#93; Final Memory: 20M/494M&#91;INFO&#93; ------------------------------------------------------------------------&#91;ERROR&#93; Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.8:test (default-test) on project camel-core: There are test failures.,2.9.0,2.9.0,0,0,640,1,5,2,0,0,0,0,0,0,1,146,camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java;camel-core/src/test/java/org/apache/camel/component/bean/pojomessage/PojoProxyHelperOneWayTest.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltReferenceParameterTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextTest.java;camel-core/src/test/java/org/apache/camel/impl/GzipDataFormatTest.java;camel-core/src/test/java/org/apache/camel/impl/ZipDataFormatTest.java;components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java;components/camel-bean-validator/src/test/java/org/apache/camel/component/bean/validator/BeanValidatorConfigurationTest.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslCometdProducerConsumerTest.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslContextParametersCometdProducerConsumerTest.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/SslContextParametersInUriCometdProducerConsumerTest.java;components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/spring/AbstractCxfBeanDefinitionParser.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustomerStartStopTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/cxfbean/CamelEndpointSpringConfigureTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanBusSettingTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanWithBusTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeansRouterTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfRsClientFactoryBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfRsServerFactoryBeanTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/SpringBusFactoryBeanTest.java;components/camel-freemarker/src/main/java/org/apache/camel/component/freemarker/FreemarkerEndpoint.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java;components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsConsumerTest.java;components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/HdfsProducerConsumerTest.java;components/camel-hdfs/src/test/java/org/apache/camel/component/hdfs/integration/HdfsProducerConsumerIntegrationTest.java;components/camel-http/src/test/java/org/apache/camel/component/http/HttpReferenceParameterTest.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/HttpReferenceParameterTest.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcMultiChannelRouteTest.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcOnReplyTest.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcPrivmsgTest.java;components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpBridgeMultipartRouteTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsDestinationResolverTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsQosRouteTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/remoting/JmsRemotingTest.java;components/camel-jmx/src/test/java/org/apache/camel/component/jmx/JMXComponentTest.java;components/camel-jmx/src/test/java/org/apache/camel/component/jmx/JMXEndpointTest.java;components/camel-jmx/src/test/java/org/apache/camel/component/jmx/SimpleBeanFixture.java;components/camel-jpa/src/test/java/org/apache/camel/processor/interceptor/JpaTraceEventMessageTest.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaBatchConsumerTest.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaFlushOnSendTest.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaNonTXRollbackTest.java;components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaTXRollbackTest.java;components/camel-krati/src/test/java/org/apache/camel/component/krati/KratiConsumerSpringTest.java;components/camel-krati/src/test/java/org/apache/camel/component/krati/KratiConsumerTest.java;components/camel-krati/src/test/java/org/apache/camel/component/krati/KratiProducerSpringTest.java;components/camel-krati/src/test/java/org/apache/camel/component/krati/KratiProducerTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/AdditionalMailPropertiesTest.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaNoDefaultCodecTest.java;components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/CronScheduledRoutePolicyTest.java;components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/MultiplePoliciesOnRouteTest.java;components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/SimpleScheduledCombinedRoutePolicyTest.java;components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/SimpleScheduledRoutePolicyTest.java;components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/SpringScheduledRoutePolicyTest.java;components/camel-solr/src/test/java/org/apache/camel/component/solr/InitSolrEndpointTest.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationOneWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationProducerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationTwoWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/CamelSourceAdapterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/CamelTargetAdapterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/ConfigurationTest.java;components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/MainTest.java;components/camel-spring-security/src/test/java/org/apache/camel/component/spring/security/config/SpringSecurityAuthorizationPolicyConfigTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ConsumerEndpointMappingByBeanNameRouteTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ConsumerEndpointMappingResponseHandlingRouteTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ConsumerEndpointMappingRouteTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java;components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java;components/camel-spring/src/main/java/org/apache/camel/spring/Main.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java;components/camel-spring/src/main/java/org/apache/camel/spring/SpringRouteBuilder.java;components/camel-spring/src/main/java/org/apache/camel/spring/util/CamelContextResolverHelper.java;components/camel-spring/src/test/java/org/apache/camel/spring/ApplicationContextTestSupport.java;components/camel-spring/src/test/java/org/apache/camel/spring/CustomProcessorWithNamespacesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/DefaultStreamCachingTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/EndpointReferenceTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/RoutingUsingCamelContextFactoryTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/SpringTestSupport.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/AnotherCamelProxyTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelContextAutoStartupTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelContextFactoryBeanTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelProxyTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelProxyUsingRefTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/RouteAutoStartupPropertiesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/RouteBuilderRefTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/RouteRefMultipleCamelContextRefsTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/SpringCamelContextCustomDefaultThreadPoolProfileTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/SpringComponentScanTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/SpringComponentScanWithDeprecatedPackagesTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/example/PojoDualCamelContextConsumerTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/handler/ErrorHandlerDefinitionParserTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/ContainerWideInterceptorTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/issues/SpringTwoCamelContextDirectEndpointTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/postprocessor/PlainSpringCustomPostProcessorOnRouteBuilderTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/tracing/TraceInterceptorSubclassTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/tracing/TracingTestBase.java;components/camel-spring/src/test/java/org/apache/camel/spring/produce/MyCoolBeanTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/remoting/EchoSpringRemotingPojoDirectTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/remoting/SpringRemotingBeanConverterTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/remoting/SpringRemotingRouteTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/xml/SpringXmlRouteBuilderTest.java;components/camel-test/src/main/java/org/apache/camel/test/CamelSpringTestSupport.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelSpringTestSupport.java;components/camel-testng/src/main/java/org/apache/camel/testng/CamelSpringTestSupport.java;components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java;components/camel-web/src/test/java/org/apache/camel/web/spring/CamelRouteTest.java;components/camel-web/src/test/java/org/apache/camel/web/util/JMXRouteStatisticsTest.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppMultiUserChatTest.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRouteChatTest.java;components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRouteMultipleProducersSingleConsumerTest.java;components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/policy/ZooKeeperRoutePolicy.java;examples/camel-example-cafe/src/test/java/org/apache/camel/example/cafe/CafeRouteBuilderTest.java;examples/camel-example-cafe/src/test/java/org/apache/camel/example/cafe/CafeRouteSpringIntegrationTest.java;examples/camel-example-cafe/src/test/java/org/apache/camel/example/cafe/CafeRouteSpringTest.java;examples/camel-example-jms-file/src/test/java/org/apache/camel/example/jmstofile/JmsToFileRouteTest.java;examples/camel-example-loan-broker/src/test/java/org/apache/camel/loanbroker/queue/version/LoanBrokerQueueTest.java;examples/camel-example-route-throttling/src/main/java/org/apache/camel/example/client/CamelClient.java;examples/camel-example-route-throttling/src/main/java/org/apache/camel/example/client/CamelFileClient.java;examples/camel-example-spring-javaconfig/src/test/java/org/apache/camel/example/spring/javaconfig/IntegrationTest.java;examples/camel-example-spring-jms/src/main/java/org/apache/camel/example/client/CamelClient.java;examples/camel-example-spring-jms/src/main/java/org/apache/camel/example/client/CamelClientEndpoint.java;examples/camel-example-spring-jms/src/main/java/org/apache/camel/example/client/CamelClientRemoting.java;examples/camel-example-spring-jms/src/test/java/org/apache/camel/example/SpringJmsClientServerTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/OSGiIntegrationSpringTestSupport.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/cache/CacheManagerFactoryRefTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/core/xslt/XsltBlueprintRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/hdfs/HdfsBlueprintRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/hdfs/HdfsRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaBlueprintRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/krati/KratiBlueprintRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/sql/SqlBlueprintRoute.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/sql/SqlRouteTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/xstream/XstreamBlueprintRouteTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServicesTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/customerrelations/CustomerServicesWsAddressingTest.java;tooling/maven/maven-html-to-pdf/src/main/java/org/apache/camel/maven/HtmlToPdfMojo.java;,0,0
4768,Bug,Resolved,Fixed,camel-http,Minor,Xavier Verg?s,2011/12/12 10:01:06 +0100,2011/12/12 10:30:35 +0100,Willem Jiang,2011/12/13 09:42:47 +0100,0.987280093,0.966805556,Extra request parameters sent by the camel-http4 component,Described in http://camel.465427.n5.nabble.com/Extra-Request-Params-sent-in-camel-HTTP-component-GET-request-td5042808.htmlRoute from('jetty:http://0.0.0.0:8080/myapp/myservice') .to('http4://www.google.com/?q=camel&amp;bridgeEndpoint=true&amp;throwExceptionOnFailure=false'); sends to the server the bridgeEndpoint=true&amp;throwExceptionOnFailure=false parameters while route from('jetty:http://0.0.0.0:8080/myapp/myservice') .to('http://www.google.com/?q=camel&amp;bridgeEndpoint=true&amp;throwExceptionOnFailure=false'); behaves properly and removes them,2.8.3,2.7.5; 2.8.4; 2.9.0,0,0,49,1,1,1,0,0,0,0,0,0,3,5,components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java;tests/camel-itest/src/test/java/org/apache/camel/itest/http/Http4RouteTest.java;,0,0
4769,Bug,Resolved,Fixed,camel-quartz,Minor,Claus Ibsen,2011/12/12 10:32:46 +0100,2011/12/12 10:32:46 +0100,Claus Ibsen,2011/12/12 13:11:04 +0100,0.109930556,0.109930556,camel-quartz - Using underscore in group name does not work,The group name is not properly resolved if people specify a invalid host name  such as with underscores.If so we should fallback and grab the group name by grabbing the string until the first path separator char.See nabblehttp://camel.465427.n5.nabble.com/Camel-Quartz-consumer-doesn-t-allow-underscores-tp5063734p5063734.html,2.7.4; 2.8.3; 2.9.0,2.7.5; 2.8.4; 2.9.0,0,0,41,1,2,2,0,1,0,0,0,0,1,2,components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzJobRouteUnderscoreTest.java;,0,0
4779,Improvement,Resolved,Fixed,camel-core; camel-spring,Minor,Daniel Gredler,2011/12/14 22:59:44 +0100,2012/01/06 07:41:54 +0100,Claus Ibsen,2012/01/08 17:52:46 +0100,24.7868287,2.424212963,Make Ant path matching in file / FTP component easier to use,The existing codebase has an implicit optional dependency from camel-core to camel-spring; camel-core contains the class AntPathMatcherGenericFileFilter  which internally uses camel-spring's SpringAntPathMatcherFileFilter class via runtime classpath checks and reflection. The reason that SpringAntPathMatcherFileFilter is in camel-spring is that it uses Spring's AntPathMatcher class internally. Interestingly  there is already an AntPathMatcher class with an API very similar to Spring's class in the camel-core-xml module.This patch moves camel-core-xml's AntPathMatcher into camel-core  removes the classpath and reflection magic in camel-core's AntPathMatcherGenericFileFilter class  and adds a new class to camel-core named GenericFileFilterConverter  which automagically converts strings to ant path file filters. The patch also adds some unit tests.The end result is that Camel users can now use ant path matching with the file and FTP components without having to add a dependency on camel-spring  and Camel users can specify the ant path expression to use directly in the component querystring  rather than having to go through the work of registering an additional file filter instance in the registry (although this is only true when the user only needs to specify a single include path  which is a very common use case). For example:from('file://target/blah?recursive=true&amp;filter=*/.txt') .to(...);Instead of:from('file://target/blah?recursive=true&amp;filter=#myTxtFilter') .to(...);,2.8.3,2.10.0,0,0,192,1,11,2,0,0,0,0,0,0,3,15,camel-core/src/test/java/org/apache/camel/component/file/AntPathMatcherGenericFileFilterTest.java;camel-core/src/test/java/org/apache/camel/util/AntPathMatcherTest.java;camel-core/src/main/java/org/apache/camel/component/file/AntPathMatcherFileFilter.java;camel-core/src/main/java/org/apache/camel/component/file/AntPathMatcherGenericFileFilter.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/AntPathMatcherFileFilter.java;camel-core/src/main/java/org/apache/camel/util/AntPathMatcher.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/PatternBasedPackageScanFilter.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/scan/AntPathMatcher.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/scan/PatternBasedPackageScanFilter.java;components/camel-spring/src/main/java/org/apache/camel/spring/util/SpringAntPathMatcherFileFilter.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/PatternBasedPackageScanFilterTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/scan/ScanTestSupport.java;,0,0
4785,Bug,Resolved,Fixed,,Major,Jonathan Anstey,2011/12/16 01:20:17 +0100,2011/12/16 01:20:17 +0100,Jonathan Anstey,2011/12/16 01:21:37 +0100,0.000926,0.000926,camel-aws can allow SNAPSHOT transitive dependencies,The camel-aws component depends on aws-java-sdk which has several dependencies defined using version ranges. The problem with version ranges is that they can introduce SNAPSHOT versions if they are available on your system which is not so good... in my case I had this http://download.java.net/maven/2/com/sun/mail/javax.mail/1.4.5-SNAPSHOT/javax.mail-1.4.5-SNAPSHOT.jar jar in my local repo so camel-aws promptly used that SNAPSHOT lib.,2.9.0,2.9.0,0,0,60,1,1,1,0,0,0,0,0,0,1,1,components/camel-aws/pom.xml;,0,0
4793,Improvement,Closed,Fixed,camel-aws,Major,Christian M?ller,2011/12/18 14:09:51 +0100,2011/12/18 14:09:51 +0100,Christian M?ller,2011/12/19 15:26:25 +0100,1.053171296,1.053171296,Improve Camel aws-sdb component,I would like to improve the aws-sdb component in the following places: Using the Amazon operation names instead of CamelAwsSdbXXX -&gt; With this we can easily support more operations (in the future) and the users are more familiar with this names Add OSGI integration testsI would like to resolve this issue for Camel 2.9.0 because renaming of the operation names are not backwards compatible. I will resolve this issue today.,2.9.0,2.8.4; 2.9.0,0,0,75,1,5,2,0,0,0,0,0,0,1,38,components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/AbstractSdbCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/BatchDeleteAttributesCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/BatchPutAttributesCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/DeleteAttributesCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/DeleteDomainCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/DomainMetadataCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/GetAttributesCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/ListDomainsCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/PutAttributesCommand.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbComponent.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbConstants.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbOperations.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbProducer.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SelectCommand.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/AbstractSdbCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/AmazonSDBClientMock.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/BatchDeleteAttributesCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/BatchPutAttributesCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/DeleteAttributesCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/DeleteDomainCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/DomainMetadataCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/GetAttributesCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/ListDomainsCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/PutAttributesCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/SdbComponentConfigurationTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/SdbComponentSpringTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/SdbComponentTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/SdbOperationsTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/SelectCommandTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sdb/integration/SdbComponentIntegrationTest.java;components/camel-aws/src/test/resources/org/apache/camel/component/aws/sdb/SDBComponentSpringTest-context.xml;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/aws/AmazonSDBClientMock.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/aws/AwsSdbIntegrationTest.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/aws/AwsSdbTest.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/aws/CamelContext.xml;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/aws/CamelIntegrationContext.xml;,0,0
4794,Bug,Resolved,Fixed,camel-quartz,Major,Hadrian Zbarcea,2011/12/19 04:43:15 +0100,2011/12/19 04:43:15 +0100,Hadrian Zbarcea,2011/12/20 01:52:41 +0100,0.881550926,0.881550926,After restarting route a camel-quartz component fires right away (and it shouldn't),I am adding a new QuartzRouteRestartTest that demonstrates this issue. Not only a message is fired right after restart  but the scheduled times are messed up as well. I tried to keep the fire interval as low as possible  but it has to be large enough to demonstrate the problem. So I went down to 0/5 (fire every five sec)  but it's more obvious with 0/10 or 0/15  the trigger starts firing at the wrong time.,2.8.3,2.8.4; 2.9.0,0,0,76,1,2,2,0,0,0,0,0,0,0,0,,0,0
4800,Improvement,Resolved,Fixed,camel-jms,Major,Claus Ibsen,2011/12/20 07:38:27 +0100,2011/12/20 07:38:27 +0100,Claus Ibsen,2011/12/20 08:53:18 +0100,0.051979167,0.051979167,camel-jms - Include details about correlation id in exchange timeout exception if a reply message did not come back,This helps make it easier to spot situations when doing request/reply over JMS and the reply message is not received within the timeout period.And then the reply messages comes later.Then it should be easier to spot in the logs when the timeout occurred  and the correlation ID should be in the logs  so you can correlate these two situations.,2.8.3,2.8.4; 2.9.0,0,0,59,1,1,1,0,0,0,0,0,0,1,8,camel-core/src/main/java/org/apache/camel/ExchangeTimedOutException.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyHolder.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyHandler.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/UnknownReplyMessageException.java;,0,0
4804,Improvement,Closed,Fixed,camel-mail,Major,Christian M?ller,2011/12/20 20:49:45 +0100,2011/12/20 20:49:45 +0100,Christian M?ller,2012/01/22 23:15:14 +0100,33.10103009,33.10103009,Add replyTo option to camel mail component,Add replyTo option to camel mail component,2.9.0,2.8.4; 2.9.1; 2.10.0,1,1,7,1,0,0,0,0,0,0,0,0,2,5,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailReplyToTest.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailReplyToTest.java;,0,0
4809,Improvement,Resolved,Fixed,camel-core; camel-spring,Major,Ra?l Kripalani,2011/12/21 19:54:37 +0100,2012/01/04 10:58:08 +0100,Claus Ibsen,2012/01/05 10:42:53 +0100,14.61685185,0.989409722,interceptSendToEndpoint with predicate and skip,The &lt;when&gt; clause in the interceptors behave like filters. This is okay with intercept and interceptFrom  where the only possible route manipulation is &lt;stop /&gt;  which is expressed inside the routing block.However  with interceptSendToEndpoint there is one edge case that could cause ambiguity. When skipSendToEndpoint=true  along with a &lt;when&gt; clause  the user might expect that the skipping will only occur if the condition is met. However  it occurs always. The &lt;when /&gt; only determines whether the routing logic contained inside the body of the intercept block will occur or not.I propose to add a new attribute onlySkipWhenConditionMet  so that when this is true  the &lt;when&gt; clause will be evaluated to determine if the originally intended endpoint is actually skipped or not.,2.9.0,2.10.0,0,0,121,1,11,2,0,0,0,0,0,0,3,11,camel-core/src/main/java/org/apache/camel/model/InterceptDefinition.java;camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java;camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java;camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java;camel-core/src/main/java/org/apache/camel/model/FilterDefinition.java;camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java;camel-core/src/main/java/org/apache/camel/model/WhenSkipSendToEndpointDefinition.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointConditionalSkipTest.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointConditionalSkip2Test.java;camel-core/src/test/java/org/apache/camel/processor/intercept/InterceptSendToEndpointConditionalSkip3Test.java;,0,0
4810,Bug,Closed,Fixed,osgi,Major,Christian M?ller,2011/12/21 20:11:26 +0100,2011/12/21 20:11:26 +0100,Christian M?ller,2011/12/22 18:52:26 +0100,0.945138889,0.945138889,camel-eventadmin do not work,Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf cleankaraf@root&gt; features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/featureskaraf@root&gt; features:install camel-eventadminError executing command: Could not start bundle mvn:org.apache.camel/camel-eventadmin/2.9.0 in feature(s) camel-eventadmin-2.9.0: Unresolved constraint in bundle org.apache.camel.camel-eventadmin &#91;59&#93;: Unable to resolve 59.0: missing requirement &#91;59.0&#93; package; (&amp;(package=org.osgi.service.event)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))We have to install the feature eventadmin (from Karaf) first,2.9.0,2.8.4; 2.9.0,0,0,44,1,0,0,0,0,0,0,0,0,1,1,platforms/karaf/features/src/main/resources/features.xml;,0,0
4823,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2011/12/23 06:23:00 +0100,2011/12/23 06:23:00 +0100,Claus Ibsen,2011/12/23 06:49:57 +0100,0.018715278,0.018715278,Log EIP - Check if it should log first before evaluating exchange,In the log EIP only evaluate the log message if really needed  eg shouldLog returns true,2.9.0,2.9.0,0,0,16,1,1,1,0,0,0,0,1,0,2,5,components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SLogProcessorTest.scala;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/logProcessorTest.xml;camel-core/src/main/java/org/apache/camel/processor/LogProcessor.java;camel-core/src/main/java/org/apache/camel/util/CamelLogger.java;camel-core/src/test/java/org/apache/camel/processor/LogProcessorTest.java;,0,0
4826,Improvement,Resolved,Fixed,camel-core,Trivial,Glen Mazza,2011/12/23 13:55:06 +0100,2011/12/27 15:42:57 +0100,Claus Ibsen,2011/12/27 15:42:57 +0100,4.074895833,0,Tech edits of JavaDoc and other code comments -- lets -> (let's  allow  {}),Partial conversion of 'lets do...' to 'let's do...'  'allows for doing'  or 'do...' as appropriate  and associated other nitpicks found. 'Let's' retained more where the code is part of an example or tutorial or if it's a matter-of-opinion on how to implement.,2.9.0,2.9.0,0,0,42,1,1,1,0,0,0,0,0,0,1,38,camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/builder/xml/Namespaces.java;camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java;camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/bean/DefaultAnnotationExpressionFactory.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/main/java/org/apache/camel/component/browse/BrowseEndpoint.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetEndpoint.java;camel-core/src/main/java/org/apache/camel/component/dataset/DataSetSupport.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/main/java/org/apache/camel/component/ref/RefComponent.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java;camel-core/src/main/java/org/apache/camel/spi/RouteContext.java;camel-core/src/main/java/org/apache/camel/view/NodeData.java;components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java;components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java;components/camel-bam/src/main/java/org/apache/camel/bam/ProcessBuilder.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/ActivityMonitorEngine.java;components/camel-bam/src/main/java/org/apache/camel/bam/processor/JpaBamProcessor.java;components/camel-bam/src/main/java/org/apache/camel/bam/rules/ActivityRules.java;components/camel-bam/src/main/java/org/apache/camel/bam/rules/TemporalRule.java;components/camel-bam/src/test/java/org/apache/camel/bam/BamRouteTest.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintComponentResolver.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/PackageScanRouteBuilderFinder.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java;components/camel-context/src/main/java/org/apache/camel/component/context/LocalContextComponent.java;components/camel-context/src/test/java/org/apache/camel/component/context/JavaDslBlackBoxTest.java;components/camel-context/src/test/java/org/apache/camel/component/context/JavaDslBlackBoxWithVerboseUriTest.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java;components/camel-guice/src/test/java/org/apache/camel/guice/ComponentFoundInRegistryTest.java;components/camel-guice/src/test/java/org/apache/camel/guice/ConciseGuiceRouteTest.java;examples/camel-example-guice-jms/src/main/java/org/apache/camel/example/guice/jms/MyModule.java;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/ReadMe.txt;tooling/archetypes/camel-archetype-java/src/main/resources/archetype-resources/src/main/java/MyRouteBuilder.java;,0,0
4839,Improvement,Resolved,Fixed,camel-jms,Major,Mark,2011/12/29 01:25:34 +0100,2012/01/04 12:00:47 +0100,Willem Jiang,2012/01/05 06:51:39 +0100,7.226446759,0.785324074,Ability to specify the cache level on JMS reply to queue,I'm trying to use Camel (v 2.6.0) JMS Request/Reply with Websphere 7 using Websphere MQ. I'm successfully able to put the request message onto the queue using the following URI: jms:queue:inboundQueue?connectionFactory=#connectionFactory&amp;taskExecutor=#taskExecutor&amp;transactionManager=#transactionManager&amp;cacheLevelName=CACHE_NONE&amp;replyTo=outboundQueue&amp;requestTimeout=120000 Note: I have to use cacheLevelName=CACHE_NONE in order for this to work on Websphere. However  when Camel creates the PersistentQueueMessageListenerContainer to read the reply message  it is hard coding the cache level to CACHE_SESSION (see PersistentQueueReplyManager.java line 192). What happens is that Camel is successfully able to read the reply off the queue  but then spits out the following error repeatedly: 23 Dec 2011 09:23:32 427|||WorkManager.DefaultWorkManager : 3||WARN |org.springframework.jms.listener.DefaultMessageListenerContainer|Setup of JMS message listener invoker failed for destination 'outboundQueue' - trying to recover. Cause: Connection closed I believe this is due to the PersistentQueueMessageListenerContainer using a cache level of CACHE_SESSION instead of CACHE_NONE. Can Camel be enhanced to have the ability to set the cache level on the reply queue?,2.6.0,2.9.1; 2.10.0,0,0,150,1,3,3,0,0,0,0,0,0,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;,0,0
4842,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2011/12/30 14:35:34 +0100,2011/12/30 14:35:34 +0100,Claus Ibsen,2012/01/05 12:11:56 +0100,5.90025463,5.90025463,Remove ProducerCache from CamelContext service list when shutting down a route,If people add routes dynamic and remove the routes later on  we need to remove services which may have been added to the CamelContext services list. For example the ProducerCache by SendProcessor etc.This will ensure that the ProducerCache can be GC'ed.,2.8.3; 2.9.0,2.8.4; 2.9.1; 2.10.0,0,0,41,1,4,1,0,0,0,0,1,0,4,22,camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAddRemoveTest.java;camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/Route.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRoute.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;camel-core/src/main/java/org/apache/camel/processor/RecipientListProcessor.java;camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java;camel-core/src/test/java/org/apache/camel/impl/StartStopAndShutdownRouteTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAddRemoveTest.java;camel-core/src/test/java/org/apache/camel/util/MyDummyObject.java;camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAddRemoveTest.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/model/OnCompletionDefinition.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAddRemoveTest.java;,0,0
4853,Improvement,Resolved,Fixed,camel-mina,Major,Claus Ibsen,2012/01/03 12:45:29 +0100,2012/04/09 14:44:33 +0100,Claus Ibsen,2012/04/09 16:38:18 +0100,97.16167824,0.078993056,camel-mina - Make it easier to use a custom thread pool for the consumer,It should be easier to use a custom thread pool for the mina consumer  in case you use it in sync mode  where the consumer thread would then be synchronous  and thus take up a thread. So in case you put load on the mina consumer  it will use up the default thread pool size of 10 threads.We should add documentation in the wiki  how to use a custom thread pool / and pool profile.See nabblehttp://camel.465427.n5.nabble.com/inflight-exchange-and-queue-of-apache-camel-tp5112396p5112396.html,2.9.0,2.10.0,0,0,79,1,1,1,0,0,0,0,0,0,2,6,components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Component.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Configuration.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaEndpoint.java;,0,0
4854,Bug,Resolved,Fixed,camel-bam,Major,Marcin,2012/01/03 14:04:39 +0100,2012/01/03 18:03:19 +0100,Claus Ibsen,2012/01/03 18:03:19 +0100,0.165740741,0,BAM - database constraint violation when restaring application,Take BAM example from http://camel.apache.org/bam-example.html (or any other one  it doesn't matter).Here is the one I'm using: ActivityBuilder request = activity('eaiBroker:topic:SOME_TOPIC?concurrentConsumers=1').name('Request') .correlate(xpath('/MessageRequest/@Id').stringResult()); ActivityBuilder response = activity('eaiBroker:topic:SOME_OTHER_TOPIC?concurrentConsumers=1').name('Response') .correlate(xpath('MessageResponse/@Id').stringResult()); response .starts().after(request.completes()) .expectWithin(seconds(15)) .errorIfOver(seconds(30)) .to('log:com.eai?level=error'); First run of the application and everything works. Restart application and try to activate one of BAM rules  there will be an exception that database constraint has been violated. Every time application is started  Camel tries to do following sql insertinsert into CAMEL_ACTIVITYDEFINITION (name  processDefinition_id  id) values (?  ?  ?)but name columne must be unique in CAMEL_ACTIVITYDEFINITION .Workaround for this is to purge BAM tables every time you want to restart the application  but it's not a solution.,2.8.2,2.8.4; 2.9.1,0,0,113,1,2,2,0,0,0,0,0,0,1,1,components/camel-bam/src/main/java/org/apache/camel/bam/ProcessBuilder.java;,0,0
4858,Bug,Resolved,Fixed,camel-core; camel-saxon,Major,Claus Ibsen,2012/01/04 08:15:51 +0100,2012/01/04 08:15:51 +0100,Claus Ibsen,2012/01/04 09:24:39 +0100,0.047777778,0.047777778,xpath expression with $header with saxon may throw exception if header did not exist,See CAMEL-747We should return an empty String instead of a Void.class  as this works with both JDK + Saxon XPathEngine.Saxon does not work with the Void.class.,2.8.3; 2.9.0,2.7.5; 2.8.4; 2.9.1,0,0,45,1,1,1,0,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/builder/xml/MessageVariableResolver.java;,0,0
4868,Improvement,Resolved,Fixed,,Minor,Jonathan Anstey,2012/01/06 16:01:16 +0100,2012/01/06 16:01:16 +0100,Jonathan Anstey,2012/01/06 20:53:25 +0100,0.202881944,0.202881944,add feature for camel-context component,Workaround until this makes it into a release is of course justosgi:install -s mvn:org.apache.camel/camel-context/2.9.0,2.8.3; 2.9.0,2.8.4; 2.9.1; 2.10.0,0,0,14,1,0,0,0,1,0,0,0,0,1,2,platforms/karaf/features/src/main/resources/features.xml;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelContextTest.java;,0,0
4882,Bug,Resolved,Fixed,camel-core,Major,Hadrian Zbarcea,2012/01/11 02:10:51 +0100,2012/01/11 02:10:51 +0100,Hadrian Zbarcea,2012/01/11 05:21:47 +0100,0.132592593,0.132592593,Timed out Exchanges should be removed from seda queues,When the SedaProducer times out and stops waiting for an Exchange to be processed it should remove it from the queue as well. Same applies to the vm: component.,2.9.0,2.7.5; 2.8.4; 2.9.1; 2.10.0,0,0,29,1,0,0,0,0,0,0,1,0,0,0,,0,0
4892,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/01/13 16:41:28 +0100,2012/01/13 16:41:28 +0100,Claus Ibsen,2012/01/13 16:46:28 +0100,0.003472222,0.003472222,CamelContext autoStartup=false and starting context programmatically doesnt work,If a &lt;camelContext&gt; is set to autoStartup=false and then later tried to start it via code or JMX doesn't start routes associated with it.,2.9.0,2.9.1; 2.10.0,0,0,25,1,0,0,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextAutoStartupTest.java;,0,0
4894,Bug,Resolved,Fixed,camel-core,Major,Hadrian Zbarcea,2012/01/14 05:27:58 +0100,2012/01/14 05:27:58 +0100,Hadrian Zbarcea,2012/03/01 18:33:03 +0100,47.54519676,47.54519676,Parameter binding not working with BeanExpression,The parameter binding options available in camel-2.9.0 do not work for BeanExpression. The reason is the fake ognl parser that gets confused about the syntax. We need to align the two scenarios and probably replace the ognl like parsing.,2.9.0,2.9.1; 2.10.0,0,0,42,1,1,1,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/OgnlHelper.java;camel-core/src/test/java/org/apache/camel/processor/RecipientListBeanTest.java;camel-core/src/test/java/org/apache/camel/util/OgnlHelperTest.java;,0,0
4911,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/01/18 09:17:34 +0100,2012/01/18 09:20:52 +0100,Claus Ibsen,2012/01/18 09:20:52 +0100,0.002291667,0,SedaConsumer - Should not poll if CamelContext is starting,If you startup Camel with many routes  which mean starting Camel may take some seconds or whatnot  and then SedaConsumer may poll messages  while CamelContext is starting. It should avoid polling until CamelContext is fully started.,2.9.0,2.9.1; 2.10.0,0,0,36,1,0,0,1,0,0,0,0,0,3,4,camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAddFromRouteTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedRouteAddFromRouteTest.java;camel-core/src/test/java/org/apache/camel/component/vm/AbstractVmTestSupport.java;,0,0
4913,Bug,Resolved,Fixed,camel-blueprint,Major,Claus Ibsen,2012/01/18 12:00:38 +0100,2012/01/18 12:00:38 +0100,Claus Ibsen,2012/01/18 12:25:28 +0100,0.01724537,0.01724537,camel-blueprint - Using namespaces with xpath does not work as the namesapces is not parsed and injected into the camel model,Using xpath predicates in a blueprint xml file does not work if you use custom namespaces  as the camel-blueprint component does not detect the custom namespaces  as camel-spring does.,2.9.0,2.9.1; 2.10.0,0,0,29,1,0,0,1,0,0,0,0,0,2,7,components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java;components/camel-spring/src/test/resources/log4j.properties;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/xpathFilterWithNamespace.xml;components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/xpath/XPathFilterWithNamespaceTest.java;components/camel-test-blueprint/src/test/resources/log4j.properties;components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/xpath/xpathFilterWithNamespaceTest.xml;,0,0
4919,Improvement,Resolved,Fixed,camel-test,Minor,Paul-Emmanuel Faidherbe,2012/01/19 11:20:03 +0100,2012/07/06 10:27:53 +0100,Claus Ibsen,2012/07/06 12:46:24 +0100,169.0599653,0.09619213,Testing headers in multiple messages,The need is something similar to expectedBodiesReceivedInAnyOrder applied to headers :I know that a given endpoint will receive 3 messages in any order  and I need to test ONE header in each of these messages.I wrote :getMockEndpoint('mock:zipSHP').expectedHeaderReceived('zippedFile'  '001.zip');getMockEndpoint('mock:zipSHP').expectedHeaderReceived('zippedFile'  '002.zip');getMockEndpoint('mock:zipSHP').expectedHeaderReceived('zippedFile'  '003.zip');for the route :for('file://filesToBeZipped/').to('bean:my.bean.ZipperBean').log('Zipped : ...');The endpoint effectively received the three messages (the results of three ZIP operations) but the test failed saying that the first message header was '003.zip' and not the expected '001.zip'.,2.9.0,2.11.0,0,2,75,1,2,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java;camel-core/src/test/java/org/apache/camel/component/mock/MockEndpointTest.java;,0,0
4938,Bug,Resolved,Fixed,camel-core; jmx,Major,Vid Cheruvu,2012/01/24 23:06:20 +0100,2012/01/29 17:21:44 +0100,Babak Vahdat,2012/01/30 15:36:20 +0100,5.6875,0.926805556,ManagedBrowsableEndpoint are broken,ManagedeBrowsableEndpoint are broken which means any component that inherit ManagedBrowsableEndpoint have errors as well. Please see the link below which will have error screen shot of queueSize JMX operations.http://camel.465427.n5.nabble.com/JMX-queue-size-operation-fails-Camel-2-9-0-td5233089.html,2.9.0,2.9.1; 2.10.0,0,0,32,1,5,2,1,0,0,0,0,1,4,15,camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementObjectStrategy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSedaEndpoint.java;camel-core/src/test/java/org/apache/camel/management/ManagedSedaEndpointTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringManagedSedaEndpointTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/management/SpringManagedSedaEndpointTest.xml;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementObjectStrategy.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedSedaEndpoint.java;camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsQueueEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/BrowsableQueueTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/BrowsableQueueTest.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBrowsableEndpoint.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpoint.java;,0,0
4942,Bug,Resolved,Fixed,camel-core; camel-jaxb,Major,Christian M?ller,2012/01/26 07:15:19 +0100,2012/01/26 23:03:54 +0100,Babak Vahdat,2012/01/27 21:13:33 +0100,1.582106481,0.923368056,exchange.getIn().getBody(.class) throws an exception for Jaxb model objects,exchange.getIn().getBody(Foo.class);should return a Foo instance or null  if no suitable type converter is available. The java doc says: 'return the body of the message as the specified type  or &lt;tt&gt;null&lt;/tt&gt; if not possible to convert'If Foo is an Jaxb object model  this method call: throws an org.xml.sax.SAXParseException if the body content is a string throws a javax.xml.bind.UnmarshalException if the body content is another Jaxb model objectPlease have a look on the attached sample eclipse project.,2.8.3,2.8.5; 2.9.1; 2.10.0,0,0,84,1,11,2,1,0,0,0,0,0,4,7,components/camel-jaxb/src/test/java/org/apache/camel/example/FallbackTypeConverterDoesNotThrowExceptionTest.java;components/camel-jaxb/src/test/java/org/apache/camel/example/FallbackTypeConverterShouldNotThrowExceptionTest.java;components/camel-jaxb/src/test/java/org/apache/camel/example/FallbackTypeConverterShouldNotThrowExceptionTest.java;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/FallbackTypeConverterShouldNotThrowExceptionTest.java;components/camel-jaxb/src/test/java/org/apache/camel/example/FallbackTypeConverterDoesNotThrowExceptionTest.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java;components/camel-jaxb/src/test/java/org/apache/camel/jaxb/CamelJaxbFallbackConverterTest.java;,0,0
4954,Bug,Resolved,Fixed,camel-core,Critical,Sebastian R?hl,2012/01/30 11:26:34 +0100,2012/02/02 15:50:00 +0100,Hadrian Zbarcea,2012/02/03 23:16:58 +0100,4.493333333,1.310393519,Camel 2.9.0 incapable of working with % in endpoint URIs,In the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.At first the java.net.Uri#getQuery will be called with according to the javadoc 'Returns the decoded query component of this URI' returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc 'Returns the decoded scheme-specific part of this URI.' returns a decoded URI.So to summarize we get in any case a decoded URI.This URI will then be than in the method org.apache.camel.util.URISupport#parseQuery(String) again decoded with java.net.URLDecoder#decode(String String).This code leads to the following behaviour: If a % is properly encoded with %25test the %25test will be substituted by the first call to %test and the decoded again which leads to an Exception.In the http://svn.apache.org/viewvc?view=revision&amp;revision=1166508 commit you can see that the % was uncommented from org.apache.camel.util#UnsafeUriCharactersEncoder. Maybe this is related.However... Double encoding of URIs seems quite odd. With any URI char there is no issue with that. But with % the % will be decoded again  which makes a % unusable in Camel.,2.9.0,2.9.1; 2.10.0,0,0,177,1,8,3,0,0,0,0,0,0,0,0,,0,0
4963,Improvement,Resolved,Fixed,camel-core; camel-ftp,Minor,serdar tunc,2012/01/31 15:41:07 +0100,2012/12/08 03:06:02 +0100,Willem Jiang,2012/12/14 12:43:38 +0100,317.8767477,6.401111111,antInclude support for case insensitive patterns,antIncude patterns are case sensitive. I need a case insensitive file matching pattern with file and ftp components.note: custom filters is not applicable since I read patterns from database there is no way to correlate the filters with the routes.,2.10.0,2.11.0,0,2,40,1,5,3,1,0,0,0,0,0,2,8,camel-core/src/main/java/org/apache/camel/component/file/AntPathMatcherFileFilter.java;camel-core/src/main/java/org/apache/camel/component/file/AntPathMatcherGenericFileFilter.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/util/AntPathMatcher.java;camel-core/src/test/java/org/apache/camel/component/file/AntPathMatcherGenericFileFilterTest.java;camel-core/src/test/java/org/apache/camel/util/AntPathMatcherTest.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;,1,1
4970,Bug,Resolved,Fixed,camel-saxon,Major,Lefteris Tsallas,2012/02/02 14:18:00 +0100,2012/02/06 02:47:48 +0100,Willem Jiang,2012/02/06 16:12:39 +0100,4.079618056,0.558923611,Cannot use xquery predicate in filter after an xpath splitter.,After upgrading from 2.5.0 to 2.9.0 using xqury predicate after an xpath filter throws java.lang.ClassCastException: net.sf.saxon.tinytree.TinyElementImpl cannot be cast to net.sf.saxon.om.DocumentInfo . Attached unit test doesn't fail in camel 2.5.0.from('direct:xpath') .split(xpathsplitter) .filter().xquery('//record&#91;type=2&#93;') .to('mock:result'); See nabble discussion http://camel.465427.n5.nabble.com/Unit-test-fails-after-upgrading-to-2-7-1-Cannot-use-xquery-expression-after-xpath-td4422582.html,2.8.0; 2.8.1; 2.8.2; 2.8.3; 2.9.0,2.8.5; 2.9.1; 2.10.0,0,0,41,1,2,1,1,1,0,0,0,1,1,2,camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryPredicateFilterTest.java;,0,0
4976,Bug,Resolved,Fixed,camel-core,Major,Hadrian Zbarcea,2012/02/04 00:17:57 +0100,2012/02/04 00:17:57 +0100,Hadrian Zbarcea,2012/02/07 03:40:24 +0100,3.140590278,3.140590278,Problem Removing Endpoints,(see context on the users@ list)When using removeEndpoints(String) with a pattern  some endpoints (like jms topics) are reported as removed but they are not.,2.9.0,2.9.1; 2.10.0,1,1,27,1,1,1,1,0,0,1,0,0,0,0,,0,0
4985,Bug,Resolved,Fixed,examples,Major,Christian Schneider,2012/02/06 11:36:47 +0100,2012/02/06 11:36:47 +0100,Christian Schneider,2012/02/06 11:39:22 +0100,0.001793981,0.001793981,Spring security example does not work,When you try to run the spring security example and access it from a browser you get 404. I debugged into it and the reason is that the camel context does not attach to the camel http servlet.,2.8.4; 2.9.0,2.8.5; 2.9.1; 2.10.0,0,0,38,1,0,0,1,1,0,1,0,0,1,6,examples/camel-example-spring-security/pom.xml;examples/camel-example-spring-security/src/main/resources/camel-context.xml;examples/camel-example-spring-security/src/main/resources/org/apache/camel/example/spring/security/camel-context.xml;examples/camel-example-spring-security/src/main/resources/org/apache/camel/example/spring/security/common-security.xml;examples/camel-example-spring-security/src/main/webapp/WEB-INF/applicationContext-security.xml;examples/camel-example-spring-security/src/main/webapp/WEB-INF/web.xml;,1,1
4986,Bug,Resolved,Fixed,camel-jmx,Minor,Erik Bakker,2012/02/06 14:02:48 +0100,2012/02/07 09:46:48 +0100,Babak Vahdat,2012/02/07 17:05:02 +0100,1.126550926,0.304328704,ManagedPerformanceCounterMBean should extend ManagedCounterMBean,ManagedPerformanceCounterMBean does not extend ManagedCounterMBean  while ManagedPerformanceCounter does extend ManagedCounter.,2.9.0,2.9.1; 2.10.0,0,0,10,1,2,2,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedPerformanceCounterMBean.java;,0,0
4989,Bug,Resolved,Fixed,camel-bindy,Major,Willem Jiang,2012/02/07 16:07:51 +0100,2012/02/07 16:07:51 +0100,Willem Jiang,2012/02/08 02:26:27 +0100,0.429583333,0.429583333,BindyDataFormat should not use the default encoding,Here is the mail thread&#91;1&#93; which discuss about it.&#91;1&#93;http://camel.465427.n5.nabble.com/Bindy-CSV-parser-uses-default-encoding-tp5456136p5456136.html,2.4.0; 2.5.0; 2.6.0; 2.7.0; 2.8.0; 2.9.0,2.8.5; 2.9.1; 2.10.0,0,0,11,1,1,1,1,1,0,0,0,0,1,3,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/kvp/BindyKeyValuePairDataFormat.java;,0,0
4993,Improvement,Resolved,Fixed,camel-cometd,Minor,Joshua Watkins,2012/02/08 11:05:03 +0100,2012/02/22 03:31:43 +0100,Willem Jiang,2012/06/02 13:16:50 +0100,115.0915162,101.406331,Add session information from cometd to camel message headers,The cometd component has the ability to authenticate a connection with a custom SecurityPolicy.&#91;1&#93; This information can then be added to the cometd session for further calls. Unfortunately  session attributes aren't passed to the camel message for processing by endpoints and processors further down the line. 1. http://cometd.org/documentation/2.x/howtos/authentication,2.9.0,2.10.0,0,0,52,1,6,2,1,0,0,1,0,0,2,4,components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometBindingTest.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdBinding.java;components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdEndpoint.java;components/camel-cometd/src/test/java/org/apache/camel/component/cometd/CometdProducerConsumerTest.java;,0,0
4994,Improvement,Resolved,Fixed,camel-spring,Minor,alex hutter,2012/02/08 17:53:58 +0100,2012/03/04 12:17:07 +0100,Claus Ibsen,2012/03/04 13:57:10 +0100,24.83555556,0.069479167,UnsupportedOperationException thrown if @Consume method is not public,If the org.apache.camel.Consume annotation is used on a method that is not public (e.g. default visibility)  then the following exception will be thrown every time a message is delivered to that consumer and the message will roll-back with the consumer never invoked.2012-02-08 16:29:37 298 [Camel Thread 0 - JmsConsumer&#91;paula.inprogress&#93; WARN org.apache.camel.component.jms.JmsMessageListenerContainer - Execution of JMS message listener failed  and no ErrorHandler has been set.org.apache.camel.RuntimeCamelException: java.lang.UnsupportedOperationException at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:115) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:243) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)Caused by: java.lang.UnsupportedOperationException at java.util.Collections$UnmodifiableMap.put(Collections.java:1285) at org.apache.camel.component.bean.BeanInfo.introspect(BeanInfo.java:256) at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:136) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:142) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:92) ... 11 moreI appreacate that this not specifically a bug  so I am filing this as an improvement. However this is a REALLY misleading error message. A more specific error message would be greaty appreaceated and save a lot of time. Thanks.,2.9.0,2.9.2; 2.10.0,0,0,151,1,2,1,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java;camel-core/src/test/java/org/apache/camel/impl/CamelPostProcessorHelperTest.java;,0,0
4996,Bug,Resolved,Fixed,camel-crypto,Major,Hadrian Zbarcea,2012/02/09 04:31:22 +0100,2012/02/09 04:31:22 +0100,Hadrian Zbarcea,2012/02/09 04:51:23 +0100,0.013900463,0.013900463,DigitalSignatureEndpoint not clearing headers after verify,The DigitalSignatureEndpoint has a clearHeaders option that is supposed to clear headers after a verify operation. However that is not working because the headers cleared are not the actual header values  but the name of the java String fields  which is irrelevant at runtime.The default value of the clearHeaders should also be true  so that Camel does not leave debris in the Exchange after a verify operation.,2.8.4,2.10.0,0,0,67,1,1,1,1,0,0,0,1,0,0,0,,0,0
5000,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2012/02/11 13:16:11 +0100,2012/02/11 13:16:11 +0100,Claus Ibsen,2012/02/11 14:19:21 +0100,0.043865741,0.043865741,Error handler not called when recipient list has non existing endpoint,Given this route onException(Exception.class) .handled(true) .to('mock:dead'); from('direct:start') .recipientList(constant('fail:endpoint')) .to('mock:result');You would assume the on exception will handle the exception from the recipient list with the non existing endpoint.This is not the case. We should let recipient list detect and let the error handler handle it.,2.8.4; 2.9.0,2.8.5; 2.9.1; 2.10.0,0,0,56,1,0,0,1,1,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/RecipientList.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/test/java/org/apache/camel/processor/RecipientListInvalidEndpointErrorHandlerTest.java;camel-core/src/test/java/org/apache/camel/processor/RecipientListInvalidEndpointIgnoreInvalidEndpointsTest.java;,0,0
5004,Bug,Resolved,Fixed,camel-core,Major,Anton Kudinov,2012/02/14 15:35:18 +0100,2012/02/16 06:51:17 +0100,Claus Ibsen,2012/02/16 08:03:54 +0100,1.686527778,0.050428241,Camel simple language wrong working with real number,I compute real number in route: &lt;setBody&gt;0.02&lt;/setBody&gt;After that I want to filter: &lt;filter&gt;&lt;simple&gt;${body} &gt; 0 &lt;/simple&gt; ... &lt;/filter&gt;This expression return false for value in body = 0.02,2.6.0,2.9.1; 2.10.0,0,1,27,1,1,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/simple/SimpleTokenizer.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleOperatorTest.java;,0,0
5005,Bug,Resolved,Fixed,camel-core,Minor,Achim Nierbeck,2012/02/14 16:08:59 +0100,2012/02/15 15:01:18 +0100,Claus Ibsen,2012/02/15 16:00:56 +0100,0.994409722,0.041412037,simple without embedded text results in an NPE,After switching to 2.9 the following results in a NPE&lt;camel:setBody&gt; &lt;camel:simple&gt;&lt;/camel:simple&gt;&lt;/camel:setBody&gt;I'm not sure if it is now required to have something in the content of the simple element. I used it for setting the body element to an empty string before (worked with 2.8.1),2.9.0,2.9.1; 2.10.0,0,0,51,1,1,1,1,0,0,0,0,0,1,7,camel-core/src/main/java/org/apache/camel/builder/PredicateBuilder.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/SimplePredicateParser.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;components/camel-spring/src/test/java/org/apache/camel/language/SpringSimpleEmptyStringTest.java;components/camel-spring/src/test/resources/org/apache/camel/language/SpringSimpleEmptyStringTest.xml;,0,0
5018,Improvement,Resolved,Fixed,camel-bindy,Major,Bruno Barin,2012/02/20 11:32:45 +0100,2012/02/22 02:04:46 +0100,Willem Jiang,2012/03/03 14:11:15 +0100,12.11006944,10.50450231,Support unmarshall of CSV files that does not contain all fields described in the annotated POJO.,Actually when trying to unmarshall a CSV that does not contain all the fields described via @DataField annotation  an IllegalArgumentException is thrown. Would be better to define a default value for non required fields via @DataField annotation and therefore  not fail.,2.9.0,2.10.0,0,1,41,1,8,3,1,0,0,0,0,0,1,4,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/oneclass/Order.java;,0,0
5024,Bug,Resolved,Fixed,camel-core,Major,Razvan Ludvig,2012/02/21 14:22:54 +0100,2012/02/21 16:10:15 +0100,Willem Jiang,2012/02/22 04:39:05 +0100,0.594571759,0.520023148,Streaming splitter ignores exception handling,If an exception occurs on the next() call of an Iterator in a streaming splitter  the exception is never propagated to the exception or the error handler. This will lead to improper route termination  and inifite rollback/retry cycles.I attached the minimal test case demonstrating the issue.,2.8.3; 2.8.4; 2.9.0,2.8.5; 2.9.1; 2.10.0,0,0,46,1,1,1,1,1,0,0,1,0,1,2,camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/test/java/org/apache/camel/processor/SplitterStreamingWithErrorHandlerTest.java;,0,0
5035,Bug,Resolved,Fixed,camel-cxf,Major,Willem Jiang,2012/02/24 05:30:14 +0100,2012/02/24 05:30:14 +0100,Willem Jiang,2012/02/24 07:18:09 +0100,0.07494213,0.07494213,CxfProducer should release the CXF when the Producer is stopped.,CXF ClientImpl has the requestContext need to be cleaned when the CxfProducer is stopped.If we don't call the Client.destory() method  the requestContext will cause the memory leak.,2.6.0; 2.7.5; 2.8.4; 2.9.0,2.8.5; 2.9.1; 2.10.0,0,0,27,1,1,1,1,1,0,1,1,0,3,14,components/camel-flatpack/src/main/java/org/apache/camel/component/flatpack/FixedLengthEndpoint.java;components/camel-flatpack/src/test/data/fixedLong/PEOPLE-FixedLength.txt;components/camel-flatpack/src/test/data/fixedMixed/PEOPLE-FixedLength.txt;components/camel-flatpack/src/test/data/fixedShort/PEOPLE-FixedLength.txt;components/camel-flatpack/src/test/java/org/apache/camel/component/flatpack/FixedLengthAllowLongTest.java;components/camel-flatpack/src/test/java/org/apache/camel/component/flatpack/FixedLengthAllowShortAndLongTest.java;components/camel-flatpack/src/test/java/org/apache/camel/component/flatpack/FixedLengthAllowShortTest.java;components/camel-flatpack/src/test/resources/org/apache/camel/component/flatpack/FixedLengthAllowLongTest-context.xml;components/camel-flatpack/src/test/resources/org/apache/camel/component/flatpack/FixedLengthAllowShortAndLongTest-context.xml;components/camel-flatpack/src/test/resources/org/apache/camel/component/flatpack/FixedLengthAllowShortTest-context.xml;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerTest.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java;,2,2
5036,Bug,Resolved,Fixed,camel-core,Major,Stefan Burkard,2012/02/24 10:44:21 +0100,2012/02/24 16:18:17 +0100,Claus Ibsen,2012/02/24 16:43:58 +0100,0.249733796,0.017835648,Camel route with bean element sends on startup invalid message to target route that is represented by a proxy who exposes route,I expose a Camel route with a direct endpoint defined in an OSGi bundle with the &lt;camel:proxy&gt; and &lt;osgi:service&gt; tags. The reason for this is to be able to call this direct-route in other routes (defined in other bundles) as a 'sub-route' directly as bean &#91;.bean(routeproxy  &quot;method&quot;)&#93;. This works as expected.But on route startup the toString method is called on the route (for a description) which is propagated to the elements of the route. Therefore my bean-element (which is the direct-route-proxy) receives the toString call and the CamelInvocationHandler converts this toString call to a message and sends it to the direct-route. This more or less empty message is of course not valid for the target route and produces an error on bundle startup. Shouldn't the toString call be suppressed by the proxy  since toString is not part of the Interface the proxy represents? Or is my approach a not recommended or problematic approach?Parts of stacktrace to show the way from route startup to the produced message=&gt; route receives 'empty' message&#91;omitted&#93; at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45) at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65) at $Proxy568.toString(Unknown Source) at sun.reflect.GeneratedMethodAccessor406.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597)=&gt; toString call is converted to message and sent to route&#91;omitted&#93; at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy583.toString(Unknown Source) at org.apache.camel.component.bean.ConstantBeanHolder.toString(ConstantBeanHolder.java:48)=&gt; toString called on bean-element in route (bean is a proxy for a route) &#91;omitted&#93; at java.lang.String.valueOf(String.java:2826) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.apache.camel.impl.EventDrivenConsumerRoute.toString(EventDrivenConsumerRoute.java:46) at org.apache.camel.management.mbean.ManagedRoute.&lt;init&gt;(ManagedRoute.java:41) at org.apache.camel.management.DefaultManagementLifecycleStrategy.onRoutesAdd(DefaultManagementLifecycleStrategy.java:368) at org.apache.camel.impl.RouteService.doStart(RouteService.java:109)=&gt; Route startup,2.2.0,2.9.1; 2.10.0,0,1,235,1,1,1,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/bean/ConstantBeanHolder.java;,0,0
5048,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/02/28 06:40:43 +0100,2012/02/28 06:40:43 +0100,Claus Ibsen,2012/02/28 10:20:35 +0100,0.152685185,0.152685185,Memory leak in SedaComponent if adding and removing a lot of seda endpoints with different queue names,If you add and remove a lot of seda endpoints with different queue names  then the seda component may keep references to non used queues.,2.9.0,2.9.1; 2.10.0,0,0,25,1,0,0,1,0,0,1,1,0,1,5,camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/main/java/org/apache/camel/component/vm/VmComponent.java;camel-core/src/test/java/org/apache/camel/component/seda/SedaComponentReferenceEndpointTest.java;camel-core/src/test/java/org/apache/camel/component/vm/VmComponentReferenceEndpointTest.java;,0,0
5049,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/02/28 14:29:24 +0100,2012/02/28 14:29:24 +0100,Claus Ibsen,2012/02/28 14:34:59 +0100,0.003877315,0.003877315,Memory leak in TimerListener if JMX enabled,If adding and removing a lot of routes  and you have JMX enabled with load statistics  then it may leak memory  as the route listener is not properly removed when the route is removed  due invalid equals/hashCode.,2.9.0,2.9.1; 2.10.0,0,0,37,1,0,0,1,0,0,1,1,0,1,3,camel-core/src/main/java/org/apache/camel/TimerListener.java;camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRoute.java;camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java;,2,2
5052,Improvement,Closed,Fixed,camel-core,Major,Christian M?ller,2012/02/29 00:29:52 +0100,2012/02/29 00:29:52 +0100,Christian M?ller,2012/04/30 11:17:23 +0100,61.44966435,61.44966435,DefaultUnitOfWork should copy headers from the original message if it's a JmsMessage,see Nabble for details,2.9.0,2.8.5; 2.9.3; 2.10.0,0,0,7,1,1,1,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMessageAsOriginalMessageInDefaultUnitOfWorkTest.java;,0,0
5055,Improvement,Resolved,Fixed,camel-activemq; camel-jms,Major,Torsten Mielke,2012/02/29 15:54:03 +0100,2012/05/21 09:08:18 +0100,Babak Vahdat,2012/05/26 16:25:37 +0100,87.0219213,5.30369213,Offer a way to not set a transaction manager in camel-jms,The following sample Spring config sets up a camel-activemq component&lt;bean id='activemq' class='org.apache.activemq.camel.component.ActiveMQComponent'&gt; &lt;property name='configuration' ref='jmsConfigAmq' /&gt; &lt;/bean&gt; &lt;bean id='jmsConfigAmq' class='org.apache.activemq.camel.component.ActiveMQConfiguration' &gt; &lt;property name='connectionFactory' ref='jmsPooledConnectionFactory' /&gt; &lt;property name='transacted' value='true'/&gt; &lt;!-- &lt;property name='transactionManager' ref='jmsTransactionManager' /&gt; --&gt; &lt;property name='cacheLevelName' value='CACHE_CONSUMER'/&gt; &lt;/bean&gt; &lt;bean id='jmsTransactionManager' class='org.springframework.jms.connection.JmsTransactionManager'&gt; &lt;property name='connectionFactory' ref='jmsPooledConnectionFactory' /&gt; &lt;/bean&gt; &lt;bean id='jmsConnectionFactory' class='org.apache.activemq.ActiveMQConnectionFactory'&gt; &lt;property name='brokerURL' value='tcp://localhost:61617' /&gt; &lt;property name='watchTopicAdvisories' value='false' /&gt; &lt;/bean&gt; &lt;bean id='jmsPooledConnectionFactory' class='org.apache.activemq.pool.PooledConnectionFactory' &gt; &lt;property name='maxConnections' value='1'/&gt; &lt;property name='connectionFactory' ref='jmsConnectionFactory'/&gt; &lt;/bean&gt;The ActiveMQConfiguration sets transacted=true and configures for a JmsTransactionManager. Also  a PooledConnectionFactory is used. The config for a camel-jms component would be similar.The Spring JMS javadoc on AbstractPollingMessageListenerContainer.setTransactionManager states:Note: Consider the use of local JMS transactions instead. Simply switch the 'sessionTransacted' flag to 'true' in order to use a locally transacted JMS Session for the entire receive processing  including any Session operations performed by a SessionAwareMessageListener (e.g. sending a response message).It basically advises to only set transacted=true and don't specify a TX manager. The benefit of doing so is that the cacheLevel setting will be honored when using local transactions without a configured TX manager. When a TX manager is configured  no caching happens at DMLC level and its necessary to rely on a pooled connection factory. This is discussed here.However right now its not possible to configure the cameljms or camel-activemq component to not use an external TX manager when transacted=true is set.Even when setting lazyCreateTransactionManager=false.In case of camel-activemq  it still creates a default JmsTransactionManager:ActiveMQConfiguration.javapublic PlatformTransactionManager getTransactionManager() { PlatformTransactionManager answer = super.getTransactionManager(); if (isTransacted() &amp;&amp; answer == null) { // lets auto-default the transaction manager if its not specified answer = createTransactionManager(); setTransactionManager(answer); answer = getTransactionManager(); } return answer;}In case of camel-jms it throws an exception:JmsConfiguration.javaPlatformTransactionManager tm = getTransactionManager();if (tm != null) { container.setTransactionManager(tm);} else if (transacted) { throw new IllegalArgumentException('Property transacted is enabled but a transactionManager was not injected!');}We should allow for using transactions in camel-jms and camel-activemq without setting an external TX manager.,2.9.0,2.10.0,0,6,415,1,9,4,0,0,0,0,0,0,3,8,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java;,0,0
5058,Bug,Resolved,Fixed,camel-core,Major,Zach Calvert,2012/03/02 17:35:58 +0100,2012/03/03 12:22:27 +0100,Claus Ibsen,2012/03/07 23:19:45 +0100,5.238738426,4.456458333,Bug: Unique Endpoints Leaking in DefaultInflightRepository,If you have an endpoint protocol which uses unique URIs you will leak Strings in the HashMap stored in the DefaultInflightRepository (org.apache.camel.impl.DefaultInflightRepository)It seems there is a reference counting scheme in place  but it doesn't do a remove until the 'stop' method is called to shut the system down. We are running XMPP endpoints  which use a protocol like xmpp://someaccount@domain/password?to=someOtherAccountWhen there are 10 million accounts  not all of which are active  but all of which may message at some time or another  no references are removed to the endpointCount.When the count becomes 0  the reference should be removed and the size method will still return the appropriate result.Please be careful in the implementation to synchronize on some object (perhaps the AtomicInteger) reflecting a read/write lock on the endpoint count modification.,2.9.0,2.9.2; 2.10.0,0,1,129,1,17,3,0,0,0,1,1,0,4,8,camel-core/src/main/java/org/apache/camel/impl/DefaultInflightRepository.java;camel-core/src/test/java/org/apache/camel/impl/DefaultInflightRepositoryConcurrentTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultInflightRepositoryConcurrentTest.java;camel-core/src/main/java/org/apache/camel/impl/DefaultInflightRepository.java;camel-core/src/main/java/org/apache/camel/impl/RouteService.java;camel-core/src/main/java/org/apache/camel/spi/InflightRepository.java;camel-core/src/test/java/org/apache/camel/impl/InflightRepositoryRemoveRouteTest.java;camel-core/src/test/java/org/apache/camel/impl/DefaultInflightRepositoryConcurrentTest.java;,1,1
5063,Bug,Resolved,Fixed,camel-core,Minor,Preben Asmussen,2012/03/06 16:27:55 +0100,2012/03/18 11:38:37 +0100,Claus Ibsen,2012/03/18 12:27:32 +0100,11.83306713,0.033969907,npe in camel 2.9.1 validator,validator component seems broken in 2.9.1. Gives you a npe when loading xsd from classpath during unittesting.See http://camel.465427.n5.nabble.com/npe-in-camel-2-9-1-validator-tc5540894.htmlprefixing with classpath eg. &lt;to uri='validator:classpath:BroadcastMonitor.xsd' /&gt; doesn't help.,2.9.1,2.9.2; 2.10.0,1,1,29,1,5,3,1,0,0,0,0,1,1,6,camel-core/src/main/java/org/apache/camel/component/validator/DefaultLSResourceResolver.java;camel-core/src/test/java/org/apache/camel/component/validator/ValidatorIllegalImportTest.java;camel-core/src/test/resources/org/apache/camel/component/validator/BroadcastMonitor.xsd;camel-core/src/test/resources/org/apache/camel/component/validator/BroadcastMonitorFixed.xsd;camel-core/src/test/resources/org/apache/camel/component/validator/health.xsd;camel-core/src/test/resources/org/apache/camel/component/validator/person.xsd;,0,0
5080,Bug,Resolved,Fixed,,Minor,Jo?o Anacleto,2012/03/13 19:14:18 +0100,2012/03/15 13:39:23 +0100,Claus Ibsen,2012/03/15 13:44:55 +0100,1.771261574,0.003842593,camel-jt400 - Parameter length when doing Program Call issue,When the length of each parameter of a program.PGM is greater than the length of his values  the parameters are setted incorrectly.Example:Input of program.pgm:param1 -&gt; A5 (alphanumeric with length 5) param2 -&gt; A5 (alphanumeric with length 5) When the String array is {'123'  '456'} the values are setted on each parameter as:param1 = 12345param2 = 6,2.8.0,2.8.5; 2.9.2; 2.10.0,0,1,56,1,4,2,1,0,0,0,0,0,1,1,components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmProducer.java;,0,0
5081,Improvement,Closed,Fixed,tests,Major,Christian M?ller,2012/03/13 22:05:34 +0100,2012/03/13 22:05:34 +0100,Christian M?ller,2012/03/13 22:41:30 +0100,0.024953704,0.024953704,org.apache.camel.component.mybatis.MyBatisBatchConsumerTest.testBatchConsumer() fails unpredictable,I assume we see this failure when we inserted the first test into the database (and only the first one) when the mybatis consumer starts to poll the database. See build failure: https://builds.apache.org/job/Camel.2.8.x.fulltest/org.apache.camel$camel-mybatis/149/,2.8.4; 2.9.1,2.8.5; 2.9.2; 2.10.0,0,0,36,1,0,0,1,1,0,0,0,0,1,16,components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisConsumer.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisBatchConsumerTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisDeleteTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisInsertTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisPollingDelayRouteTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisQueueTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisRouteEmptyResultSetTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisSelectListTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisSelectListWithSplitTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisSelectOneTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisShutdownAllTasksTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisShutdownCurrentTaskOnlyTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisTestSupport.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisUnknownStatementTypeTest.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisUpdateTest.java;components/camel-mybatis/src/test/resources/SqlMapConfig.xml;,0,0
5097,Bug,Resolved,Fixed,,Minor,Hadrian Zbarcea,2012/03/16 03:47:23 +0100,2012/03/16 03:47:23 +0100,Hadrian Zbarcea,2012/03/16 03:49:21 +0100,0.001365741,0.001365741,Incorrect feature definition for camel-fop,Incorrect feature definition for camel-fop,2.10.0,2.10.0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,,0,0
5099,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/03/16 09:25:09 +0100,2012/03/16 09:25:09 +0100,Claus Ibsen,2012/03/16 09:29:11 +0100,0.002800926,0.002800926,Timer component - Should use thread name pattern so the thread name is aligned with the Camel threads,When using the timer component  the thread name will just be the timer name.Before2012-03-16 09:28:42 857 [foo ] INFO route1 - Fired timerAfter2012-03-16 09:28:18 611 [Camel (camel-1) thread #0 - foo ] INFO route1 - Fired timer,2.9.0,2.9.2; 2.10.0,0,0,49,1,0,0,1,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/component/timer/TimerComponent.java;camel-core/src/test/java/org/apache/camel/component/timer/TimerRouteTest.java;camel-core/src/main/java/org/apache/camel/component/timer/TimerComponent.java;,0,0
5100,Improvement,Resolved,Fixed,camel-spring,Minor,Claus Ibsen,2012/03/16 12:30:49 +0100,2012/03/16 12:32:10 +0100,Babak Vahdat,2012/03/16 19:23:34 +0100,0.286631944,0.285694444,Add option autogenColumns to csv data format in XML DSL,See nabblehttp://camel.465427.n5.nabble.com/CSV-dateformat-bug-Attribute-AutogenColumns-is-not-allowed-to-appear-in-element-camel-csv-tp5570066p5570066.htmlThis option is not exposed in the &lt;csv&gt; data format in the XML DSLs,2.9.0,2.9.2; 2.10.0,0,0,18,1,4,2,1,0,0,0,0,0,2,4,camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvMarshalAutogenColumnsSpringTest.java;components/camel-csv/src/test/resources/org/apache/camel/dataformat/csv/CsvMarshalAutogenColumnsSpringTest-context.xml;camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java;,0,0
5102,Bug,Resolved,Fixed,camel-core; jmx,Trivial,Claus Ibsen,2012/03/16 17:19:13 +0100,2012/03/16 17:19:13 +0100,Claus Ibsen,2012/03/16 17:26:04 +0100,0.004756944,0.004756944,Timer endpoint getState does not work in JMX,The getState attribute does not work.,2.9.0,2.9.2; 2.10.0,0,0,6,1,0,0,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java;,0,0
5105,Improvement,Resolved,Fixed,camel-spring,Minor,Babak Vahdat,2012/03/17 21:38:56 +0100,2012/03/17 21:38:56 +0100,Babak Vahdat,2012/03/17 22:05:14 +0100,0.018263889,0.018263889,Add the options configRef and strategyRef to csv data format in XML DSL,CAMEL-5100 provided the autogenColumns option which doesn't bring much on it's own (default is true)  which with an explicit value set to false nothing will be appended into the output other than '/n''s.So using the configRef and strategyRef options we could then bring the same power of expression inside XML DSL like inside Java. Following a sample where the user can customize the used CSVConfig and/or CSVStrategy being used: &lt;camelContext id='camel' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;route&gt; &lt;from uri='direct:start' /&gt; &lt;marshal&gt; &lt;csv autogenColumns='false' delimiter='|' configRef='csvConfig1' /&gt; &lt;/marshal&gt; &lt;convertBodyTo type='java.lang.String' /&gt; &lt;to uri='mock:result' /&gt; &lt;/route&gt; &lt;route&gt; &lt;from uri='direct:start2' /&gt; &lt;marshal&gt; &lt;!-- make use of a strategy other than the default one which is 'org.apache.commons.csv.CSVStrategy.DEFAULT_STRATEGY' --&gt; &lt;csv autogenColumns='false' delimiter='|' configRef='csvConfig2' strategyRef='excelStrategy' /&gt; &lt;/marshal&gt; &lt;convertBodyTo type='java.lang.String' /&gt; &lt;to uri='mock:result2' /&gt; &lt;/route&gt; &lt;/camelContext&gt; &lt;bean id='csvConfig1' class='org.apache.commons.csv.writer.CSVConfig'&gt; &lt;property name='fields'&gt; &lt;list&gt; &lt;!-- here we're only interested in 'item' but not in 'orderId' or 'amount' --&gt; &lt;bean class='org.apache.commons.csv.writer.CSVField'&gt; &lt;property name='name' value='item' /&gt; &lt;/bean&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id='csvConfig2' class='org.apache.commons.csv.writer.CSVConfig'&gt; &lt;property name='fields'&gt; &lt;list&gt; &lt;!-- here we're interested in both 'orderId' and 'amount' but not in 'item' --&gt; &lt;bean class='org.apache.commons.csv.writer.CSVField'&gt; &lt;property name='name' value='orderId' /&gt; &lt;/bean&gt; &lt;bean class='org.apache.commons.csv.writer.CSVField'&gt; &lt;property name='name' value='amount' /&gt; &lt;/bean&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id='excelStrategy' class='org.springframework.beans.factory.config.FieldRetrievingFactoryBean'&gt; &lt;property name='staticField' value='org.apache.commons.csv.CSVStrategy.EXCEL_STRATEGY' /&gt; &lt;/bean&gt;,2.9.0,2.9.2; 2.10.0,0,0,260,1,1,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/dataformat/CsvDataFormat.java;components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvMarshalAutogenColumnsSpringTest.java;components/camel-csv/src/test/resources/org/apache/camel/dataformat/csv/CsvMarshalAutogenColumnsSpringTest-context.xml;,0,0
5108,Improvement,Resolved,Fixed,camel-restlet,Minor,Michael Shorter,2012/03/20 13:53:27 +0100,2012/06/08 08:11:04 +0100,Claus Ibsen,2012/06/08 08:17:10 +0100,79.76646991,0.004236111,Set Restlet Server Options and Return HTTP Headers Set in Exchange,The underlying Restlet server options can now be set via an Endpoint option.HTTP headers (e.g. Expires or Last Modified) are returned properly from the exchange to the Restlet.,2.9.1,2.8.6; 2.9.3; 2.10.0,0,1,28,1,5,2,1,0,0,0,0,0,1,5,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletBinding.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletAddRouteTest.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletRestartRouteTest.java;,0,0
5115,Bug,Resolved,Fixed,camel-cxf,Major,Willem Jiang,2012/03/25 10:29:46 +0100,2012/03/25 10:29:46 +0100,Willem Jiang,2012/03/31 06:42:26 +0100,5.84212963,5.84212963,CxfBeanDestination should copy the in message header to the out message,User complains about can not access any other headers after the cxfbean in this mail thread&#91;1&#93;.We should let the CxfBeanDestination copy the in message header before it sends the message back.&#91;1&#93;http://camel.465427.n5.nabble.com/Camel-CXF-Drops-Headers-tt5590792.html,2.6.0; 2.7.0; 2.8.0; 2.9.0,2.8.5; 2.9.2; 2.10.0,0,0,34,1,2,1,1,1,0,0,0,0,1,3,components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/common/message/DefaultCxfMesssageMapper.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/cxfbean/CxfBeanTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/cxfbean/CxfBeanTest-context.xml;,0,0
5122,Bug,Resolved,Fixed,camel-rmi,Major,Jean-Baptiste Onofr?,2012/03/27 14:38:12 +0100,2012/06/11 08:18:50 +0100,Claus Ibsen,2012/06/11 08:42:26 +0100,75.75293981,0.016388889,RMI endpoint doesn't handle nested exception and raise CamelRuntimeException instead of RemoteException,When we have a route looking like:&lt;from uri='rmi:...'/&gt;&lt;to uri='myBean'/&gt;if an exception is raised on myBean  the RMI endpoint ignores the exception described in the RemoteInterface and always raises a RuntimeCamelException nesting the original exceptions.More over  RuntimeCamalException should not be raised by the RMI endpoint. It would make more sense to raise a RemoteException  as we are on a RMI endpoint.,2.2.0; 2.3.0; 2.4.0; 2.5.0; 2.6.0; 2.7.0; 2.7.3; 2.8.5; 2.9.2,2.9.3; 2.10.0,0,1,60,1,1,1,0,1,0,0,0,0,1,7,components/camel-rmi/src/main/java/org/apache/camel/component/rmi/RmiConsumer.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/DamnException.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/EchoService.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/IEcho.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/RmiConcurrencyTest.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/RmiDamnExceptionTest.java;components/camel-rmi/src/test/java/org/apache/camel/component/rmi/RmiIllegalArgumentExceptionTest.java;,0,0
5140,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/04/05 11:55:26 +0100,2012/04/05 11:55:26 +0100,Claus Ibsen,2012/04/05 12:37:59 +0100,0.029548611,0.029548611,bean component - @Handler should take precedence in a bean that implements Predicate,If you use a bean in a Camel route  and have not specified the method name to invoke. Then Camel has to scan for suitable methods to use. And for that we have the @Handler annotation which should take precedence in this process. However if the bean implements Predicate  or Processor  then Camel will use that. However the @Handler should be used instead  as this is what the end-user expects. And also what we tell in the docs.,2.9.1,2.9.2; 2.10.0,0,0,78,1,0,0,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanHandlerMethodPredicateTest.java;camel-core/src/test/java/org/apache/camel/component/bean/MyHandlerPredicateBean.java;,0,0
5162,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/04/11 07:23:40 +0100,2012/04/11 07:23:40 +0100,Claus Ibsen,2012/04/11 08:16:30 +0100,0.036689815,0.036689815,OnException - Handler or Continued predicate is invoked twice per exception,See CAMEL-5139When using handled(predicate) or continued(predicate) those is evaluated twice per exception. We should only do this once  which is what the end user would normally except.,2.9.1,2.9.2; 2.10.0,0,0,43,1,0,0,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinuePredicateTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueTwoPredicateTest.java;,0,0
5167,Improvement,Resolved,Fixed,,Major,Radoslaw Szymanek,2012/04/12 10:49:20 +0100,2012/04/13 05:40:00 +0100,Claus Ibsen,2012/04/13 15:39:35 +0100,1.2015625,0.416377315,onException policy within global context lost when error handler redefined within route context.,This may as well be Camel feature (limitation of Java DSL)  but I found no indications/warning that this is a feature in Camel book or web documentation. The route is somewhat ill defined as local errorHandler should be placed before bean part  but maybe for those types of mistakes it should not have this nasty side effects of loosing global onException policy  but at least complain during route creation . Moreover  the route works properly if I remove global error handler  so it is rather nasty effect if route definition correctness depends on the existence of the global error handler definition.If I move local errorHandler before bean part then the my test passes as the onException policy is triggered and works properly. As soon as I redefine the error handler within a route the onException policy is no longer applicable for the route and the route propagates the exception back to the caller.  errorHandler(defaultErrorHandler().maximumRedeliveries(1)); onException(NullPointerException.class).setOnRedelivery(new NullRegistrationDateProcessor()); from('direct:toPropertyFile').routeId('registrationEntryToPropertyFile') .setHeader(Exchange.FILE_NAME  simple('${body.firstname}.${body.surname}')) .bean(RegistrationToPropertiesBean.class  'convert') // Potential bug in Camel  if the same error handler like global is turned on then onException defined in global context will not be picked up. .errorHandler(defaultErrorHandler().maximumRedeliveries(1)) // the code above is working if no default handler was created for a global context. .to('file://' + outFolder);,2.9.1,2.10.0,0,0,235,1,5,2,0,0,0,1,0,0,1,1,camel-core/src/test/java/org/apache/camel/issues/SameRouteAndContextScopedErrorHandlerIssueTest.java;,0,0
5177,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2012/04/16 10:06:36 +0100,2012/04/16 10:06:36 +0100,Claus Ibsen,2012/04/23 06:32:52 +0100,6.851574074,6.851574074,Avoid parsing URI each time when getting uri from endpoint,In Camel 2.9  a new EndpointConfiguration was introduced  which has more fine grained details about an URI.However the getEndpointUri method on Endpoint is now parsing the uri on each call  this is not needed  and is also unnecessary overhead.We should parse this once.Also Camel's built-in type converter should be used during the parsing  and not just the hardcoded PropertyEditorTypeConverter which is to be considered removed as its not thread safe causes unforeseen side effects when 3rd party projects register property converter,2.9.0,2.9.3; 2.10.0,0,0,83,1,1,1,0,0,0,0,1,0,3,10,components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcConfigurationTest.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeansRouterTest.java;camel-core/src/main/java/org/apache/camel/EndpointConfiguration.java;camel-core/src/main/java/org/apache/camel/impl/ConfigurationHelper.java;camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java;camel-core/src/main/java/org/apache/camel/impl/DefaultEndpointConfiguration.java;camel-core/src/main/java/org/apache/camel/impl/MappedEndpointConfiguration.java;camel-core/src/test/java/org/apache/camel/impl/ConfigurationHelperTest.java;camel-core/src/test/java/org/apache/camel/impl/EndpointConfigurationTest.java;,0,0
5178,Improvement,Resolved,Fixed,camel-core,Major,Anders,2012/04/16 11:35:58 +0100,2012/04/18 11:42:11 +0100,Claus Ibsen,2012/04/18 13:30:30 +0100,2.079537037,0.075219907,'IOException: No space left on device' exception swallowed by camel,When routing a file using the GenericFileConsumer object an exception is swallowed if the lock file cant be created (i.e there is no harddrive space).GenericFileConsumer.javaprotected void processExchange(final Exchange exchange) { GenericFile&lt;T&gt; file = getExchangeFileProperty(exchange); log.trace('Processing file: {}'  file); // must extract the absolute name before the begin strategy as the file could potentially be pre moved // and then the file name would be changed String absoluteFileName = file.getAbsoluteFilePath(); // check if we can begin processing the file try { final GenericFileProcessStrategy&lt;T&gt; processStrategy = endpoint.getGenericFileProcessStrategy(); boolean begin = processStrategy.begin(operations  endpoint  exchange  file); if (!begin) { log.debug(endpoint + ' cannot begin processing file: {}'  file); // begin returned false  so remove file from the in progress list as its no longer in progress endpoint.getInProgressRepository().remove(absoluteFileName); return; } } catch (Exception e) { if (log.isDebugEnabled()) { log.debug(endpoint + ' cannot begin processing file: ' + file + ' due to: ' + e.getMessage()  e); } endpoint.getInProgressRepository().remove(absoluteFileName); return; }....}When processStrategy.begin(operations  endpoint  exchange  file); throws an java.io.IOException this is swallowed in the catch method and never propagated to the error handling of camel. Output from log is: 11:33:44.290 [Camel (camel-2) thread #1 - file:/Users/xxxx/yyyy/Files/] DEBUG o.a.c.component.file.FileConsumer - Endpoint[file:/Users/xxxx/yyyy/Files/] cannot begin processing file: GenericFile[//Users/xxxx/yyyy/Files/file01] due to: No space left on devicejava.io.IOException: No space left on device at java.io.UnixFileSystem.createFileExclusively(Native Method) ~[na:1.6.0_31] at java.io.File.createNewFile(File.java:883) ~[na:1.6.0_31] at org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock(MarkerFileExclusiveReadLockStrategy.java:54) ~[camel-core-2.9.0.jar:2.9.0] at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:46) ~[camel-core-2.9.0.jar:2.9.0] at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:46) ~[camel-core-2.9.0.jar:2.9.0] at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:308) [camel-core-2.9.0.jar:2.9.0] at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:175) [camel-core-2.9.0.jar:2.9.0] at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:136) [camel-core-2.9.0.jar:2.9.0] at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:140) [camel-core-2.9.0.jar:2.9.0] at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.9.0.jar:2.9.0] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_31] at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_31] at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_31] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_31] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_31] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_31] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_31] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_31] at java.lang.Thread.run(Thread.java:680) [na:1.6.0_31]I have tried both tried error handling on the route and the DefaultErrorHandler way but this exception is never handled by the methods  ie Camel log them and then swallow them.,2.9.0; 2.9.1,2.9.3; 2.10.0,0,0,338,1,4,2,0,1,0,0,0,0,3,6,camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/impl/DefaultConsumer.java;camel-core/src/main/java/org/apache/camel/impl/LoggingExceptionHandler.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerCustomExceptionHandlerTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerCustomExceptionHandlerTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumerCustomExceptionHandlerTest.java;,0,0
5180,Bug,Resolved,Fixed,camel-bindy,Minor,Magnus Palm?r,2012/04/16 18:51:14 +0100,2012/04/17 08:41:04 +0100,Claus Ibsen,2012/04/17 08:57:28 +0100,0.587662037,0.011388889,Backmerge CAMEL-5018 to the Bindy component for non-required fields,The issue  originally reported via CAMEL-5133  is to backmerge the CAMEL-5018 fix into the 2.9.x branch.I merged revision 1292164 into my local 2.9.x branch that I had updated with two new test cases.Before merge one test failed  after merge all tests were successfull.Attaching the updated model and tabtest.&#8212; Revision: 1292164Author: ningjiangDate: den 22 februari 2012 08:49:40Message:CAMEL-5018 support the set the default value on the field of bindy CVSModified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.javaModified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.javaModified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.javaModified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/oneclass/Order.java,2.9.1,2.9.3,0,0,132,1,2,2,0,0,0,0,0,0,1,2,components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyTabSeparatorTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/tab/PurchaseOrder.java;,0,0
5187,Bug,Resolved,Fixed,camel-core,Minor,christian ohr,2012/04/17 14:18:24 +0100,2012/04/18 08:32:50 +0100,Claus Ibsen,2012/04/18 09:00:10 +0100,0.77900463,0.018981481,JMX issues on WebSphere,While setting up a Camel web application for WebSphere (7) I encountered two issues1. Documentation: the Camel JMX docs proposes the following settings for WebSphere:&lt;camel:jmxAgent id='agent' createConnector='true' mbeanObjectDomainName='org.yourname' mbeanServerDefaultDomain='WebSphere'/&gt;This registers the beans with the PlatformMbeanServer instead of the WebSphere MBean server. The following setup works better:&lt;camel:jmxAgent id='agent' createConnector='false' mbeanObjectDomainName='org.yourname' usePlatformMBeanServer='false' mbeanServerDefaultDomain='WebSphere'/&gt;2. For each Camel route  the same Tracer and DefaultErrorHandler MBeans are tried to be registered over and over again. Because WebSphere changes the ObjectNames on registration  server.isRegistered(name); in DefaultManagementAgent#registerMBeanWithServer always returns false  which causes the MBean to be re-registered  which again cause Exceptions  e.g.14:35:48 198 [WebContainer : 4] [] WARN - DefaultManagementLifecycleStrategy.onErrorHandlerAdd(485) | Could not register error handler builder: ErrorHandlerBuilderRef[CamelDefaultErrorHandlerBuilder] as ErrorHandler MBean.javax.management.InstanceAlreadyExistsException: org.apache.camel:cell=wdf-lap-0319Node01Cell name='DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)' context=wdf-lap-0319/camelContext type=errorhandlers node=wdf-lap-0319Node01 process=server1 at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:465) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1496) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:975) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:929) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324) at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:494) at com.ibm.ws.management.PlatformMBeanServer.registerMBean(PlatformMBeanServer.java:484) at org.apache.camel.management.DefaultManagementAgent.registerMBeanWithServer(DefaultManagementAgent.java:320) at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:236)...The web application starts up  but with a lot of exceptions in the log.Proposal:Instead of using a Set&lt;ObjectName&gt; for mbeansRegistered  use a Map&lt;ObjectName  ObjectName&gt; where the key is the 'Camel' ObjectName and the value is the actually deployed ObjectName.I will provide a patch that illustrates the idea.,2.9.1,2.9.3; 2.10.0,0,0,212,1,1,1,0,0,0,0,1,0,1,2,camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java;camel-core/src/test/java/org/apache/camel/management/DefaultManagementAgentMockTest.java;,0,0
5189,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2012/04/18 13:19:05 +0100,2012/04/18 13:19:05 +0100,Claus Ibsen,2012/04/18 14:00:51 +0100,0.02900463,0.02900463,Bean component - Should preserver properties from exchange to allow to transfer state,See nabblehttp://camel.465427.n5.nabble.com/Stateful-Dynamic-Router-tp5647070p5647070.htmlThis allows other EIPs such as the dynamic route to use state when using a bean as its expression.,2.9.0,2.9.3; 2.10.0,0,2,23,1,3,3,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/bean/BeanExpression.java;camel-core/src/test/java/org/apache/camel/processor/DynamicRouterExchangeHeadersTest.java;camel-core/src/test/java/org/apache/camel/processor/DynamicRouterExchangePropertiesTest.java;,0,0
5192,Bug,Resolved,Fixed,camel-cxf; camel-spring; camel-spring-integration,Major,Jean-Baptiste Onofr?,2012/04/19 09:15:36 +0100,2012/06/03 15:53:24 +0100,Claus Ibsen,2012/06/03 15:53:24 +0100,45.27625,0,spring.schema is not up to date,The URI of the Spring schema has been updated in Camel 2.9.1 and 2.8.4:http://camel.apache.org/schema/cxf/We can see that starting from 2.9.1 and 2.8.4  we suffix the schema with -spring or -blueprint.However  the spring.schema resource file has not been updated with this suffix.,2.8.4; 2.9.1,2.8.6; 2.9.3,0,0,44,1,1,1,0,1,0,0,0,0,1,4,components/camel-cxf/src/main/resources/META-INF/spring.schemas;components/camel-spring-integration/src/main/resources/META-INF/spring.schemas;components/camel-spring-security/src/main/resources/META-INF/spring.schemas;components/camel-spring/src/main/resources/META-INF/spring.schemas;,0,0
5193,Bug,Resolved,Fixed,camel-core,Major,Christian Tytgat,2012/04/19 09:56:17 +0100,2012/04/29 15:13:43 +0100,Claus Ibsen,2012/04/29 17:04:39 +0100,10.29747685,0.077037037,Strange warning appears: WARN  org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id,The warning gets printed but other than that  everything seems to work. (I hope)12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id: ID-dris-ixor-be-42350-1334569164986-0-1052464  will fallback and use first error handler.12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN distribution.kv78.dispatch - Failed delivery (attempt = 199) : org.apache.http.conn.HttpHostConnectException: Connection to http://81.82.232.183:9292 refused - 0299c1d9 - KV8passtimes - 81.82.232.183:9292 - queue_dispatchHttpQueue_ID_dris.ixor.be-36583-1334569163882-4_1_24_1_1007When looking up the log statement in RedeliveryErrorHandler  I find this:else if (!exceptionPolicy.getErrorHandlers().isEmpty()) { // note this should really not happen  but we have this code as a fail safe // to be backwards compatible with the old behavior log.warn('Cannot determine current route from Exchange with id: {}  will fallback and use first error handler.'  exchange.getExchangeId()); processor = exceptionPolicy.getErrorHandlers().iterator().next(); }So it shouldn't happen but it happens after all...Here is the route causing the warning. I think it started when I made the route transacted. As shown in the log snippet above  the warning is printed when the HTTP endpoint throws an IOException (route ENDPOINT_DISPATCH) from(ENDPOINT_DISPATCH_QUEUE + '?cacheLevelName=CACHE_CONSUMER&amp;' + // necessary for message groups to work 'concurrentConsumers={{hermes.dris.distribution.kv78.concurrentOutgoingHttpDispatchers}}&amp;' + 'maxConcurrentConsumers={{hermes.dris.distribution.kv78.maxConcurrentOutgoingHttpDispatchers}}') .routeId(ROUTE_ID_DISPATCH_QUEUE) .onException(Throwable.class) // transacted routes override the default error handler // to avoid the message going to the the ActiveMQ DLQ  forward to our DLQ here .to(ENDPOINT_DLQ) .handled(true) .end() .transacted() // determine action // the timingPointSequencer will check what needs to happen with the message .beanRef('timingPointSequencer'  'handleDispatch') .choice() // normal situation  the message can be sent .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_PROCEED))) .to(ENDPOINT_DISPATCH) // delay message  usually because of previous errors for this destination .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_REENQUEUE))) .log(LoggingLevel.INFO  'Re-enqueuing' + MESSAGE_LOG_FORMAT) .to(ENDPOINT_DISPATCH_QUEUE) .otherwise() .log(LoggingLevel.ERROR  'No action header set ???' + MESSAGE_LOG_FORMAT) .to(ENDPOINT_DLQ) .end() .end(); from(ENDPOINT_DISPATCH) .routeId(ROUTE_ID_DISPATCH) .onException(IOException.class) // in case of IO exceptions  the message is always re-enqueued // reschedule parameters are set by the timingPointSequencer .beanRef('timingPointSequencer'  'handleFailure') .log(LoggingLevel.WARN  'Failed delivery (attempt = ${in.header.tpSecAttempt}) : ${in.header.CamelExceptionCaught}' + MESSAGE_LOG_FORMAT) .to(ENDPOINT_DISPATCH_QUEUE) .handled(true) .end() // clear http headers to avoid interference from other http endpoints .removeHeaders('CamelHttp*') .setHeader(Exchange.HTTP_URI  simple('http://${header.' + HEADER_DESTINATION_ADDRESS + '}')) .setHeader(Exchange.HTTP_PATH  simple('${properties:hermes.dris.distribution.kv78.controller.urlpath}')) .setHeader(Exchange.CONTENT_TYPE  constant('application/xml')) .setHeader(Exchange.CONTENT_ENCODING  constant('gzip')) // use gzip compression .log(verboseLoggingLevel  'Sending request to ${in.header.CamelHttpUri}/${in.header.CamelHttpPath}' + MESSAGE_LOG_FORMAT) // use multicast instead of a pipeline  or the audit log will contain the http response! .multicast() .stopOnException() .to(ENDPOINT_TIMINGPOINT_HTTP + '?httpClientConfigurerRef=timingPointHttpClientConfigurer&amp;headerFilterStrategy=#distributionHttpHeaderFilterStrategy'  ENDPOINT_AUDIT_OUTGOING) .end() .beanRef('timingPointSequencer'  'handleSuccess');,2.9.1,2.9.3; 2.10.0,0,0,433,1,4,1,0,0,0,0,0,0,2,3,camel-core/src/test/java/org/apache/camel/issues/SingleOutputInMulticastIssueTest.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/test/java/org/apache/camel/issues/SingleOutputInMulticastIssueTest.java;,0,0
5196,Bug,Resolved,Fixed,camel-ftp,Major,Steve Barham,2012/04/20 09:22:17 +0100,2012/04/20 10:41:13 +0100,Claus Ibsen,2012/04/20 10:41:13 +0100,0.054814815,0,SftpChangedExclusiveReadLockStrategy does not check the correct field to determine if a file is changing,I have recently upgraded from Camel 2.7 to a more recent version. I can confirm that the bug is still in trunk. In Camel 2.7  there was a generic FileChangedExclusiveReadLockStrategy. This checked the modification time of the file using GenericFile.lastModified. This field was set by SftpComponent#asRemoteFile as file.getAttrs().getMTime() * 1000. In Camel 2.8 onwards  this behaviour is implemented by SftpChangedExclusiveReadLockStrategy. This incorrectly (to my mind) retrieves the timestamp on line 67 using: newLastModified = f.getAttrs().getATime();Taking the atime of the file doesn't make a great deal of sense to me; on a POSIX compliant filesystem  the atime will be incremented every time the file is polled  meaning that this strategy will never be able to mark a file as unchanged. While some filesystems are mounted nowadays as noatime or relatime  the mtime is still absolutely the safest mechanism to determine if something is writing to a target file. The impact of this bug is that we cannot reliably poll files from a remote SFTP server.,2.8.0,2.8.5; 2.9.3; 2.10.0,0,0,165,1,1,1,0,0,0,0,0,1,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java;,0,0
5198,Improvement,Resolved,Fixed,,Major,Jo?o Loureiro,2012/04/20 12:13:34 +0100,2012/06/04 19:01:14 +0100,Claus Ibsen,2012/06/05 10:46:02 +0100,45.93921296,0.656111111,Implement connection pooling in jt400 component,Instead of eagerly obtaining a new connection to the AS/400 system  Endpoint instances request one from a connection pool. Users can specify that their own connection pool be used  or let Camel provide one (default behaviour).Functionally speaking  this feature does not introduce any change (it can be viewed as an optimization in advanced usage scenarios).Thread safety: the producers/consumers  which were inherently thread-safe  became not thread-safe in regard to their start/stop lifecycle.The following text can be used as the documentation for the new URI option:NameconnectionPoolDefault valueAS400ConnectionPool instanceDescriptionCamel 2.10: Reference to an com.ibm.as400.access.AS400ConnectionPool instance in the Registry. This is used for obtaining connections to the AS/400 system. The look up notation ('#' character) should be used.,2.9.2,2.10.0,0,2,114,1,4,2,0,0,0,0,1,0,1,20,components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400Component.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueEndpoint.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueProducer.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueService.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400Endpoint.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmEndpoint.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmProducer.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400ComponentDefaultConnectionPoolTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400ComponentTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400DataQueueConsumerTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400DataQueueEndpointTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400DataQueueProducerTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400EndpointConnectionTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400EndpointTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400PgmEndpointTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400PgmRouteTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400RouteTest.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400TestSupport.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/MockAS400ConnectionPool.java;,0,0
5199,Bug,Resolved,Fixed,camel-core,Major,Isidro Moreno,2012/04/20 22:08:13 +0100,2012/04/22 10:04:29 +0100,Claus Ibsen,2012/04/22 10:18:13 +0100,1.506944444,0.009537037,initialDelay and idempotentRepository Endpoint URI parameters fail to be read from Camel context when Turkish language is set in host operating system.,org.apache.camel.util.ObjectHelper.capitalize() method uses native JAVA String.toUpperCase() method (without parameters)  which performs capitalization according to operating system current language and regional settings configuration. When these are set to Turkish  a call to capitalize() method  with a String starting with 'i' as parameter  returns Turkish dotted 'I' as capitalized 'i'  which is wrong according to programmatic language and expected behavior.This behaviour impacts  at least  in Endpoint URI parameters which names start with char 'i'  such as 'idempotentRepository' and 'initialDelay' URI parameters. When setter/getter methods lookup is performed for these parameters  wrong method names are returned due to ObjectHelper.capitalize() method. This method uses standard Java String.toUpperCase() function which returns a dotted 'I' instead of dotless 'I' for idempotentRepository and initialDelay parameters.To solve this  the attached patch consists of refactoring ObjectHelper.capitalize() method. Instead of calling toUpperCase() method  it is called toUpperCase(Locale.ENGLISH) to enforce 'I' character (dotless) return.,2.8.1,2.8.5; 2.9.3; 2.10.0,0,1,143,1,4,2,0,0,0,0,0,0,1,22,camel-core/src/main/java/org/apache/camel/builder/xml/TimeUnitAdapter.java;camel-core/src/main/java/org/apache/camel/component/log/LogComponent.java;camel-core/src/main/java/org/apache/camel/component/mock/TimeClause.java;camel-core/src/main/java/org/apache/camel/impl/ConfigurationHelper.java;camel-core/src/main/java/org/apache/camel/impl/DefaultHeaderFilterStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;camel-core/src/main/java/org/apache/camel/main/MainSupport.java;camel-core/src/main/java/org/apache/camel/model/SamplingDefinition.java;camel-core/src/main/java/org/apache/camel/processor/SamplingThrottler.java;camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java;camel-core/src/main/java/org/apache/camel/util/CaseInsensitiveMap.java;camel-core/src/main/java/org/apache/camel/util/GZIPHelper.java;camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/main/java/org/apache/camel/util/Time.java;camel-core/src/main/java/org/apache/camel/view/NodeData.java;camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedShutdownStrategyTest.java;camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceCountTest.java;camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java;camel-core/src/test/java/org/apache/camel/processor/async/MyAsyncComponent.java;,0,0
5200,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/04/21 09:07:09 +0100,2012/04/21 09:07:09 +0100,Claus Ibsen,2012/04/21 09:52:00 +0100,0.031145833,0.031145833,Potential dead-lock when shutting down Camel with NotifyBuilder doing notication,See nabblehttp://camel.465427.n5.nabble.com/Gracefull-shutdown-timeouts-due-to-NotifyBuilder-blocks-on-context-tp5654048p5654048.htmlWe should avoid the synchronized getRoutes method which is really not needed.,2.9.0,2.8.5; 2.9.3; 2.10.0,0,1,16,1,1,1,0,0,0,0,1,0,1,2,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/issues/NotifyBuilderOnFailureShutdownCamelIssueTest.java;,0,0
5210,Bug,Resolved,Fixed,camel-core,Major,Hynek Cihlar,2012/04/24 07:07:17 +0100,2012/04/27 08:07:01 +0100,Claus Ibsen,2012/04/27 08:58:48 +0100,3.07744213,0.035960648,Loop causes NullPointerException on error,The following context will cause NullPointerException. &lt;routeContext id='myCamelContext' xmlns='http://camel.apache.org/schema/spring'&gt;  &lt;route&gt; &lt;from uri='jms:myQueue'/&gt; &lt;onException&gt; &lt;exception&gt;org.xml.sax.SAXParseException&lt;/exception&gt; &lt;redeliveryPolicy maximumRedeliveries='2'/&gt; &lt;handled&gt;&lt;constant&gt;true&lt;/constant&gt;&lt;/handled&gt; &lt;to uri='log:camelfatal?showAll=true&amp;multiline=true&amp;level=ERROR'/&gt;  &lt;/onException&gt; &lt;loop copy='true'&gt; &lt;constant&gt;3&lt;/constant&gt; &lt;inOnly uri='smtp://you_can_leave_this_unchanged'/&gt; &lt;/loop&gt; &lt;/route&gt; &lt;/routeContext&gt;The callstack on the NullPointerException:Daemon Thread [Camel (appServerCamelContext) thread #1 - JmsConsumer&#91;emailOutbox&#93;] (Suspended (exception NullPointerException))  DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange  AsyncCallback  RedeliveryErrorHandler$RedeliveryData) line: 262  DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange  AsyncCallback) line: 223  RouteContextProcessor.processNext(Exchange  AsyncCallback) line: 45  RouteContextProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  DefaultChannel.process(Exchange  AsyncCallback) line: 304  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  LoopProcessor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  LoopProcessor.process(Exchange  AsyncCallback  AtomicInteger  AtomicInteger) line: 103  LoopProcessor.process(Exchange  AsyncCallback) line: 74  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  InstrumentationProcessor.process(Exchange  AsyncCallback) line: 71  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  TraceInterceptor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  TraceInterceptor.process(Exchange  AsyncCallback) line: 91  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange  AsyncCallback  RedeliveryErrorHandler$RedeliveryData) line: 333  DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange  AsyncCallback) line: 223  RouteContextProcessor.processNext(Exchange  AsyncCallback) line: 45  RouteContextProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  DefaultChannel.process(Exchange  AsyncCallback) line: 304  RouteContextProcessor.processNext(Exchange  AsyncCallback) line: 45  RouteContextProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  UnitOfWorkProcessor.processAsync(Exchange  AsyncCallback  UnitOfWork) line: 150  UnitOfWorkProcessor.process(Exchange  AsyncCallback) line: 117  RouteInflightRepositoryProcessor.processNext(Exchange  AsyncCallback) line: 50  RouteInflightRepositoryProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  AsyncProcessorHelper.process(AsyncProcessor  Exchange  AsyncCallback) line: 73  InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange  AsyncCallback) line: 99  InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange  AsyncCallback) line: 90  InstrumentationProcessor.process(Exchange  AsyncCallback) line: 71  AsyncProcessorHelper.process(AsyncProcessor  Exchange) line: 99  InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange) line: 86  EndpointMessageListener.onMessage(Message) line: 104  DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener  Message) line: 560  DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session  Message) line: 498  DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session  Message) line: 467  DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object  Session  MessageConsumer  TransactionStatus) line: 325  DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object  Session  MessageConsumer) line: 263  DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058  DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050  DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947  ThreadPoolExecutor$Worker.runTask(Runnable) line: 886  ThreadPoolExecutor$Worker.run() line: 908  Thread.run() line: 662,2.9.2,2.9.3; 2.10.0,0,1,286,1,1,1,0,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/LoopProcessor.java;camel-core/src/test/java/org/apache/camel/processor/LoopCopyErrorTest.java;,0,0
5218,Bug,Closed,Fixed,camel-hazelcast,Major,Henrique Oliveira,2012/04/25 18:40:45 +0100,2012/04/25 23:14:07 +0100,Christian M?ller,2012/04/25 23:26:58 +0100,0.198761574,0.008923611,HazelcastComponent.doStop bombing out,I am setting up an own hazelcast instance on HazelcastComponent  it is created by Spring the problem is when HazelcastComponent.doStop is called  a NullPointerException is throw  becausecreateOwnInstance is null.,2.9.2,2.9.3; 2.10.0,0,1,28,2,1,1,0,0,0,1,0,1,1,1,components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/HazelcastComponent.java;,0,0
5225,Bug,Resolved,Fixed,camel-netty,Major,edge wang,2012/04/26 17:03:53 +0100,2012/04/27 07:50:02 +0100,Claus Ibsen,2012/06/08 16:30:28 +0100,42.97679398,42.36141204,camel-netty can't distinguish between Sharable and Unsharable codecs,Camel-netty uses general configuration model for referenced encoders/decoders for channel pipelines  see DefaultServerPipelineFactory. That is  create encoder/decoder objects at configuration parsing time and store them in a list  then use them when a pipeline is established. However  this will make encoder/decoder objects shared among different pipelines  that may cause data conflicts  when the encoder/decoder is not Sharable(has object status/not annotated as @Sharable)  e.g. a LengthFieldBasedFrameDecoder.Although we can avoid the problem by totally writing a new serverpipelinefactory for our apps  several problem still remains  please see detailed description and testcase for this bug at:http://camel.465427.n5.nabble.com/camel-netty-bug-and-the-need-of-best-practice-for-creating-referenced-parameter-object-on-looking-up-td5627926.html,2.9.2,2.9.3; 2.10.0,0,2,96,1,8,2,0,0,0,0,0,0,3,20,components/camel-netty/src/main/java/org/apache/camel/component/netty/ChannelHandlerFactories.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/ChannelHandlerFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyComponent.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConfiguration.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/ShareableChannelHandlerFactory.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/MultipleCodecsTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/UnsharableCodecsConflicts2Test.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/UnsharableCodecsConflictsTest.java;components/camel-netty/src/test/resources/org/apache/camel/component/netty/multiple-codecs.xml;components/camel-netty/src/test/java/org/apache/camel/component/netty/UnsharableCodecsConflictsTest.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/ClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConsumer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/ServerPipelineFactory.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactoryAsynchTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyCustomPipelineFactorySynchTest.java;,0,0
5227,Bug,Closed,Fixed,camel-jetty,Critical,Scott Parkerson,2012/04/27 01:19:10 +0100,2012/04/27 01:19:10 +0100,Claus Ibsen,2012/04/27 06:36:29 +0100,0.220358796,0.220358796,Camel 2.9.2 jetty component no longer works with Jetty 7,When attempting to create a camel-jetty endpoint in Camel 2.9.2  the following exception is thrown:java.lang.NoSuchMethodError: org.eclipse.jetty.servlet.ServletContextHandler.addFilter(Lorg/eclipse/jetty/servlet/FilterHolder;Ljava/lang/String;Ljava/util/EnumSet;)Vat org.apache.camel.component.jetty.JettyHttpComponent.enableMultipartFilter(JettyHttpComponent.java:407) at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:325) at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148) at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1707) at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1979) at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1934) at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1862) at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1646) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1533) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1420) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1388)...This appears to be a regression of a caused by the this merge from trunk  which I suspect requires Jetty 8 to be used.Creating the endpoint under 2.9.1 works fine.,2.9.2,2.9.3; 2.10.0,0,0,83,1,6,2,1,0,0,0,0,1,2,4,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelFilterWrapper.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;parent/pom.xml;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;,0,0
5243,Improvement,Resolved,Fixed,,Major,Jo?o Loureiro,2012/05/03 18:28:30 +0100,2012/05/05 14:56:01 +0100,Claus Ibsen,2012/05/07 11:58:20 +0100,3.729050926,1.876608796,jt400: program call should support binary format,Data queue message exchange supports both text and binary formats and so should the remote program call exchange. The specification is the same as the one for the data queue.Additionally  this patch supports the concept of ommiting a parameter. This is achieved by passing null as the parameter value.Implementation note:Since I don't know Camel's policy regarding API breaking  I opted to refer to Jt400DataQueueEndpoint.Format; but Format should now be a top-level class  since the concept is the same for data queues and programs.,2.9.2,2.10.0,0,0,83,1,5,2,0,0,0,0,0,0,1,3,components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmEndpoint.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmProducer.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400PgmEndpointTest.java;,0,0
5260,Bug,Closed,Fixed,camel-ldap,Major,Ana Cort?s,2012/05/09 10:12:58 +0100,2012/05/09 21:51:08 +0100,Christian M?ller,2012/05/09 21:59:57 +0100,0.490960648,0.006122685,LDAP Component lose headers,When we call to a LDAP endpoint  the result is returned in the Out body and we lose the IN headers (see http://camel.465427.n5.nabble.com/LDAP-Component-lose-headers-td5696602.html). A fix seems relatively easy. The solution could be add this line inside the process() method in LdapProducer.java exchange.getOut().setHeaders(exchange.getIn().getHeaders());,2.9.0,2.8.6; 2.9.3; 2.10.0,0,0,45,2,4,3,1,0,0,0,0,0,1,2,components/camel-ldap/src/main/java/org/apache/camel/component/ldap/LdapProducer.java;components/camel-ldap/src/test/java/org/apache/camel/component/ldap/LdapRouteTest.java;,0,0
5262,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/05/09 11:33:34 +0100,2012/05/09 11:33:34 +0100,Claus Ibsen,2012/05/20 13:17:06 +0100,11.07189815,11.07189815,Relax simple language checking for function start/end tokens  to only validate start tokens has appropriate end token,See nabblehttp://camel.465427.n5.nabble.com/Translating-route-exceptions-to-JSON-with-Simple-Expression-Language-or-SPEL-tp5696933.html,2.9.0,2.9.3; 2.10.0,0,0,5,1,0,0,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/simple/SimpleExpressionParser.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleParserExpressionInvalidTest.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;,0,0
5265,Bug,Resolved,Fixed,camel-servlet,Major,Manuel Holzleitner,2012/05/09 15:03:20 +0100,2012/05/10 08:05:39 +0100,Claus Ibsen,2012/05/10 08:38:51 +0100,0.732997685,0.023055556,Incorrect Content-Length returned for converted result objects with Unicode characters,The camel-servlet component responds with an incorrect http Content-Length header  causing the HTTP client to retreive a incomplete response  when the body of the out message is of a POJO type and is converted into a string that contains unicode characters.For example  the following route returns 'B?e W?r'  but should return 'B?e W?rld'.from('servlet:///testUnicodeWithObjectResponse?matchOnUriPrefix=true')  .process(new Processor() { public void process(Exchange exchange) throws Exception {  String contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE  String.class); exchange.getOut().setHeader(Exchange.CONTENT_TYPE  contentType + '; charset=UTF-8');  }}) .transform(constant( new Object(){ @Override public String toString() Unknown macro: { return &quot;B?e W?rld&quot;; }  } ));The attached patch contains a fix for the problem and a test to reproduce the problem.,2.8.0; 2.9.0,2.8.6; 2.9.3; 2.10.0,0,1,111,1,2,2,1,1,0,0,0,0,1,2,components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java;components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java;,0,0
5269,Improvement,Resolved,Fixed,camel-ftp,Minor,Bengt Rodehav,2012/05/10 18:57:09 +0100,2013/01/30 15:00:39 +0100,Claus Ibsen,2013/01/30 18:56:32 +0100,264.9995718,0.16380787,Make it possible to change the remote file name without changing the local file name,Currently  if you change the remote file name by changing the message header Exchange.FILE_NAME  this will not only change the remote file name but also the local file name. This is often undesirable. Instead it is a common requirement to archive the files that you process locally with their original file names unchanged.This has been discussed on the user mailing list:http://camel.465427.n5.nabble.com/how-to-specify-remote-file-name-when-using-FTP-endpoint-td5697227.html,2.9.2,2.11.0,0,1,64,1,1,1,1,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java;camel-core/src/test/java/org/apache/camel/component/file/FileProduceOverruleExpressionTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProduceOverruleOnlyOnceTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProduceOverruleTest.java;,0,0
5270,Improvement,Resolved,Fixed,camel-snmp,Major,Jonathan Barber,2012/05/11 00:01:10 +0100,2012/05/11 04:13:07 +0100,Willem Jiang,2012/05/11 07:44:05 +0100,0.321469907,0.14650463,Add community and peer address of SNMP TRAP PDUs to camel-snmp header,A patch is included to add the community and peer address of SNMP traps that are received by camel. This is useful to determine where a trap originated from  as not all SNMPv2 traps include an OID that identifies the sender.The information is placed in the message header as strings with names:securityNamepeerAddressThese names correspond to the accessor names in the snmp4j API for the CommandResponderEvent class. securityName is not the correct name for SNMP v1/2 traps  but it's probably better to stick with a name that can be consistant between SNMP versions.,2.10.0,2.10.0,0,0,92,1,1,1,1,0,0,0,0,0,1,3,components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpEndpoint.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpMessage.java;components/camel-snmp/src/main/java/org/apache/camel/component/snmp/SnmpTrapConsumer.java;,0,0
5274,Bug,Resolved,Fixed,camel-jetty,Major,Claus Ibsen,2012/05/12 08:34:55 +0100,2012/05/12 08:34:55 +0100,Claus Ibsen,2012/05/12 08:56:15 +0100,0.014814815,0.014814815,Jetty client can corrupt streams if used in a bridge mode (proxy),The jetty http producer should favor streams over Strings  which otherwise could cause the payload to be corrupted if doing a bridge mode  eg from jetty to jetty.,2.8.5,2.8.6; 2.9.3; 2.10.0,0,0,28,1,1,1,1,0,0,0,0,0,2,3,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/DefaultJettyHttpBinding.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyContentExchange.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java;,0,0
5275,Improvement,Closed,Fixed,build system,Minor,Arjen Duursma,2012/05/15 09:00:40 +0100,2012/05/16 08:35:22 +0100,Christian M?ller,2012/05/16 11:36:55 +0100,1.108506944,0.126076389,Dependencies with inconsitant paths in repository,Artifactory doesn't by default serve artifacts that have a path inconsistancy in it's repository. The used maven-shade-plugin version 1.4 used by camel 2.10.0-SNAPSHOT depends on such a component. this is fixed in version 1.6I was unable to add an attachement  so here is the patch inline:      Eclipse Workspace Patch 1.0#P camelIndex: parent/pom.xml===================================================================   parent/pom.xml (revision 1338042)+++ parent/pom.xml (working copy)@@ -1684 7 +1684 7 @@ &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;     &lt;version&gt;1.4&lt;/version&gt;+ &lt;version&gt;1.6&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt;,2.9.2,2.10.0,0,2,83,2,1,1,0,0,0,0,0,0,1,2,parent/pom.xml;pom.xml;,0,0
5279,Bug,Closed,Fixed,camel-stream,Major,Hadrian Zbarcea,2012/05/16 18:48:15 +0100,2012/05/16 18:48:15 +0100,Hadrian Zbarcea,2012/05/16 19:22:47 +0100,0.023981481,0.023981481,camel-stream overwrites files instead of appending,When a file stream is used with camel-stream  the file is not opened in append mode  therefore the file is overwritten with every message  ending up with just the last message  all others are lost.This contrasts with the documented behavior.,2.8.5,2.8.6; 2.9.3; 2.10.0,0,1,40,1,0,0,1,0,0,0,0,0,0,0,,0,0
5284,Bug,Resolved,Fixed,camel-stream,Major,Hadrian Zbarcea,2012/05/18 01:18:02 +0100,2012/05/18 01:18:33 +0100,Hadrian Zbarcea,2012/06/02 13:49:45 +0100,15.52202546,15.52166667,camel-stream should not close stream after each write,The StreamProducer in camel-stream closes the stream after every write  which significantly affects performance.,2.8.4,2.8.6; 2.9.3; 2.10.0,0,1,14,1,1,1,1,0,0,0,1,0,0,0,,0,0
5299,Bug,Resolved,Fixed,camel-blueprint; camel-core,Major,Ra?l Kripalani,2012/05/22 19:11:01 +0100,2012/05/23 11:04:46 +0100,Claus Ibsen,2012/05/23 16:56:24 +0100,0.906516204,0.244189815,EventNotifiers don't work under Blueprint,EventNotifiers don't work with Blueprint Camel Contexts. Testing on latest 2.10-SNAPSHOT  updated on 22 May 16:45 GMT.After some debugging  it looks like the bean lookup performed on line 202 of AbstractCamelContextFactoryBean.afterPropertiesSet() triggers the initialization of the CamelContext as part of the lookup. As part of the init  all services are started  including the ManagementContext and its EventNotifiers (which we were just looking up).EventNotifiers are then added but never started because they came in late.,2.9.2,2.9.3; 2.10.0,0,2,74,1,4,2,1,0,0,0,0,0,2,13,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java;camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/EventNotifierTest.java;components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/eventNotifier.xml;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelRedeliveryPolicyFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelThreadPoolFactoryBean.java;components/camel-core-xml/src/main/java/org/apache/camel/core/xml/util/jsse/AbstractBaseSSLContextParametersFactoryBean.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/CamelBlueprint8Test.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-18.xml;,0,0
5308,Improvement,Resolved,Fixed,camel-core,Trivial,Daniel Gal?n y Martins,2012/05/25 14:12:05 +0100,2012/05/27 11:50:45 +0100,Claus Ibsen,2012/05/27 11:50:45 +0100,1.901851852,0,Main is bound to DefaultCamelContext,We are using our own CamelContext  which is extending the DefaultCamelContext. Using Main is impossible in this case  since the getCamelContextMap()-method creates statically a DefaultCamelContext. Overriding this method doesn't works either  since the field registery is final  and no other accessors are defined.The given path doesn't breaks existing code bases  and gives an easy possiblity to override the context-creation  as well as access to the registry.,2.9.2,2.10.0,0,2,66,1,1,1,1,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/main/Main.java;,0,0
5320,Improvement,Resolved,Fixed,camel-ftp,Major,Nestor Urquiza,2012/05/30 17:03:57 +0100,2012/11/13 10:39:28 +0100,Claus Ibsen,2012/11/13 10:48:09 +0100,166.7390278,0.006030093,camel-ftp - Add option to check files without downloading,download=false could be an option to stop poll consumers from downloading files when all you need is to check for file attributes.The need was generated from ftp component but it could potentially apply to any file consumer. For more info see the original thread http://camel.465427.n5.nabble.com/Camel-FTP-SFTP-check-instead-of-download-td5713363.html,2.9.2,2.11.0,0,3,48,1,5,3,0,0,0,0,1,0,1,4,camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpNotDownloadTest.java;,0,0
5326,Improvement,Resolved,Fixed,camel-bindy,Major,Claus Ibsen,2012/06/03 15:10:59 +0100,2012/06/03 15:26:51 +0100,Claus Ibsen,2012/06/03 15:26:51 +0100,0.011018519,0,camel-bindy - Do not use locale if not explicit configured,Bindy should newer use locale if not explicit configured to use one  as they will format numbers and whatnot in unexpected ways.For example an integer with an US locale will have comma as thousand separator  and that dont go well when marshalling to a CSV file  as the comma is also often a separator there.,2.9.2,2.10.0,0,1,55,1,0,0,0,0,0,0,0,0,2,23,components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/FormatFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/Section.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/BytePatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/DatePatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/DoublePatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/FloatPatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/IntegerPatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/LongPatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/NumberPatternFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/ShortPatternFormat.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallBadIntegerTest.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionClause.java;camel-core/src/main/java/org/apache/camel/builder/ExpressionClauseSupport.java;camel-core/src/main/java/org/apache/camel/language/tokenizer/TokenizeLanguage.java;camel-core/src/main/java/org/apache/camel/model/language/TokenizerExpression.java;camel-core/src/main/java/org/apache/camel/util/GroupIterator.java;camel-core/src/test/java/org/apache/camel/processor/SplitGroupMultiLinesTest.java;camel-core/src/test/java/org/apache/camel/util/GroupIteratorTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringSplitGroupMultiLinesTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SplitGroupMultiLinesTest.xml;,0,0
5347,Improvement,Resolved,Fixed,,Major,Rob Davies,2012/06/08 12:03:22 +0100,2012/06/08 12:03:22 +0100,Rob Davies,2012/06/08 12:59:02 +0100,0.038657407,0.038657407,Add a Camel Component to support MQTT,MQTT is a light weight messaging protocol for small sensors and mobile devices - see http://mqtt.org,2.10.0,2.10.0,0,1,19,1,1,1,0,0,0,0,0,0,2,23,components/camel-mqtt/pom.xml;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTComponent.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConfiguration.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConsumer.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTProducer.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/package.html;components/camel-mqtt/src/main/resources/META-INF/LICENSE.txt;components/camel-mqtt/src/main/resources/META-INF/NOTICE.txt;components/camel-mqtt/src/main/resources/META-INF/services/org/apache/camel/component/mqtt;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTBaseTest.java;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConsumerTest.java;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTProducerTest.java;components/camel-mqtt/src/test/resources/log4j.properties;components/camel-mqtt/src/test/resources/test-options.properties;components/pom.xml;parent/pom.xml;apache-camel/pom.xml;apache-camel/src/main/descriptors/common-bin.xml;parent/pom.xml;platforms/karaf/features/src/main/resources/features.xml;tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelMqttTest.java;,0,0
5355,Bug,Resolved,Fixed,camel-sql,Minor,Claus Ibsen,2012/06/11 11:58:12 +0100,2012/06/11 11:58:12 +0100,Claus Ibsen,2012/06/12 10:29:30 +0100,0.938402778,0.938402778,camel-sql - Should support % sign in query,See nabbleWe should look into supporting the % sign in the sql component.It should possible be less strict in uri validation as people can enter SQL queries. And to make it easy  they should just be able to dump in the SQL as is.We should also consider adding an option to refer to a SQL that is enlisted in the registry.Also people should be able to externalize their SQL in a .properties file and have Camel lookup that using the {{ }} notation,2.8.5; 2.9.2,2.10.0,0,2,83,1,6,2,0,1,0,0,0,1,1,3,components/camel-sql/src/test/java/org/apache/camel/component/sql/SpringSqlEndpointLikeTest.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlEndpointLikeTest.java;components/camel-sql/src/test/resources/org/apache/camel/component/sql/SpringSqlEndpointLikeTest.xml;,0,0
5360,Bug,Resolved,Fixed,karaf,Major,Christian M?ller,2012/06/11 22:55:48 +0100,2012/06/20 03:10:39 +0100,Hadrian Zbarcea,2012/06/20 04:36:56 +0100,8.236898148,0.059918981,Camel features file doesn't validate,If you execute$camel/platforms/karaf&gt;mvn clean install -Pvalidateit fails in the feature definition validation for the following components:camel-quickfixcamel-cxfcamel-cdi,2.9.2,2.10.0,0,4,16,1,7,4,0,0,0,0,0,0,2,2,tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelSpringWebServiceTest.java;platforms/karaf/features/src/main/resources/features.xml;,0,0
5363,Bug,Resolved,Fixed,camel-jms,Major,Claus Ibsen,2012/06/12 14:09:16 +0100,2012/06/12 14:09:16 +0100,Claus Ibsen,2012/06/12 14:35:10 +0100,0.017986111,0.017986111,camel-jms - Exception thrown from destination resolver should trigger Camel exception handling,See nabblehttp://camel.465427.n5.nabble.com/Camel-Error-handling-throwing-exception-not-moving-to-error-queue-tp5714076.htmlThe jms producer should catch unhandled exceptions from the Spring JMS  such as its destination resolver. And ensure the callback is invoked  to let Camel error handler be triggered.,2.9.2,2.8.6; 2.9.3; 2.10.0,0,1,33,1,0,0,0,0,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOnlyInvalidDestinationTest.java;,0,0
5365,Improvement,Resolved,Fixed,camel-cxf,Minor,Akitoshi Yoshida,2012/06/13 13:10:50 +0100,2012/06/13 15:48:20 +0100,Willem Jiang,2012/06/14 06:19:00 +0100,0.71400463,0.60462963,SOAPMessage to InputStream conversion needed for some CXF SOAPMessage Provider scenarios,When you have a SOAPMessage Provider based CXF endpoint in your Camel route and the message is forwarded to an input stream based processor or producer (e.g.  File)  it is necessary to have a converter that converts SOAPMessage into InputStream.It would be practical to have this conversion method included in CxfConverter.I am attaching a test case and a possible implementation. This implementation uses CachedOutputStream to make an InputStream from a SOAPMessage. There might be a better way to get an InputStream  but I don't know a simple one.Thanks.,2.9.2,2.10.0,0,2,88,1,1,1,0,0,0,0,0,0,2,4,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/SoapTargetBean.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/SoapMessageProviderStreamContext.xml;,0,0
5372,Bug,Resolved,Fixed,camel-core,Minor,Ivan Sobolev,2012/06/15 23:47:30 +0100,2012/06/16 07:33:53 +0100,Claus Ibsen,2012/06/16 12:54:09 +0100,0.546284722,0.222407407,Shutting down one of the contexts breaks async redeliveries in others: RedeliveryErrorHandler has static reference to a thread pool,ErrorRedeliveryHandler has static reference to a thread pool used for scheduling retries  thus when it's stopped it stops a pool used by other handler instances(e.g. from other contexts)  thus they now can't redeliver.,2.9.2,2.8.6; 2.9.3; 2.10.0,0,2,33,1,2,2,0,0,0,0,0,0,1,11,camel-core/src/main/java/org/apache/camel/CamelContext.java;camel-core/src/main/java/org/apache/camel/builder/DeadLetterChannelBuilder.java;camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/main/java/org/apache/camel/processor/DeadLetterChannel.java;camel-core/src/main/java/org/apache/camel/processor/DefaultErrorHandler.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/test/java/org/apache/camel/impl/MultipleLifecycleStrategyTest.java;camel-core/src/test/java/org/apache/camel/issues/RedeliveryErrorHandlerAsyncDelayedTwoCamelContextIssueTest.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java;components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandlerBuilder.java;,0,0
5376,Bug,Resolved,Fixed,camel-mail,Minor,Alexis Kinsella,2012/06/18 13:38:35 +0100,2013/08/26 18:59:13 +0100,Claus Ibsen,2013/08/26 19:02:36 +0100,434.2250116,0.002349537,Mail component does not work as expected (Email Deletion is partially broken et Disconnect does not work well),The way disconnect is implemented causes issues with some other options of the consumer. For instance 'disconnect' option is not compatible with 'delete' option.The delete action is done in completion action (processCommit: line 185). On line 305  processCommit method checks if folder is open  but 'disconnect' option force folder at null value at the end of poll method (Line 149).I guess disconnect method should be called on completion after any other completion actions occured: It is not possible to make completion actions if connection to mail server is closed.The result of the usage of disconnect option and delete option is a NullPointerException on test: 'if (!folder.isOpen())' statement on line 308.Issue should be always reproductible.I let you fix the priority of the issue  but it is an annoying issue even if there is a workaround by disabling disconnect option ...,2.9.5; 2.10.3,2.11.2; 2.12.0,0,3,139,1,12,3,0,0,0,1,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;,0,0
5396,Improvement,Resolved,Fixed,camel-jms,Major,Mark Hillary,2012/06/25 17:48:33 +0100,2012/08/28 13:36:04 +0100,Claus Ibsen,2012/08/28 14:32:54 +0100,63.86413194,0.039467593,Improve performance of DefaultJmsKeyFormatStrategy,The current default implementation uses String.replace/replaceAll to escape the illegal characters in the header key. This is unfortunate because replace/replaceAll are implemented in terms of regular expressions which makes the escaping quite costly for something that is executed for every single message. Also it's quite likely that the headers will be identical for every single message that's published via JMS. The attached patch makes two changes; Use Commons Lang StringUtil.replaceEach which using a StringBuilder internally to do the replacement. This adds a dependency on Commons Lang. Cache the output of StringUtil.replaceEach in a ConcurrentHashMap. This could be moved to a separate class if caching every key is a concern. Or this could be changed to use an LRUCache,2.9.2,2.11.0,0,4,118,1,13,4,0,0,0,0,1,0,4,6,camel-core/src/main/java/org/apache/camel/util/StringHelper.java;camel-core/src/test/java/org/apache/camel/util/StringHelperTest.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/DefaultJmsKeyFormatStrategy.java;camel-core/src/main/java/org/apache/camel/util/StringHelper.java;camel-core/src/main/java/org/apache/camel/util/StringHelper.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/DefaultJmsKeyFormatStrategy.java;,0,0
5405,Bug,Resolved,Fixed,camel-cxf,Major,Sergey Beryozkin,2012/06/27 18:24:07 +0100,2012/06/28 09:31:06 +0100,Willem Jiang,2012/09/27 13:17:32 +0100,91.78709491,91.15724537,CXF Transport loses HTTP Matrix parameters,DefaultCxfMesssageMapper (note the typo - to be fixed in a follow-up JIRA) wrongly initializes CXF Message Message.REQUEST_URI property with the value of Camel Exchange.HTTP_PATH  even though Camel Exchange.HTTP_URI is available.The net effect is that the HTTP matrix parameters if any attached to the last HTTP path segment are lost. Another side-effect is that Exchange.HTTP_PATH will contain the decoded value (done at HTTPServletRequest level) which can lead to the matching issues at the JAX-RS level.A simple patch is attached,2.9.2,2.9.3; 2.10.1; 2.11.0,0,3,78,1,9,3,0,0,0,0,0,0,5,6,components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java;components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/common/message/DefaultCxfMessageMapperTest.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaProducer.java;components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/common/message/DefaultCxfMesssageMapper.java;components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/common/message/DefaultCxfMesssageMapper.java;components/camel-cxf-transport/src/test/java/org/apache/camel/component/cxf/common/message/DefaultCxfMessageMapperTest.java;,0,0
5406,Bug,Resolved,Fixed,camel-core; tests,Minor,emanuele gherardini,2012/06/27 20:12:12 +0100,2012/06/30 11:13:12 +0100,Claus Ibsen,2012/06/30 18:31:21 +0100,2.929965278,0.304270833,Threads EIP hangs Junit4 tests using adviceWith,If the  threds()  DSL keyword is used in a route and a Junit4 test is performed  the test hangs indefenitely.The issue is descibed here:http://camel.465427.n5.nabble.com/Threads-EIP-hangs-Unit-Tests-JUnit4-td5715031.htmlplease find attached a self-consistent sample project to reproduce it.,2.9.1; 2.10.0,2.8.6; 2.9.3; 2.10.1,0,2,45,1,3,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java;camel-core/src/test/java/org/apache/camel/issues/ThreadsDoTryCatchInterceptSendToAllEndpointIssueTest.java;,0,0
5407,Improvement,Resolved,Fixed,camel-core; camel-ftp,Minor,Claus Ibsen,2012/06/28 08:58:48 +0100,2012/08/13 03:00:55 +0100,Willem Jiang,2012/08/13 08:55:31 +0100,45.99771991,0.24625,Better error message when trying to write a null body as file,See nabblehttp://camel.465427.n5.nabble.com/Can-t-route-wsdl-request-into-file-tp5715201.htmlWe should have a better error message instead of something about no type converter exception.We could also consider an option to the file producer  to silently ignore writing files if there is no message body.Finding a good name for this option is a challenge  skipNullBody ignoreWritingNullBody,2.10.0,2.10.1; 2.11.0,1,3,53,1,5,3,0,0,0,0,0,0,2,11,camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerAllowNullBodyFileAlreadyExistsTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerAllowNullBodyTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerAllowNullBodyFileAlreadyExistTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerAllowNullBodyTest.java;camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerAllowNullBodyFileAlreadyExistsTest.java;camel-core/src/test/java/org/apache/camel/component/file/FileProducerAllowNullBodyTest.java;,0,0
5411,Bug,Resolved,Fixed,camel-mqtt,Major,Ralf Kornberger,2012/06/29 14:02:09 +0100,2012/06/29 15:43:42 +0100,Rob Davies,2012/08/15 18:27:54 +0100,47.18454861,47.11402778,MQTT Endpoint does not correctly return the MQTT-Payload,MQTT Endpoint does not correctly return the MQTT-Payload. It returns the whole MQTT Message (header + payload).The bug is in line 89 of MQTTEndpoint.java (version 2.11  but also in 2.10) exchange.getIn().setBody(body.getData());must become exchange.getIn().setBody(body.toByteArray()); because getData() ignores the offset (to skip the MQTT header) set in the body byte array.,2.10.0,2.10.1; 2.11.0,0,3,49,1,7,3,0,0,0,0,0,0,1,1,components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java;,0,0
5412,Bug,Resolved,Fixed,camel-quartz,Major,Pontus Ullgren,2012/06/29 14:44:32 +0100,2012/06/29 15:46:41 +0100,Claus Ibsen,2012/06/29 16:01:21 +0100,0.053344907,0.010185185,ObjectAlreadyExistsException when 'redeploying' routes that uses CronScheduledRoutePolicy,When a route that has a CronScheduledRoutePolicy is removed it does not properly clean up the quartz jobs. The result (apart from possible memory leak) is that if the route is removed from the context and then readded with the same route id a ObjectAlreadyExistsException.This is done using the following steps.1. Stop the route2. Remove the route (and it's endpoints) from the context.3. (Re)add the route to the context using the same name.Attached is a testcase that shows the problem.I've solved this by adding my own implementation of onRemove (that calls doStop()) to CronScheduledRoutePolicy.,2.9.2; 2.10.0,2.9.3; 2.10.1,0,2,94,1,3,2,0,0,0,1,1,0,1,1,components/camel-quartz/src/main/java/org/apache/camel/routepolicy/quartz/CronScheduledRoutePolicy.java;,2,2
5415,Bug,Resolved,Fixed,camel-core,Major,Max Shalashov,2012/07/03 20:56:37 +0100,2012/07/04 07:40:34 +0100,Claus Ibsen,2012/07/04 08:24:19 +0100,0.477569444,0.030381944,Simple does not handle empty values in predicates properly,Example code:...&lt;choice&gt; &lt;when&gt; &lt;simple&gt;${property.someProperty} == ''&lt;/simple&gt; ... &lt;/when&gt;...Error message: right must be specified,2.9.0; 2.9.1; 2.9.2; 2.10.0,2.9.3; 2.10.1,0,3,25,1,1,1,0,1,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/simple/ast/DoubleQuoteStart.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SingleQuoteStart.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleOperatorTest.java;,0,0
5444,Improvement,Resolved,Fixed,camel-jms,Minor,Claus Ibsen,2012/07/16 07:03:08 +0100,2012/07/16 08:08:01 +0100,Claus Ibsen,2012/07/16 08:08:01 +0100,0.04505787,0,camel-jms - Log at INFO level if shared replyTo queues are in use  as they are not as fast as temporary or exclusive queues,See nabblehttp://camel.465427.n5.nabble.com/fyi-SI-tp5716049.htmlWe should log at INFO (maybe even WARN level) if shared reply queues are in use as they are not as fast. They have their purposes though  such as a shared clustered queue  or if a queue is used by other apps too (not ideally thought). Temporary and Exclusive reply queues are faster.See the JMS docs at the request reply section  for much more details.,2.9.2; 2.10.0,2.9.3; 2.10.1; 2.11.0,0,1,69,1,2,1,1,1,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java;,0,0
5459,Bug,Resolved,Fixed,camel-mail,Minor,Fabio Berchtold,2012/07/23 13:57:42 +0100,2013/02/03 10:31:38 +0100,Claus Ibsen,2013/02/03 10:56:13 +0100,194.8739699,0.017071759,Folder closed too early when working asynchronously,When using a MailConsumer connected with IMAP to a mailserver and routing the messages to SEDA or any other asynchronous endpoint  it can cause a com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException to happen if you are trying to process the mails/messages attachments.This is because the IMAP folder gets closed at the end of each MailConsumer.poll()I propose to add a new MailConfiguration option 'closeFolder'  which can override this behaviour.Here's an example on how to reproduce the problem. (Scala code  sorry! But it should be self-explanatory)You need a couple of mails with attachments in your mailbox to test this. ~10 mails should be enough to cause the exceptions.import javax.mail.internet.MimeMultipartimport org.apache.camel.impl.DefaultCamelContextimport org.apache.camel.scala.dsl.builder.RouteBuilderimport scala.io.Sourceobject Main {  def main(args: Array&#91;String&#93;): Unit = { val camelContext = new DefaultCamelContext val host = 'imap.gmail.com' val username = '*****@gmail.com' val password = '*****' // this will cause com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException val endpoint = 'imaps://'host'?password='password'&amp;username='username'&amp;folderName=INBOX&amp;unseen=false&amp;disconnect=false&amp;mapMailMessage=true&amp;connectionTimeout=60000' // with fix / new feature 'closeFolder' set to false //val endpoint = 'imaps://'host'?password='password'&amp;username='username'&amp;folderName=INBOX&amp;unseen=false&amp;disconnect=false&amp;mapMailMessage=true&amp;connectionTimeout=60000&amp;closeFolder=false' camelContext.addRoutes( new RouteBuilder { endpoint .to('seda:process') from('seda:process?concurrentConsumers=5') ==&gt; { process { ex =&gt; val att = ex.getIn.getBody.asInstanceOf[MimeMultipart].getBodyPart(1) println('Attachment Name:' + att.getFileName) println('Attachment Content:' + att.getDataHandler.getContent) println('Attachment Content:' + Source.fromInputStream(att.getDataHandler.getInputStream).mkString) Thread.sleep(2500) // simulate some work being done here with the attachment  takes time.. } } } ) camelContext.start() Thread.sleep(45 * 1000) camelContext.stop() }},2.10.0,2.10.4; 2.11.0,0,2,211,1,2,2,1,0,0,0,0,0,1,2,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java;,0,0
5461,Bug,Resolved,Fixed,camel-core,Major,Patrick Ohl,2012/07/24 13:16:19 +0100,2012/07/24 14:46:16 +0100,Willem Jiang,2012/07/26 08:18:18 +0100,1.793043981,1.730578704,IOConverter.toInputStream opens a BufferReader which will never be closed,If called with a non-null charset IOConvert.toInputStream returns a InputStream which will never close the opened BufferedReader.,2.10.0,2.9.3; 2.10.1; 2.11.0,0,3,17,1,2,2,1,0,0,0,1,0,1,1,camel-core/src/main/java/org/apache/camel/converter/IOConverter.java;,0,0
5464,Bug,Resolved,Fixed,camel-activemq; camel-jms,Major,Ra?l Kripalani,2012/07/24 14:01:06 +0100,2012/08/31 03:21:23 +0100,Willem Jiang,2012/11/07 11:30:32 +0100,105.8954398,68.3396875,camel-jms consumer doesn't send back a reply in all cases,In a very simple route consuming from a Camel JMS endpoint receiving InOut exchanges (i.e. JMSReplyTo header present)  the endpoint will not send back replies.This happens because Camel JMS only returns a reply if the OUT message is set. But if the route looks like: consumer =&gt; processor  and Camel doesn't find the need to 'weave in' an implicit Pipeline processor  no one will implicitly take care of mapping the IN message to an OUT message (unless the user knows about these internal aspects - but we shouldn't expect them too).As a result  these routes DON'T WORK...&lt;route&gt; &lt;from uri='timer:foo?fixedRate=true&amp;amp;period=10000' /&gt; &lt;setBody&gt;&lt;constant&gt;Hello Raul&lt;/constant&gt;&lt;/setBody&gt; &lt;to uri='log:SendingRequest?showAll=true' /&gt; &lt;inOut uri='activemq:queue:test1?requestTimeout=1000' /&gt; &lt;to uri='log:ReceivedReply?showAll=true' /&gt;&lt;/route&gt; &lt;route&gt; &lt;from uri='activemq:queue:test1' /&gt; &lt;to uri='log:ReceivedRequest?showAll=true' /&gt;&lt;/route&gt;... but just by adding an additional log endpoint to the second route (or any other thing  for that matter)  it starts to work because Camel weaves in the Pipeline processor.Other workarounds that work: explicitly wrapping the log endpoint in a &lt;pipeline&gt; DSL &lt;setBody&gt;&lt;simple&gt;${in.body}&lt;/simple&gt;&lt;/setBody&gt;Or simply introducing anything that will force Camel to insert a Pipeline processor.IMHO  there are two solutions to avoid this issue: Always weave in a Pipeline processor (adds overhead in simple routes and may cause regressions) Adapt EndpointMessageListener to pick the IN message when the exchange is out capable and expectation of a reply existsI'm happy to work on a patch for Camel 2.10.1.EDIT: Just wrapping the single endpoint in &lt;pipeline /&gt; doesn't function as a workaround.,2.8.6; 2.9.2; 2.10.0,2.9.5; 2.10.3; 2.11.0,0,4,254,1,8,3,1,1,0,0,0,0,1,4,components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutWithNoOutBodyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestLateReplyTest.java;,0,0
5474,Improvement,Resolved,Fixed,camel-blueprint,Major,Willem Jiang,2012/07/27 10:57:25 +0100,2012/07/27 10:57:25 +0100,Willem Jiang,2012/07/27 11:05:20 +0100,0.005497685,0.005497685,Support to build the camel-soap offline,camel-soap introduce soap12.xsd which has the import from the internet  it will cause some trouble when you build the camel-soap offline.,2.10.0,2.10.1; 2.11.0,0,1,21,1,1,1,1,0,0,0,0,0,1,2,components/camel-soap/src/main/resources/soap12.xsd;components/camel-soap/src/main/resources/xml.xsd;,0,0
5485,Bug,Resolved,Fixed,camel-mybatis,Minor,Babak Vahdat,2012/08/04 22:12:13 +0100,2012/08/04 22:13:21 +0100,Babak Vahdat,2012/08/04 22:57:33 +0100,0.031481481,0.030694444,camel-mybatis should do a proper transaction demarcation while reading/writing from/to database.,See http://camel.465427.n5.nabble.com/MyBatis-Component-Bug-consumer-onConsume-hits-error-transactions-are-committed-instead-of-rollback-td5716774.htmlOther than DefaultMyBatisProcessingStrategy the same issue exists by MyBatisProducer as well.Another thing which is currently missing completley is that there's no transaction demarcation by the Producer at all while reading from the database  e.g. by SelectOne or SelectList statement types.,2.10.0,2.9.3; 2.10.1; 2.11.0,0,1,44,1,0,0,1,0,0,1,0,0,2,4,components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisInsertWithRollbackTest.java;components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/DefaultMyBatisProcessingStrategy.java;components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java;components/camel-mybatis/src/test/java/org/apache/camel/component/mybatis/MyBatisInsertWithRollbackTest.java;,0,0
5492,Improvement,Resolved,Fixed,camel-jetty,Major,Christian M?ller,2012/08/08 22:32:08 +0100,2012/08/13 04:47:48 +0100,Willem Jiang,2012/08/13 10:23:16 +0100,4.493842593,0.232962963,Add option to restrict HTTP method in camel-jetty and camel-servlet,See http://camel.465427.n5.nabble.com/Jetty-consumer-restricting-methods-td5716938.html,2.10.0,2.11.0,0,3,5,1,3,2,1,0,0,0,0,0,1,10,components/camel-http/src/main/java/org/apache/camel/component/http/CamelServlet.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/CamelServlet.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpMethodRestrictTest.java;components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java;components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java;,0,0
5495,Bug,Resolved,Fixed,camel-core,Minor,Akitoshi Yoshida,2012/08/09 17:48:26 +0100,2012/08/10 04:26:37 +0100,Willem Jiang,2012/08/13 10:31:29 +0100,3.6965625,3.25337963,file endpoints on windows without volume name in the path url not working in some cases,I am using file endpoints on Windows without the volume name just like the normal unix based paths look.That means  I have something like file:///tmp/file-in and file:///tmp/file-outThe funny thing that I noticed is that each endpoint itself works fine  but when a route is set up from one to the other  it fails because there seems to be an inconsistency in the way the windows path is handled in the camel-core's file component.As mentioned  each file endpoint itself is working fine. For example  the consumer file endpoint configured in a routefrom('file:///tmp/file-in').to('mock:test')works fine.Similarly  the produce file endpoint configured in a routefrom('direct:test').to('file:///tmp/file-out')works fine.But when a route is setup to connect these two file endpoints  the producer endpoint fails to create the output file.Concretely  there is the following code in GenericFileEndpoint.configureMessage that determines the file name. String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath(); // skip leading endpoint configured directory String endpointPath = getConfiguration().getDirectory() + getFileSeparator();In this particular case  the name variable is set to 'C:/tmp/file-in/sample.xml' while the endpointPath variable is set to '/tmp/file-in'.So  the subsequent code to extract the file name part  shown below  fails to match the path. if (ObjectHelper.isNotEmpty(endpointPath) &amp;&amp; name.startsWith(endpointPath)) { name = ObjectHelper.after(name  endpointPath); }As a result  the file name is not extracted as 'sample.xml' but remain unchanged as 'C:/tmp/file-in/sample.xml'.Consequently  when the file producer endpoint tries to write this file in the file system  it tries to write a file as '/tmp/file-out/C:/tmp/file-in/sample.xml'  resulting in an error.I modified FileComponent and FileEndpoint so that the endpoint path is stored correctly in this case to make the above extraction code find the file name part correctly.Attached is this proposed patch and a test case which runs on windows and on non-windows but this issue can only be demonstrated under windows.testRouteToFileOnly and testRouteFromFileOnly work without this patch while testRouteFileToFile fails without this patch on windows.Thanks for looking into this issue.Regards  Aki,2.9.2,2.9.3; 2.10.1; 2.11.0,0,2,315,1,2,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/file/FileComponent.java;camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java;camel-core/src/test/java/org/apache/camel/component/file/FileRouteOnDosWithNoVolTest.java;,0,0
5500,Bug,Resolved,Fixed,camel-test,Minor,Claus Ibsen,2012/08/13 10:03:08 +0100,2012/08/13 10:03:08 +0100,Claus Ibsen,2012/08/13 10:06:57 +0100,0.002650463,0.002650463,camel-testng - The spring base test class should use @AfterMethod on teardown as its parent does,See nabblehttp://camel.465427.n5.nabble.com/Problem-with-testng-CamelSpringTestSupport-several-contexts-runs-simultaneously-tp5716447.html,2.9.2; 2.10.0,2.9.3; 2.10.1; 2.11.0,0,1,5,1,0,0,0,1,0,0,0,0,1,1,components/camel-testng/src/main/java/org/apache/camel/testng/CamelSpringTestSupport.java;,0,0
5513,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/08/16 08:57:14 +0100,2012/08/16 08:57:14 +0100,Claus Ibsen,2012/08/16 09:30:27 +0100,0.02306713,0.02306713,Add option to changed readLock to denote whether a zero file size is accepted or not,Some people may write zero files and want them to be accepted.,2.10.0,2.10.1; 2.11.0,0,1,13,1,1,1,0,0,0,0,0,0,1,9,camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileChangedExclusiveReadLockStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java;camel-core/src/test/java/org/apache/camel/component/file/strategy/FileChangedZeroLengthReadLockTest.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpChangedExclusiveReadLockStrategy.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpChangedZeroLengthReadLockTest.java;,0,0
5526,Bug,Resolved,Fixed,camel-xmpp,Minor,Alexander Titov,2012/08/21 09:58:45 +0100,2012/08/26 10:43:22 +0100,Claus Ibsen,2012/08/26 10:47:23 +0100,5.033773148,0.002789352,'ThreadID is already used' exception under heavy load,In situations with heavy load or under load tests we rarely got exception: 2012-08-21 12:28:02 620 [ool-26-thread-7] ERROR DefaultErrorHandler - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143205 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143206). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already usedjava.lang.IllegalArgumentException: ThreadID is already used at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131) at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)2012-08-21 12:28:02 621 [ool-26-thread-5] ERROR DefaultErrorHandler - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143207 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143208). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already usedjava.lang.IllegalArgumentException: ThreadID is already used at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97) at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124) at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131) at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662) After debugging and looking at source code we figured out  that smack use some sort of map with week references for chat cache. When memory is low java GC discards chat instances  but in Process() method they instantiated over and over again without synchronization:XmppPrivateChatProducer.java public void process(Exchange exchange) { ......................... Chat chat = chatManager.getThreadChat(endpoint.getChatId()); if (chat == null) { LOG.trace('Creating new chat instance with thread ID {}'  endpoint.getChatId()); chat = chatManager.createChat(getParticipant()  endpoint.getChatId()  new MessageListener() { public void processMessage(Chat chat  Message message) { // not here to do conversation if (LOG.isDebugEnabled()) { LOG.debug('Received and discarding message from {} : {}'  getParticipant()  message.getBody()); } } }); } .........................} But smack implementation prohibits chat instances with same chatId.,2.8.6; 2.9.2; 2.10.0; 2.11.0,2.9.4; 2.10.2; 2.11.0,0,2,419,1,2,2,0,1,0,0,1,0,1,1,components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java;,1,1
5527,Bug,Resolved,Fixed,tooling,Minor,Claus Ibsen,2012/08/21 11:13:47 +0100,2012/08/21 11:13:47 +0100,Claus Ibsen,2012/08/21 11:34:05 +0100,0.014097222,0.014097222,Maven archetype - Generates wrong plugin for surefire plugin,The blueprint archetype creates wrong pom.xml. The groupId for the surefire plugin is wrong.,2.10.0,2.10.1; 2.11.0,0,1,14,1,2,1,0,0,0,0,0,0,2,3,tooling/archetypes/camel-archetype-blueprint/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-blueprint/src/main/resources/archetype-resources/pom.xml;parent/pom.xml;,0,0
5528,Improvement,Closed,Fixed,camel-aws,Minor,Christian M?ller,2012/08/21 20:01:38 +0100,2012/08/21 20:01:38 +0100,Christian M?ller,2012/08/21 20:09:13 +0100,0.005266204,0.005266204,Improve how the AWS-SQS component create a new queue with additional attributes,Improve how the AWS-SQS component create a new queue with additional attributes,2.9.1; 2.10.0,2.9.3; 2.10.1; 2.11.0,0,1,1,1,0,0,0,1,0,0,0,0,1,2,components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/integration/SqsComponentIntegrationTest.java;,0,0
5535,Bug,Resolved,Fixed,camel-restlet,Major,Amit Patel,2012/08/22 16:35:53 +0100,2012/08/23 00:58:57 +0100,Willem Jiang,2012/09/10 15:18:06 +0100,18.9459838,18.59663194,Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0   both routes work in Apache Camel 2.9.1.,Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0   both routes work in Apache Camel 2.9.1. Reproduce Steps:-----------------1) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=get&lt;route xmlns='http://camel.apache.org/schema/spring' trace='true' &gt; &lt;from uri='restlet:///nimbus/hello.restlet/1.0?restletMethods=get'/&gt; &lt;transform&gt; &lt;simple&gt;Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}&lt;/simple&gt; &lt;/transform&gt; &lt;/route&gt;2) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=post &lt;route xmlns='http://camel.apache.org/schema/spring' trace='true' &gt; &lt;from uri='restlet:///nimbus/hello.restlet/1.0?restletMethods=post'/&gt; &lt;transform&gt; &lt;simple&gt;Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}&lt;/simple&gt; &lt;/transform&gt; &lt;/route&gt;3) route 1work fine  but #2 results in the following exception. both route work fine in Camel 2.9.1.Exception:012-07-27 10:29:20 646-0400 ERROR grails.app.service.nimbus.ComputeService localhost addRoute for hello.restletpost failed - Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint&#91;/nimbus/hello.restlet/1.0&#93; Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint&#91;/nimbus/hello.restlet/1.0&#93; at org.apache.camel.impl.DefaultCamelContext(doStartOrResumeRouteConsumers:1993) I've already posted on http://camel.465427.n5.nabble.com/Apache-Camel-2-10-0-multiple-restlet-routes-of-the-same-restlet-URI-but-different-VERBs-does-not-work-td5716556.html,2.10.0,2.9.4; 2.10.2; 2.11.0,0,2,150,1,5,2,0,0,0,0,0,1,1,3,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletEndpoint.java;components/camel-restlet/src/test/java/org/apache/camel/component/restlet/RestletMultiRoutesEndpointTest.java;,0,0
5536,Bug,Resolved,Fixed,,Minor,Claus Ibsen,2012/08/22 20:46:39 +0100,2012/09/27 11:49:45 +0100,Claus Ibsen,2012/09/27 11:49:45 +0100,35.62715278,0,Possible issue in camel-apns - Reported on user forum,See nabblehttp://camel.465427.n5.nabble.com/Issue-with-ApnsServiceFactory-tp5717573.html,2.10.0,2.9.4; 2.10.2; 2.11.0,0,2,5,1,1,1,0,0,0,0,0,0,1,1,components/camel-apns/src/main/java/org/apache/camel/component/apns/factory/ApnsServiceFactory.java;,0,0
5537,Bug,Resolved,Fixed,camel-mina2,Major,Andrew Lawrenson,2012/08/23 10:28:15 +0100,2012/08/26 10:20:03 +0100,Claus Ibsen,2012/08/26 10:29:19 +0100,3.000740741,0.006435185,Mina2 Consumer doesn't reliably work with SSL,I've been trying to write a service using Camel 2.10.0 which uses the mina2 component to expose a service  and which uses SSL  using an endpoint of:mina2:tcp://localhost:6500?sync=true&amp;filters=#hl7SslFilterFactory #hl7CodecFilter&amp;allowDefaultCodec=falsehowever  what I found was that the SSL handshake was failing quite often for no apparent reason. Investigating further  it appeared that messages sent during the handshake were being processed out of order - specifically  when the client (which uses a standard java SSLSocket) sent a 'TLSv1 Change Cipher Spec' followed by a 'TLSv1 Handshake'  the 'TLSv1 Handshake' was being processed before the 'TLSv1 Change Cipher Spec'  breaking the process.This appears to have been caused because when the the Mina2Consumer configures MINA for tcp (in Mina2Consumer.setupSocketProtocol)  it is using a UnorderedThreadPoolExecutor - which allows messages to be processed in any order. Switching this to use a OrderedThreadPoolExecutor instead has fixed the issue.May I request that the use of UnorderedThreadPoolExecutor vs OrderedThreadPoolExecutor be configurable via endpoint parameters? (or OrderedThreadPoolExecutor is used when SSL if configured). I'm assuming the reason for the use of UnorderedThreadPoolExecutor is simply for performance.,2.10.0,2.10.2; 2.11.0,0,2,174,1,1,1,0,0,0,0,1,0,1,3,components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Configuration.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java;,0,0
5540,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/08/25 10:08:48 +0100,2012/08/25 10:08:48 +0100,Claus Ibsen,2012/08/25 11:19:33 +0100,0.049131944,0.049131944,File consumer - NPE if configured to consume from root directory,See nabblehttp://camel.465427.n5.nabble.com/Setting-root-folder-as-endpoint-Could-not-poll-endpoint-NPE-tp5717845.html,2.9.2; 2.10.0,2.9.4; 2.10.2; 2.11.0,0,1,5,1,0,0,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumeRootDirManualTest.java;,0,0
5545,Improvement,Resolved,Fixed,,Major,Rich Newcomb,2012/08/29 03:14:51 +0100,2012/08/31 14:29:55 +0100,Unassigned,2012/08/31 14:29:55 +0100,2.468796296,0,Support key password for private key access in XMLSecurity,Enhance the XMLSecurity component to enable access of a private key (for decryption) from a Java key store using a password that is unique to the key  and different than the key store password.The likely solution is to allow an optional 'keyPassword' parameter in the XMLSecurity data format.A description of the issue in context is here :http://camel.465427.n5.nabble.com/XMLSecurity-key-recovery-fails-when-keystore-and-key-use-different-passwords-td5718094.html,2.10.0,2.10.2; 2.11.0,0,2,60,1,4,2,1,0,0,1,0,0,2,8,camel-core/src/main/java/org/apache/camel/builder/DataFormatClause.java;camel-core/src/main/java/org/apache/camel/model/dataformat/XMLSecurityDataFormat.java;components/camel-xmlsecurity/src/main/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormat.java;components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/SpringXmlSecurityDataFormatWithKeyPasswordTest.java;components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java;components/camel-xmlsecurity/src/test/resources/org/apache/camel/dataformat/xmlsecurity/SpringXmlSecurityDataFormatWithKeyPasswordTest-context.xml;components/camel-xmlsecurity/src/test/resources/recipient-with-key-pass.ks;camel-core/src/main/java/org/apache/camel/model/dataformat/XMLSecurityDataFormat.java;,0,0
5555,Bug,Resolved,Fixed,camel-quartz,Major,Ashwin Pejavar,2012/08/31 19:47:01 +0100,2012/09/03 03:40:07 +0100,Willem Jiang,2012/09/10 15:57:12 +0100,9.840405093,7.511863426,In ScheduledRoutePolicy a suspended route cannot be started,If a route is suspended using the ScheduledRoutePolicy and its subclasses (CronScheduledRoutePolicy)  it cannot be resumed or started.Looking at the code in ScheduledRoutePolicy.onJobExecute()  on start/resume actions  the route status is first checked and must be stopped or suspended before any actions is taken.Suspension of a route  only suspends the consumer and not the route  and hence the start/resume after a suspend does nothing.One solution could be to also check the status of the consumer on start/resume. This would require adding a isSuspended() to serviceHelper and should be relatively straightforward.,2.10.0,2.9.4; 2.10.2; 2.11.0,0,2,89,1,1,1,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java;components/camel-quartz/src/main/java/org/apache/camel/routepolicy/quartz/ScheduledRoutePolicy.java;components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/SimpleScheduledRoutePolicyTest.java;,0,0
5562,Bug,Resolved,Fixed,camel-beanio,Minor,Akitoshi Yoshida,2012/09/04 12:46:30 +0100,2012/09/07 07:17:32 +0100,Claus Ibsen,2012/09/07 07:17:32 +0100,2.771550926,0,camel-beanio using beanio 2.0 should be using the 2012/03 beanio namespace,camel-beanio which uses beanio-2.0.x library should use the beanio 2.0's namepsace (http://www.beanio.org/2012/03) and not the 1.2 namespace ( http://www.beanio.org/2011/01) in its test cases.The background to this is described in this mail thread.http://camel.465427.n5.nabble.com/issue-with-camel-beanio-s-version-used-in-trunk-td5718596.html,2.10.1,2.10.2; 2.11.0,0,2,41,1,1,1,1,0,0,0,0,0,1,1,components/camel-beanio/src/test/resources/org/apache/camel/dataformat/beanio/mappings.xml;,0,0
5569,Improvement,Resolved,Fixed,camel-cxf,Major,Scott England-Sullivan,2012/09/04 22:34:11 +0100,2012/09/05 02:15:06 +0100,Willem Jiang,2012/09/10 15:34:49 +0100,5.708773148,5.555358796,Make Spring Optional Bundle Import for CXF Transport,The camel-cxf-transport component should define the Spring import packages as optional given they are only required if using the Spring DSL namespaces. If you are using Java DSL Spring is not required.Best Regards Scott ES,2.11.0,2.11.0,0,2,34,1,2,2,1,0,0,0,0,0,1,1,components/camel-cxf-transport/pom.xml;,0,0
5574,Bug,Resolved,Fixed,camel-ftp,Major,Akitoshi Yoshida,2012/09/06 21:57:01 +0100,2012/09/07 03:19:24 +0100,Willem Jiang,2013/01/24 17:54:59 +0100,139.8319213,139.608044,camel-sftp's stepwise behavior to walk up and down relatively to avoid potential traversal issues,I am having a directory traversal problem using the stepwise mode of camel-sftp at the producer side. Basically  it can walk down the path from the starting directory to the walking directory  but it cannot go back correctly to the original starting directly. The server is SSH-2.0-Cleo VLProxy/3.0.1 SSH FTP server.I saw a related JIRA issue CAMEL-3309 that describes some issues in the stepwise traversal and some background to this related problem.My question is on the part that changes the working directory back to the original starting folder. I am wondering why we are using stepwise traversal from the ancestor directory towards the starting child directory  instead of moving upwards relatively from the working directory back to the starting directory. This reverse traversal does not require accessing the ancestry path above the staring directory (hence  not affected by the accessing problem). And in fact  I think this reverse stepwise traversal seems more natural order than doing stepwise traversal each time from top down. How do you think?I have made a change that implements this reverse stepwise traversal in SftpOperations and also made a few minor improvement changes.This changed version passes all the existing tests and works also against the above server.I am attaching a patch file for this change. I would appreciate if you can comment on it.Thanks.regards  aki,2.10.1,2.9.4; 2.10.2; 2.11.0,0,3,230,1,8,3,0,0,0,0,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
5592,Bug,Resolved,Fixed,camel-core,Minor,Meifang Shen,2012/09/12 04:22:23 +0100,2012/09/28 13:05:56 +0100,Claus Ibsen,2012/09/28 14:05:49 +0100,16.40516204,0.041585648,Logger Level is always at default level('ERROR') when error handler is LoggingErrorHandler,when logger level is set to other level (WARN  DEBUG or INFO) except for ERROR  but actually the log is always at ERROR level (it's the default level).,2.9.3; 2.10.1,2.9.4; 2.10.2; 2.11.0,0,2,28,1,3,2,1,1,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/builder/LoggingErrorHandlerBuilder.java;camel-core/src/main/java/org/apache/camel/processor/LoggingErrorHandler.java;camel-core/src/test/java/org/apache/camel/builder/LoggingErrorHandlerBuilderTest.java;,0,0
5604,Improvement,Resolved,Fixed,camel-jackson,Minor,Claus Ibsen,2012/09/13 12:51:28 +0100,2014/07/23 10:17:52 +0100,Claus Ibsen,2014/07/23 10:44:44 +0100,677.9119907,0.018657407,camel-jackson - Make it easier to support List as output out of the box,See nabblehttp://camel.465427.n5.nabble.com/JSON-Jackson-return-list-rather-than-POJO-tp5717341.htmlWe should look into making it easier to output a List as output with jackson json. On the nabble link there is an example and pseduo code how to do that.We should find a way to make that easy in Camel. Either as some new option  or somehow auto detect its a List etc.,2.10.0,2.14.0,0,4,58,1,6,4,1,0,0,0,0,0,1,10,camel-core/src/main/java/org/apache/camel/model/dataformat/JsonDataFormat.java;components/camel-jackson/src/main/java/org/apache/camel/component/jackson/JackconConstants.java;components/camel-jackson/src/main/java/org/apache/camel/component/jackson/JacksonConstants.java;components/camel-jackson/src/main/java/org/apache/camel/component/jackson/JacksonDataFormat.java;components/camel-jackson/src/main/java/org/apache/camel/component/jackson/ListJacksonDataFormat.java;components/camel-jackson/src/test/java/org/apache/camel/component/jackson/JacksonMarshalUnmarshalListTest.java;components/camel-jackson/src/test/java/org/apache/camel/component/jackson/JacksonMarshalUnmarshalTypeHeaderTest.java;components/camel-jackson/src/test/java/org/apache/camel/component/jackson/ListJacksonUnmarshalDTest.java;components/camel-jackson/src/test/java/org/apache/camel/component/jackson/SpringJacksonMarshalUnmarshalListTest.java;components/camel-jackson/src/test/resources/org/apache/camel/component/jackson/SpringJacksonMarshalUnmarshalListTest.xml;,0,0
5610,Bug,Resolved,Fixed,,Major,Willem Jiang,2012/09/14 00:57:48 +0100,2012/09/14 00:57:48 +0100,Willem Jiang,2012/09/14 09:50:04 +0100,0.36962963,0.36962963,camel-hl7 bundle should specify the mina version,As there could be different version of mina or mina2 exist in the OSGi platform  we need to specify the right version rang on camel-hl7 which has the dependency on the mina.,2.9.3; 2.10.1,2.9.4; 2.10.2; 2.11.0,0,1,32,1,1,1,1,1,0,0,0,0,1,1,components/camel-hl7/pom.xml;,0,0
5624,Improvement,Resolved,Fixed,,Trivial,Jo?o Loureiro,2012/09/18 14:29:19 +0100,2012/09/21 07:54:39 +0100,Claus Ibsen,2012/09/21 07:54:39 +0100,2.725925926,0,An exception when constructing JT400 endpoints should not leak the password,Sanitize the endpoint URI in the message of the runtime exception thrown in the constructors for Jt400DataQueueEndpoint and Jt400PgmEndpoint.,2.10.1,2.10.2; 2.11.0,0,2,19,1,2,2,1,0,0,1,0,0,1,2,components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueEndpoint.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400PgmEndpoint.java;,0,0
5626,Bug,Resolved,Fixed,camel-jms,Minor,Ra?l Kripalani,2012/09/19 01:12:35 +0100,2012/09/19 02:03:21 +0100,Ra?l Kripalani,2012/09/20 00:09:27 +0100,0.956157407,0.920902778,JmsToJmsTransactedSecurityTest in camel-jms fails every now and then,Test JmsToJmsTransactedSecurityTest fails every now and then because of JMS message redelivery. When the entire test class is executed  it sometimes happens that the message that failed at testJmsSecurityFailure test method pops up in the assertions of testJmsSecurityOK.,2.11.0,2.11.0,0,1,39,2,1,1,1,0,0,0,0,0,1,1,components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/JmsToJmsTransactedSecurityTest.java;,0,0
5631,Bug,Closed,Fixed,camel-core,Minor,Frank Sch?nheit,2012/09/20 12:18:09 +0100,2012/09/20 23:13:45 +0100,Christian M?ller,2012/09/22 17:55:43 +0100,2.234421296,1.779143519,EventHelper.notifyRouteStarted skips all remaining notifiers if one if the notifiers ignores route events,Having two or more notifiers registered at the management strategy of a camel context  where one of the notifiers (not the last one) is set up to ignore route events  results in all remaining notifiers to be skipped when notifying a RouteStartedEvent.Look at http://svn.apache.org/viewvc/camel/branches/camel-2.10.x/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?revision=1340446&amp;view=markup  line 237: There's a 'return' which actually should be a 'continue'.Note: CamelContextStoppingEvents are also affected.,2.10.0,2.9.4; 2.10.2; 2.11.0,0,2,62,2,6,2,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/util/EventHelper.java;camel-core/src/test/java/org/apache/camel/util/EventHelperTest.java;,0,0
5632,Bug,Resolved,Fixed,camel-core,Major,Joakim Sundqvist,2012/09/21 14:00:04 +0100,2012/09/22 09:30:19 +0100,Claus Ibsen,2012/09/22 10:44:51 +0100,0.86443287,0.051759259,ObjectHelper.resolveUriPath is broken  can not handle:  '../../' correctly,In my xsl-files I have imports and includes that resides in folders a few levels up.Ex: &lt;xsl:include href='../../common/myfunctions.xsl'/&gt;When camel starts up and tries to resolve the paths it crashes because of the current implementation in ObjectHelper.resolveUriPath(..)Made a simple testcase that demonstrates my problem.public void testResolveUriPath() throws Exception { assertEquals('xslt/'  ObjectHelper.resolveUriPath('xslt/one/../')); // OK assertEquals('xslt/'  ObjectHelper.resolveUriPath('xslt/one/../two/../')); // OK assertEquals('xslt/'  ObjectHelper.resolveUriPath('xslt/')); // OK assertEquals(''  ObjectHelper.resolveUriPath('./')); // OK assertEquals('xslt/'  ObjectHelper.resolveUriPath('xslt/one/two/../../')); // Fails  gives 'xslt/one/.' assertEquals('xslt/'  ObjectHelper.resolveUriPath('xslt/one/two/../.././'));// Fails  gives 'xslt/one/.' },2.10.1,2.9.4; 2.10.2; 2.11.0,0,2,102,1,2,1,1,0,0,0,0,1,1,3,camel-core/src/main/java/org/apache/camel/util/FileUtil.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/util/FileUtilTest.java;,0,0
5636,Bug,Resolved,Fixed,camel-core,Major,Ra?l Kripalani,2012/09/21 21:07:28 +0100,2012/09/21 21:07:28 +0100,Ra?l Kripalani,2012/09/25 22:44:31 +0100,4.067395833,4.067395833,Enricher with async routing not handling exceptions thrown from AggregationStrategy,The Enricher does not handle exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. It leads to the following thread dump  callback thread remains blocked forever.'Camel (context) thread #10 - JmsConsumer[queue]' daemon prio=5 tid=103666000 nid=0x113c25000 waiting on condition [113c24000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;7fd4a8de0&gt; (a java.util.concurrent.CountDownLatch$Sync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281) at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:120) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680),2.9.3; 2.10.1,2.9.4; 2.10.2; 2.11.0,0,2,107,1,5,2,1,1,0,0,1,0,1,3,camel-core/src/main/java/org/apache/camel/builder/BuilderSupport.java;camel-core/src/main/java/org/apache/camel/processor/Enricher.java;camel-core/src/test/java/org/apache/camel/processor/enricher/EnricherAsyncUnhandledExceptionTest.java;,0,0
5647,Bug,Resolved,Fixed,camel-core; eip,Major,Claus Ibsen,2012/09/25 08:37:16 +0100,2012/09/25 08:37:16 +0100,Claus Ibsen,2012/09/25 12:36:36 +0100,0.166203704,0.166203704,EIPs using custom aggregation strategy should fail if not possible to find in registry,Some EIPs support using a custom aggregations strategy. And if you use XML DSL to refer to a custom strategy  then you may have typo  or the strategy do not implement the interface.What we should do is to ensure to fail if the custom strategy could not be looked up. Some EIPs such as the content enricher will fallback and use a default strategy. This is wrong.,2.9.0; 2.10.0,2.9.4; 2.10.2; 2.11.0,0,1,67,1,0,0,1,1,0,0,0,0,1,16,camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java;camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java;camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java;camel-core/src/main/java/org/apache/camel/model/EnrichDefinition.java;camel-core/src/main/java/org/apache/camel/model/IdempotentConsumerDefinition.java;camel-core/src/main/java/org/apache/camel/model/LoadBalancerDefinition.java;camel-core/src/main/java/org/apache/camel/model/MulticastDefinition.java;camel-core/src/main/java/org/apache/camel/model/PollEnrichDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessDefinition.java;camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java;camel-core/src/main/java/org/apache/camel/model/WireTapDefinition.java;camel-core/src/main/java/org/apache/camel/spi/RouteContext.java;camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java;camel-core/src/test/java/org/apache/camel/model/ProcessorTypeConfigurationTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerCamelContextRefNotFoundTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerRouteContextRefNotFoundTest.java;,0,0
5655,Bug,Resolved,Fixed,camel-blueprint; camel-spring,Major,Anton Koscejev,2012/09/27 11:02:26 +0100,2012/09/27 11:52:06 +0100,Claus Ibsen,2012/09/27 12:40:16 +0100,0.067939815,0.033449074,Camel Endpoint ignores camelContextId property in Spring configuration,Camel Endpoint  if configured outside camelContext element in Spring configuration  ignores camelContextId property. Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two endpoints outside camelContext  but with camelContextId specified. Both endpoints will be created pointing to the same (first) camel context  despite being configured to different contexts. Attempting to use them by reference results in failure  as endpoint camelContext doesn't match the expected one.,2.10.1,2.9.4; 2.10.2; 2.11.0,0,2,72,1,4,2,1,0,0,0,0,0,1,3,components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java;components/camel-spring/src/test/java/org/apache/camel/spring/config/DualCamelContextEndpointOutsideTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/config/DualCamelContextEndpointOutsideTest.xml;,0,0
5657,Bug,Resolved,Fixed,camel-core; eip,Minor,Claus Ibsen,2012/09/27 15:15:09 +0100,2012/09/27 15:15:09 +0100,Claus Ibsen,2012/09/27 15:20:33 +0100,0.00375,0.00375,Recipient list EIP - Should shutdown thread pool if parallel mode enabled,We should shutdown the thread pool for recipient list if a pool was in use  and it can be shutdown.The logic in doShutdown is missing that.Camel would though have a fail-safe when it shutdown itself to shutdown that pool otherwise. But we should shutdown when the EIP is shutdown itself.,2.9.3; 2.10.1,2.9.4; 2.10.2; 2.11.0,0,1,50,1,0,0,1,1,0,0,0,0,2,2,camel-core/src/main/java/org/apache/camel/processor/RecipientList.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;,0,0
5670,Bug,Resolved,Fixed,camel-mqtt,Minor,Stefan Hudelmaier,2012/10/01 09:44:10 +0100,2012/10/06 15:36:16 +0100,Claus Ibsen,2012/10/06 16:12:11 +0100,5.269456019,0.02494213,camel-mqtt - Nullpointer Exception when disconnected from broker,Hi  from time to time  we get the following exception when producing messages via camel-mqtt:Caused by: java.lang.NullPointerException at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:551) at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:545) at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:166) at org.apache.camel.component.mqtt.MQTTProducer.doProcess(MQTTProducer.java:66) at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:38) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[...]From looking at the source of both camel-mqtt and the fusesource mqtt client  it looks like that this is caused by the mqtt-client being disconnected and trying to invoke the onFailure method on the callback:CallbackConnection.javapublic void publish(UTF8Buffer topic  Buffer payload  QoS qos  boolean retain  Callback&lt;Void&gt; cb) { queue.assertExecuting(); if( disconnected ) { cb.onFailure(createDisconnectedError()); return; } PUBLISH command = new PUBLISH().qos(qos).retain(retain); command.topicName(topic).payload(payload); send(command  cb); }camel-mqtt passes in null for the callback though. Wouldn't it be better if a more fitting exception were thrown  or if camel passed in a Callback in order to receive the onFailure event when disconnected from the broker?,2.10.1,2.10.2; 2.11.0,0,2,153,1,1,1,0,0,0,1,0,0,1,10,components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTComponent.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConfiguration.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTConsumer.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java;components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTProducer.java;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConsumerTest.java;components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTProducerTest.java;components/camel-mqtt/src/test/resources/log4j.properties;components/camel-mqtt/src/test/resources/test-options.properties;,0,0
5681,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2012/10/03 17:21:39 +0100,2012/10/03 17:21:39 +0100,Claus Ibsen,2012/10/06 07:19:00 +0100,2.581493056,2.581493056,Using recipient list in a doTry ... doCatch situation dont work properly,See nabblehttp://camel.465427.n5.nabble.com/Issue-with-doTry-doCatch-not-routing-correctly-tp5720325.htmlThe end user would expect that doTry .. doCatch will overrule. However it gets a bit further more complicated if the try block routes to other routes and using EIPs such as recipient list.,2.9.0; 2.10.0,2.9.4; 2.10.2; 2.11.0,0,1,38,1,1,1,0,1,0,0,0,0,2,9,camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectDynamicRouteTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListStreamingTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java;camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java;camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java;camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStopOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelFineGrainedErrorHandlingTest.java;camel-core/src/test/java/org/apache/camel/processor/SplitterParallelStopOnExceptionTest.java;camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java;,0,0
5689,Improvement,Resolved,Fixed,camel-netty,Major,Claus Ibsen,2012/10/06 10:23:25 +0100,2012/10/06 14:50:57 +0100,Claus Ibsen,2012/10/06 14:50:57 +0100,0.185787037,0,Netty - Should use ordered thread pool,We should favor using OrderedMemoryAwareThreadPoolExecutor andOrderedDownstreamThreadPoolExecutor to ensure ordering of events in a channel.See nabblehttp://camel.465427.n5.nabble.com/Netty-or-Mina-Async-in-the-same-socket-tp5720478.htmlWe can add an option so people can turn it off  like we did for mina2.,2.10.0,2.10.2; 2.11.0,0,1,33,1,1,1,0,0,0,0,0,0,2,10,tests/camel-itest/src/test/java/org/apache/camel/itest/netty/NettyAsyncRequestReplyTest.java;tests/camel-itest/src/test/resources/log4j.properties;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConfiguration.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConsumer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyHelper.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ServerChannelHandler.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettyConcurrentTest.java;,0,0
5694,Bug,Resolved,Fixed,camel-jms,Minor,Claus Ibsen,2012/10/09 08:18:27 +0100,2012/10/09 08:18:27 +0100,Claus Ibsen,2012/10/09 08:41:35 +0100,0.016064815,0.016064815,camel-jms - Should also allow multiple consumers from multiple routes from the same queue,If having 2+ routes that consumes from the same queue  then that should be allowed.Its a bit unusual though for queues in Camel as you most likely want to use the same route for the same queue. But there is nothing in the JMS spec that forbids this.,2.10.0,2.9.4; 2.10.2; 2.11.0,0,1,48,1,0,0,0,0,0,0,0,0,1,2,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java;,0,0
5702,Improvement,Resolved,Fixed,camel-netty,Minor,Claus Ibsen,2012/10/14 10:58:28 +0100,2012/10/14 10:58:28 +0100,Claus Ibsen,2012/10/14 11:32:42 +0100,0.023773148,0.023773148,camel-netty - The ordered thread pool should be shared,Related to CAMEL-5689The ordered memory thread pool from Netty is intended to be shared per application. And not per consumer.,2.10.2,2.10.3; 2.11.0,0,1,30,1,0,0,0,0,0,0,1,0,1,3,components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyComponent.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyEndpoint.java;,1,1
5707,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/10/16 14:42:11 +0100,2012/10/16 14:42:11 +0100,Claus Ibsen,2012/10/16 14:47:32 +0100,0.003715278,0.003715278,NotifyBuilder should be thread safe,In high concurrent tests the NotifyBuilder may miss a counter.,2.9.0; 2.10.0,2.9.5; 2.10.3; 2.11.0,0,1,10,1,0,0,1,1,0,0,0,0,2,2,camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java;,0,0
5710,Bug,Resolved,Fixed,camel-restlet,Major,Amit Patel,2012/10/18 02:02:14 +0100,2012/10/18 06:13:09 +0100,Claus Ibsen,2012/10/18 06:36:58 +0100,0.190787037,0.016539352,Rest route returns response with http Status code 500 Internal Server Error when response has Last-Modified or Header-expires in header as string.,Rest route returns Response with http Status code 500 Internal Server Error and expected response headers/body when response has Last-Modified or Header-expires in header as string. I found the issue in below code it try to convert string Wed  31 Dec 1969 18:00:00 CS to Date and it fails. Is it posible to convert String Date without knowing Date format?DefaultRestletBinding======================= if (header.equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) { if (value instanceof Calendar) { message.getEntity().setModificationDate(((Calendar) value).getTime()); } else if (value instanceof Date) { message.getEntity().setModificationDate((Date) value); } else { Date date = exchange.getContext().getTypeConverter().mandatoryConvertTo(Date.class  value); // Here it try to convert String to Date it throws No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed  31 Dec 1969 18:00:00 CS message.getEntity().setModificationDate(date); } }Stack trace===========7 Oct 2012 08:28:06 010 WARN org.restlet.Component.StatusFilter - Exception or error caught in status serviceorg.apache.camel.RuntimeCamelException: Cannot process request at org.apache.camel.component.restlet.RestletConsumer$1.handle(RestletConsumer.java:62) at org.apache.camel.component.restlet.MethodBasedRouter.handle(MethodBasedRouter.java:54) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.routing.Router.doHandle(Router.java:500) at org.restlet.routing.Router.handle(Router.java:740) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.routing.Router.doHandle(Router.java:500) at org.restlet.routing.Router.handle(Router.java:740) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.engine.application.StatusFilter.doHandle(StatusFilter.java:154) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.routing.Filter.doHandle(Filter.java:159) at org.restlet.routing.Filter.handle(Filter.java:206) at org.restlet.engine.ChainHelper.handle(ChainHelper.java:114) at org.restlet.Component.handle(Component.java:391) at org.restlet.Server.handle(Server.java:491) at org.restlet.engine.ServerHelper.handle(ServerHelper.java:75) at org.restlet.engine.http.HttpServerHelper.handle(HttpServerHelper.java:153) at org.restlet.ext.servlet.ServerServlet.service(ServerServlet.java:1031) at org.apache.shiro.grails.SavedRequestFilter.doFilter(SavedRequestFilter.java:56) at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:360) at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:276) at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90) at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83) at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:344) at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:272) at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909) at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed  31 Dec 1969 18:00:00 CST at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:169),2.10.1,2.9.5; 2.10.3; 2.11.0,0,2,230,1,3,2,1,0,0,0,0,0,1,1,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java;,0,0
5712,Bug,Resolved,Fixed,camel-blueprint,Critical,Claus Ibsen,2012/10/18 13:41:47 +0100,2012/10/18 20:43:17 +0100,Claus Ibsen,2012/10/18 20:43:17 +0100,0.292708333,0,BlueprintCamelContext should not get started in the init() method but later when the blueprint container is fully initialized,The init() method in BlueprintCamelContext should not call maybeStart(). but instead should be started when the blueprint container is done doing all its dance and initialization.For example Spring sends on ContextRefreshedEvent when its done.We need something similar for blueprint to tell us when its done doing its initialization et all.The problem is that the CamelContext should not be started until all that other stuff is initialized as well.,2.9.0; 2.10.0,2.9.5; 2.10.3; 2.11.0,0,1,68,1,1,1,1,1,0,0,0,0,1,5,components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java;components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/BlueprintPackageScanTest.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/scan/MyCoolRoute.java;components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/packagescan.xml;,0,0
5722,Bug,Closed,Fixed,camel-jetty,Critical,Ra?l Kripalani,2012/10/20 17:02:25 +0100,2012/10/20 17:02:25 +0100,Ra?l Kripalani,2012/10/27 19:33:46 +0100,7.105104167,7.105104167,Classloader mixup when consumers across bundles share the same camel-jetty port,Happens in an OSGi environment; but it is also applicable in modular servers that build dynamic classloaders (e.g. JBoss AS) per deployed artifacts (WAR  module  EAR  etc.).If bundles A and B are both creating camel-jetty consumers on the same TCP port  the consumers will share the underlying Jetty connector. Moreover  the Jetty connector is indeed created by the first consumer that initialises on that TCP port.Since the Camel route executes on the Jetty Connector thread  all class resolutions will happen against the classloader of the bundle that initialises first.This makes class resolution absolutely undeterministic and erratic. Quite a nasty bug IMHO.Perhaps this can be fixed by adding a call to Thread.setContextClassLoader() passing the classloader of the JettyHttpEndpoint  as soon as a request comes in?,2.8.0,2.9.5; 2.10.3; 2.11.0,0,3,124,1,9,3,1,0,0,0,0,0,2,10,components/camel-http/src/main/java/org/apache/camel/component/http/CamelServlet.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jetty/JettyClassloaderCheckProcessor.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jetty/OSGiJettyCamelContextsClassloaderTest.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/jetty/Classloader-CamelContext1.xml;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/jetty/Classloader-CamelContext2.xml;components/camel-http/src/main/java/org/apache/camel/component/http/CamelServlet.java;tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jetty/OSGiJettyCamelContextsClassloaderTest.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/jetty/Classloader-CamelContext1.xml;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/jetty/Classloader-CamelContext2.xml;,0,0
5724,Improvement,Resolved,Fixed,camel-spring-ws,Major,Andrej Zachar,2012/10/22 08:03:16 +0100,2012/10/25 11:45:35 +0100,Willem Jiang,2012/12/22 09:47:25 +0100,61.07232639,57.91793981,Spring-WS consumer and producer do not propagate some custome headers and attachements to a response message,Hi!I wanted to send back as response or as a request some soap messages with modified header.I found out that SpringWebserviceProducer and SpringWebserviceConsumer do not populate a soap header for any outgoing message from a camel exchange.In the attachments I am sending you a patch against camel-spring-ws 2.10.1 that solves this issue.Please let me know  what do you think about it.Best regards Andrej,2.10.1,2.11.0,0,5,62,1,26,5,1,0,0,0,0,0,3,27,components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceComponent.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConfiguration.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConsumer.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/filter/MessageFilter.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/filter/impl/BasicFilterStrategy.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/filter/impl/BasicMessageFilter.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/MessageFilterResolvingDefaultsTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/MessageFilterResolvingTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/filter/impl/BasicMessageFilterTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/testfilters/EmptyMessageFilter.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/testfilters/GlobalMessageFilter.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/testfilters/LocalMessageFilter.java;components/camel-spring-ws/pom.xml;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceComponent.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConfiguration.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/filter/impl/BasicFilterStrategy.java;components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/filter/impl/BasicMessageFilter.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/MessageFilterResolvingDefaultsTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/MessageFilterResolvingTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/filter/impl/BasicMessageFilterTest.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/testfilters/EmptyMessageFilter.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/testfilters/GlobalMessageFilter.java;components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/testfilters/LocalMessageFilter.java;components/camel-spring-ws/src/test/resources/org/apache/camel/component/spring/ws/DefaultMessageFilter-context.xml;components/camel-spring-ws/src/test/resources/org/apache/camel/component/spring/ws/MessageFilter-context.xml;components/camel-spring-ws/src/test/resources/sampleAttachment.txt;,0,0
5757,Bug,Resolved,Fixed,camel-http,Major,Maxime Tremblay,2012/10/29 17:13:09 +0100,2012/10/30 09:49:47 +0100,Willem Jiang,2012/11/02 08:44:34 +0100,3.64681713,2.954710648,HTTP 1.1 Host header not set correctly with camel-http4,The HTTP 1.1 Host header is not set correctly when using the camel-http4 component as a proxy with bridgeEnpoint=true.The original request Host header is set in the proxied request instead of the host of the service requested by the proxy (ref: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html section 14.23).This simple route shows the problem: &lt;route autoStartup='true' id='TestHost' xmlns:ns2='http://camel.apache.org/schema/web' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;from uri='jetty:http://0.0.0.0:8090/TestHost'/&gt; &lt;to uri='https4://www.google.com?bridgeEndpoint=true&amp;throwExceptionOnFailure=false'/&gt; &lt;/route&gt; This is what I get in the log:INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] DefaultClientConnection DEBUG Sending request: GET / HTTP/1.1INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'GET / HTTP/1.1&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'breadcrumbId: ID-localhost-1329-1351277552803-0-2&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'Accept-Encoding: gzip  deflate&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'Host: localhost:8090&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'Accept: text/html application/xhtml+xml application/xml;q=0.9 /;q=0.8&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'Accept-Language: en-us en;q=0.5&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; 'Connection: Keep-Alive&#91;/r&#93;&#91;/n&#93;'INFO | jvm 1 | 2012/10/26 14:52:48 | [ qtp31541880-35 - /TestHost] wire DEBUG &gt;&gt; '&#91;/r&#93;&#91;/n&#93;',2.10.1,2.9.5; 2.10.3; 2.11.0,0,2,261,1,2,1,1,0,0,0,0,0,2,7,components/camel-ahc/src/main/java/org/apache/camel/component/ahc/DefaultAhcBinding.java;components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/BaseJettyTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyRouteTest.java;,0,0
5761,Bug,Resolved,Fixed,camel-aws,Major,Carlos Roman,2012/10/30 19:09:49 +0100,2012/10/31 07:12:37 +0100,Willem Jiang,2012/11/02 08:08:50 +0100,2.540983796,2.039039352,Update SqsConsumer to extend Visibility Timeout correctly,Currently SqsConsumer will scheduled a future to happen start occruing 1/2 the visibility timeout  and reoccur again at the visibility timeout period. Because of the way SQS works  when you request a ChangeMessageVisibility timeout it does not add that to the time remaining on the message visibility. Instead it will set the message visibility to the time out given. This means that what actually happens in the camel code is that: we request the ChangeMessageVisibility timeout to be set to X seconds from now after X/2 seconds then every X seconds after that we we request the ChangeMessageVisibility timeout to be set to X from nowThis means that our message will become visible every now and again as the ChangeMessageVisibility timeout is not updated in time as period between successive executions is the same as the timeout period we request.I've attached two patches which would fix this issue. 'aws_sqs_visibility_timeout_simple.patch' - This patch changes the way we set up the future. The delay and period are now the same so that we call ChangeMessageVisibility every X/2 after the message has been pulled. 'aws_sqs_visibility_timeout_phased_timeout.patch' - This one keeps the delay to 1/2 the period and requests ChangeMessageVisibility every period. This time though it requests the visibility to be 1.5 * the period. This means that it behaves as originally planned  as if it was adding duration to the visibility duration left. This means we call Amazon less times and still keep the message hidden as expected.This was looked at with Alex Hutter (both working on same project).,2.10.2,2.10.3; 2.11.0,0,2,255,1,2,2,1,0,0,0,0,0,1,2,components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsExtendMessageVisibilityTest.java;,0,0
5766,Bug,Resolved,Fixed,camel-jetty,Major,Claus Ibsen,2012/11/02 12:40:35 +0100,2012/11/02 12:40:35 +0100,Claus Ibsen,2012/11/02 13:10:01 +0100,0.020439815,0.020439815,Configuring jetty component with a different name dont work with jetty consumer,For example if you do &lt;route&gt; &lt;from uri='jetty2:http://localhost:9090/myapp'/&gt; &lt;transform&gt; &lt;simple&gt;Hello ${body}&lt;/simple&gt; &lt;/transform&gt; &lt;/route&gt;Then it fails withjava.net.SocketException: Unresolved address at sun.nio.ch.Net.translateToSocketException(Net.java:58) at sun.nio.ch.Net.translateException(Net.java:84) at sun.nio.ch.Net.translateException(Net.java:90) at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:61) at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187) at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316) at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.Server.doStart(Server.java:286) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:315) at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:149) at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)...,2.9.0; 2.10.0,2.9.5; 2.10.3; 2.11.0,0,1,62,1,1,1,1,1,0,0,0,1,1,3,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettyComponentSpringConfiguredTest.java;components/camel-jetty/src/test/resources/org/apache/camel/component/jetty/JettyComponentSpringConfiguredTest.xml;,0,0
5767,Improvement,Closed,Fixed,camel-core,Major,Christian M?ller,2012/11/02 23:12:35 +0100,2012/11/02 23:12:35 +0100,Christian M?ller,2012/11/22 08:07:38 +0100,19.3715625,19.3715625,Camel Splitter eat up exceptions recorded by the underlying Scanner,See http://camel.465427.n5.nabble.com/Trouble-with-split-tokenize-on-linux-td5721677.html for details,2.9.4; 2.10.2,2.9.5; 2.10.3; 2.11.0,0,2,7,1,3,2,1,1,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/processor/Splitter.java;camel-core/src/test/data/crm.sample.csv;camel-core/src/test/java/org/apache/camel/processor/SplitterWithScannerIoExceptionTest.java;,0,0
5769,Bug,Closed,Fixed,camel-jms,Critical,Ra?l Kripalani,2012/11/03 13:57:45 +0100,2012/11/03 13:57:45 +0100,Ra?l Kripalani,2012/11/05 00:32:26 +0100,1.440752315,1.440752315,Camel JMS producer can block a thread under specific circumstances,This is an edge case  but when the following circumstances concur  the asynchronous routing engine in Camel become blocked: Sending an InOut exchange over JMS (request/reply)  where: Persistent messages are enabled (deliveryPersistent=true) useMessageIDasCorrelationID is enabled replyToType is Temporary queues (default) (using TemporaryQueueReplyManager) a timeout is setYou have to be really unlucky  but if the following condition is satisfied  a thread will become blocked:time the broker takes to ACK the produced message &gt; message timeoutHence  if we have a timeout of 3000ms  and the broker takes 4000ms to ACK the message (e.g. slow Disk I/O while the journal is rotating - it happened to us)  at some point we'll see this.2012-10-30 10:46:57 680 | WARN | CorrelationMap | 89 - org.apache.camel.camel-core - 2.8.0.fuse-06-11 | Exception occurred during purge task. This exception will be ignored.java.lang.NullPointerExceptionThe CorrelationMap is rendered useless  so if subsequent exchanges time out  the ReplyHandler may never get an onTimeout callback  thus leading to the waiting thread getting blocked forever if the async routing engine was in place.,2.8.6; 2.9.4; 2.10.2,2.9.5; 2.10.3; 2.11.0,0,1,176,1,2,1,0,1,0,1,1,0,2,4,camel-core/src/main/java/org/apache/camel/support/DefaultTimeoutMap.java;camel-core/src/main/java/org/apache/camel/support/DefaultTimeoutMap.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsBlockedAsyncRoutingEngineTest.java;,0,0
5770,Improvement,Closed,Fixed,camel-core,Minor,Christian M?ller,2012/11/05 12:27:43 +0100,2012/11/05 12:27:43 +0100,Christian M?ller,2012/11/05 12:55:15 +0100,0.01912037,0.01912037,RoutePolicySupport should provide some easy to use utility methods to suspend/resume routes as we have it already to start/stop routes,RoutePolicySupport should provide some easy to use utility methods to suspend/resume routes as we have it already to start/stop routes,2.9.4; 2.10.2,2.9.5; 2.10.3; 2.11.0,0,1,1,1,0,0,0,1,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/RoutePolicySupport.java;camel-core/src/test/java/org/apache/camel/impl/RoutePolicySupportTest.java;,0,0
5774,Bug,Resolved,Fixed,camel-activemq; camel-core; camel-jms,Minor,Viktor Nikolenko,2012/11/06 11:04:20 +0100,2013/02/01 15:58:19 +0100,Claus Ibsen,2013/02/03 09:55:59 +0100,88.95253472,1.74837963,ActiveMQ target endpoint with transferExchange=true does not work together with source File endpoint with preMove option set,Got failure on a simple route reading from file and sending to ActiveMQ queue.On source File endpoint set preMove option to some folder  and on target activemq endpoint set transferExchange=true.It fails with FileNotFound exception  trying to read file from original location  not from temporary preMoved one.Without preMove all works perfect.Simplified Spring application context with Camel routes looks like this:&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;beans xmlns='http://www.springframework.org/schema/beans' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation=' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd'&gt; &lt;bean id='brokerService' class='org.apache.activemq.broker.BrokerService' init-method='start' destroy-method='stop'&gt; &lt;property name='brokerName' value='localhost' /&gt; &lt;property name='useJmx' value='false' /&gt; &lt;property name='transportConnectorURIs'&gt; &lt;list&gt; &lt;value&gt;vm://localhost&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id='jmsConnectionFactory' class='org.apache.activemq.ActiveMQConnectionFactory' depends-on='brokerService'&gt; &lt;property name='brokerURL' value='vm://localhost'/&gt; &lt;property name='redeliveryPolicy' ref='redeliveryPolicyConfigActiveMQ'/&gt; &lt;/bean&gt; &lt;bean id='pooledConnectionFactory' class='org.apache.activemq.pool.PooledConnectionFactory' init-method='start' destroy-method='stop'&gt; &lt;property name='maxConnections' value='8' /&gt; &lt;property name='maximumActive' value='500' /&gt; &lt;property name='connectionFactory' ref='jmsConnectionFactory' /&gt; &lt;/bean&gt; &lt;bean id='redeliveryPolicyConfigActiveMQ' class='org.apache.activemq.RedeliveryPolicy'&gt; &lt;property name='maximumRedeliveries' value='1'/&gt; &lt;property name='redeliveryDelay' value='5000'/&gt; &lt;/bean&gt; &lt;camelContext id='testCustomer' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;endpoint id='sourceEndpoint' uri='file:e:/work/ids/testCustomer/input/?preMove=.tmp&amp;delay=1000&amp;readLock=rename&amp;copyAndDeleteOnRenameFail=false&amp;move=.archive&amp;moveFailed=.failed' /&gt; &lt;endpoint id='destJms' uri='activemq:queue:source?transferExchange=true&amp;connectionFactory=#pooledConnectionFactory' /&gt; &lt;route id='testRoute'&gt; &lt;from ref='sourceEndpoint' /&gt; &lt;to ref='destJms' /&gt; &lt;/route&gt; &lt;/camelContext&gt;&lt;/beans&gt;Exception trace:org.apache.camel.TypeConversionException: Error during type conversion from type: java.io.File to the required type: byte[] with value e:/work/ids/testCustomer/input/payment.xml due java.io.FileNotFoundException: e:/work/ids/testCustomer/input/payment.xml (The system cannot find the file specified) at com.it.ids.exceptions.HandleException.process(HandleException.java:20) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.FatalFallbackErrorHandler.processNext(FatalFallbackErrorHandler.java:42) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:766) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:273) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336) at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189) at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155) at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: e:/work/ids/testCustomer/input/payment.xml (The system cannot find the file specified) at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1270) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:926) at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:155) at org.apache.camel.component.file.FileBinding.loadContent(FileBinding.java:57) at org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(GenericFileConverter.java:123) at org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(GenericFileConverter.java:152) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922) at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.DefaultExchangeHolder.checkMapSerializableObjects(DefaultExchangeHolder.java:209) at org.apache.camel.impl.DefaultExchangeHolder.safeSetProperties(DefaultExchangeHolder.java:177) at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:93) at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:71) at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:439) at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:287) at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:266) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:215) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:158) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$3.doInJms(JmsConfiguration.java:192) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466) at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:189) at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:398) at org.apache.camel.component.jms.JmsProducer.processInOnly(JmsProducer.java:352) at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:132) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) ... 28 moreCaused by: java.io.FileNotFoundException: e:/work/ids/testCustomer/input/payment.xml (The system cannot find the file specified) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:106) at org.apache.camel.converter.IOConverter.toInputStream(IOConverter.java:73) at org.apache.camel.converter.IOConverter.toByteArray(IOConverter.java:243) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922) ... 71 more,2.10.2,2.10.4; 2.11.0,0,3,432,1,5,3,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java;camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java;camel-core/src/test/java/org/apache/camel/impl/DefaultExchangeHolderTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/FileRouteJmsKeepLastModifiedTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/FileRouteJmsPreMoveTest.java;,0,0
5781,Improvement,Resolved,Fixed,camel-aws,Major,Massyl Nait,2012/11/09 13:23:49 +0100,2012/11/09 15:46:26 +0100,Willem Jiang,2012/12/05 02:37:09 +0100,25.55092593,25.45188657,limitaions on s3 component. no means to specify acl on created object. objects do not inherit acl from the bucket they belong to.,When using s3 component to create new object on amazon bucket  there is no means to specify acl that will be applied to this newly created object. s3 objects do not inherit acl applied to the bucket they belong to. in s3 camel component (enpoint) we can specify bucket policy but not objects acl.the limitation is in s3producer.there is an attachment file (patch) to fix this quickly and whith little modifications to the existing code. but i think that we need to enhance the design of this component to be more flexible and rely on strategy that executes requests to interact with s3.for now there is no tests for s3producer in camel-aws thus i don't supply a unit test.if we enhance the design we can change or improve this layer with less effort. and we can do tests obviously.,2.10.2,2.10.4; 2.11.0,0,3,140,1,10,3,0,0,0,0,0,0,1,2,components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Constants.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java;,0,0
5782,Bug,Closed,Fixed,camel-aws,Minor,Julien Graglia,2012/11/09 15:02:32 +0100,2012/11/10 00:01:39 +0100,Christian M?ller,2012/11/10 12:09:09 +0100,0.879594907,0.505208333,regression : invalid SetQueueAttributesRequest created  works on 2.10.1,In org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes if I don't have any configuration  the created SetQueueAttributesRequest contains a null atttribute collection and AWS emit an error.In 2.10.1  no problem.Workaround in 2.10.2 : force the create SetQueueAttributesRequest to contain a valid attribute collection by defining a configuration in camel. For exemple: from('aws-sqs://'queue'?amazonSQSClient=#amazonSQSClient&amp;delay='pollCycle.getMillis()'&amp;maxMessagesPerPoll=10&amp;deleteAfterRead=false')  -&gt; works on 2.10.1  fail on 2.10.2if I add an argument to my URI'&amp;defaultVisibilityTimeout=30'  -&gt; works on 2.10.1  works on 2.10.2Exception : {{Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route SQS-to-MongoDB-EVENTS: Route[[From[aws-sqs://EVENTS?amazonSQSClient=#amazonSQSClien... because of Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=%23amazonSQSClient&amp;delay=60000&amp;deleteAfterRead=false&amp;maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name. at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at com.netceler.iv5measure.contract.impl.sqs.CamelRoutesLauncher.start(CamelRoutesLauncher.java:55) ~&#91;webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT&#93; at com.netceler.iv5measure.contract.impl.config.ConfiguredStreamInitializer.startStreams(ConfiguredStreamInitializer.java:39) ~&#91;webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT&#93; ... 58 common frames omittedCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=%23amazonSQSClient&amp;delay=60000&amp;deleteAfterRead=false&amp;maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name. at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:479) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; ... 66 common frames omittedCaused by: com.amazonaws.AmazonServiceException: The request must contain the parameter Attribute.Name. at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:614) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:312) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:165) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.services.sqs.AmazonSQSClient.invoke(AmazonSQSClient.java:812) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.amazonaws.services.sqs.AmazonSQSClient.setQueueAttributes(AmazonSQSClient.java:246) ~&#91;aws-java-sdk-1.3.23.jar:na&#93; at com.netceler.infra.aws.sqs.JMXSQS.setQueueAttributes(JMXSQS.java:108) ~&#91;infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT&#93; at com.netceler.infra.aws.sqs.AmazonSQSClientProxy.setQueueAttributes(AmazonSQSClientProxy.java:63) ~&#91;infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT&#93; at org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes(SqsEndpoint.java:139) ~&#91;camel-aws-2.10.2.jar:2.10.2&#93; at org.apache.camel.component.aws.sqs.SqsEndpoint.doStart(SqsEndpoint.java:93) ~&#91;camel-aws-2.10.2.jar:2.10.2&#93; at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:931) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:892) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:475) ~&#91;camel-core-2.10.2.jar:2.10.2&#93; ... 74 common frames omitted}},2.9.4; 2.10.2,2.9.5; 2.10.3; 2.11.0,0,2,262,2,2,2,0,1,0,0,0,1,1,3,components/camel-aws/pom.xml;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsEndpointTest.java;,0,0
5783,Improvement,Resolved,Fixed,camel-test,Minor,Akitoshi Yoshida,2012/11/09 16:00:59 +0100,2012/11/10 14:16:26 +0100,Willem Jiang,2012/11/10 15:30:08 +0100,0.978576389,0.051180556,option to add bundle directives in the generated test bundles by camel-test-blueprint,The generated test bundle by camel-test-blueprint has the plain test class name as the bundle symbolic name in its manifest.Some test cases may require bundle directives to be added to the bundle symbolic name entry in the manifest.One such test case is for disabling xml validation.To support such blueprint test cases  I would like to add an option in CamelBlueprintTestSupport to customize the bundle directives.,2.10.2,2.10.3; 2.11.0,0,2,65,1,2,2,0,0,1,0,0,0,1,4,components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java;components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/IgnoreDatatypesTest.java;components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/ignoreDatatypes.xml;,0,0
5791,Improvement,Resolved,Fixed,camel-cxf; tests,Major,Akitoshi Yoshida,2012/11/14 11:38:07 +0100,2012/11/16 15:57:29 +0100,Willem Jiang,2012/11/27 09:23:57 +0100,12.9068287,10.72671296,Adding blueprint based camel-cxf tests using camel-test-blueprint,Adding some blueprint scenario tests for camel-cxf using camel-test-blueprint.I put this in a separate test-only component under the tests folder. I can't put the test classes directly within camel-cxf because of the way how the bundle context is generated  namely the jars on the classpath are scanned and added to the context. Hence  the tests are in a separate component that refer to all the bundle jars that they need.I don't know if the tests folder is the the right location for this test component  though.,2.10.2,2.11.0,0,2,86,1,2,2,0,0,0,0,0,0,1,10,tests/camel-blueprint-cxf-test/pom.xml;tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/component/cxf/CXFTestSupport.java;tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/component/cxf/HelloService.java;tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfEndpointBeansTest.java;tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfPayloadProviderRouterTest.java;tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/MyProcessor.java;tests/camel-blueprint-cxf-test/src/test/resources/log4j.properties;tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfEndpointBeans.xml;tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfPayloadProviderRouterBeans.xml;tests/pom.xml;,0,0
5847,Improvement,Resolved,Fixed,camel-mongodb,Major,Arnout Engelen,2012/12/04 23:18:31 +0100,2012/12/05 08:55:06 +0100,Willem Jiang,2012/12/05 10:56:40 +0100,0.484826389,0.084421296,camel-mongodb - Add converters for files or inputstreams,Inserting files into MongoDB doesn't work like this:from('file:///tmp/test/apachecon?runLoggingLevel=TRACE') .to('mongodb:connectionBean?database=x&amp;collection=y&amp;operation=insert');It requires an explicit .convertBodyTo(String.class). The attached patch adds Converter}}s for File and InputStream object  detecting and supporting both {{JSON and BSON files/streams.The new String(input  'utf-8')) fragment seems a bit dodgy  but I don't really see a better way.,2.10.0,2.10.4; 2.11.0,0,3,57,1,5,3,1,0,0,0,0,0,2,3,components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/converters/MongoDbBasicConverters.java;components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/converters/MongoDbBasicConverters.java;components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/MongoDbConversionsTest.java;,0,0
5860,Bug,Resolved,Fixed,camel-validator,Major,David J. M. Karlsen,2012/12/10 15:23:08 +0100,2012/12/12 03:50:59 +0100,Willem Jiang,2013/03/07 20:15:41 +0100,87.20315972,85.68381944,Regression in validator component in 2.10.3,I get:CaughtExceptionType:java.lang.NullPointerException  CaughtExceptionMessage:null  StackTrace:java.lang.NullPointerException at org.apache.camel.converter.jaxp.XmlConverter.toStreamSource(XmlConverter.java:516) at org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(XmlConverter.java:399) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923) at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:66) at org.apache.camel.support.TypeConverterSupport.convertTo(TypeConverterSupport.java:34) at org.apache.camel.processor.validation.ValidatingProcessor.getSource(ValidatingProcessor.java:343) at org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:100) at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101) at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) atorg.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) /when I upgrade camel to 2.10.3 and use the validator component:&lt;camel:to uri='validator:META-INF/xsd/transactiongatetransfertransaction.xsd' /&gt;this did not happen in 2.10.2 or versions before that.,2.10.3,2.9.6; 2.10.4; 2.11.0,0,4,80,1,8,4,1,0,0,1,0,1,1,2,camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java;camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRouteTest.java;,0,0
5864,Bug,Resolved,Fixed,camel-core; camel-xslt,Major,Ra?l Kripalani,2012/12/11 17:08:46 +0100,2012/12/12 03:40:15 +0100,Willem Jiang,2012/12/12 07:19:15 +0100,0.590613426,0.152083333,Pre-XSLT and Validator Type Conversions from byte[] may easily fail,XsltBuilder.getSource(Exchange e  Object o) tries to convert the payload to a Source. If you have a byte[] payload  then the following type converter will likely be picked:InstanceMethodTypeConverter: public javax.xml.transform.sax.SAXSource org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(byte[] org.apache.camel.Exchange) throws java.io.IOException org.xml.sax.SAXException javax.xml.transform.TransformerExceptionThis type converter requires the Exchange (InstanceMethodTypeConverter.useExchange == true)  but line 461 of XsltBuilder doesn't pass it on.Therefore  a NullPointerException happens because the conversion method tries to access the Exchange.,2.10.3,2.9.6; 2.10.4; 2.11.0,0,2,71,1,1,1,1,0,0,1,0,1,1,2,camel-core/src/main/java/org/apache/camel/builder/xml/XsltBuilder.java;camel-core/src/test/java/org/apache/camel/component/xslt/XsltRouteTest.java;,0,0
5880,Bug,Resolved,Fixed,camel-quickfix,Minor,Babak Vahdat,2012/12/16 13:20:38 +0100,2013/04/30 23:06:46 +0100,Babak Vahdat,2013/04/30 23:32:19 +0100,135.4247801,0.017743056,camel-quickfix: QuickfixjEndpoint should adhere the InOut exchange pattern if you would ask for this MEP,See http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-td5723769.html,2.10.3,2.10.5; 2.11.1; 2.12.0,0,2,5,1,12,2,1,0,0,0,0,0,3,9,components/camel-quickfix/pom.xml;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/MessagePredicate.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjEndpoint.java;components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/converter/QuickfixjConverters.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjConsumerTest.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjProducerTest.java;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java;components/camel-quickfix/pom.xml;components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java;,0,0
5881,Improvement,Resolved,Fixed,camel-ftp,Minor,Preben Asmussen,2012/12/16 21:32:30 +0100,2012/12/19 04:39:14 +0100,Willem Jiang,2012/12/21 15:05:34 +0100,4.731296296,2.434953704,FTP endpoints should support charset property like File endpoint does,FTP endpoints should support charset property like the File endpoint does. Currently you have to remember to set the CamelCharsetName Exchange property if you want to have the message body transformed to another charset.See http://camel.465427.n5.nabble.com/Problem-w-FTP-producer-and-charset-td5723604.htmlI'll work on a patch and attach it later.,2.10.3,2.11.0,0,2,46,1,4,2,1,0,0,0,0,1,2,6,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerWithCharsetTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithCharsetTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerWithCharsetTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerFileWithCharsetTest.java;,0,0
5883,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2012/12/17 09:51:09 +0100,2013/07/11 03:31:19 +0100,Willem Jiang,2013/07/17 09:47:22 +0100,211.9973727,6.261145833,File consumer - When using done file name then delete the file when batch is complete,When using doneFileName then the file is deleted on each completion of files in the batch. And you get WARN logs about the done file cannot be deleted  because the 1st already deleted the file.We should defer and only delete the done file on the last in the batch.,2.9.0; 2.10.0,2.9.7; 2.10.7; 2.11.2; 2.12.0,0,2,49,1,1,1,1,1,0,0,0,0,2,4,camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDoneFileIssueTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java;camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDoneFileIssueTest.java;,0,0
5888,Bug,Resolved,Fixed,camel-core,Minor,Gennadiy Bukhmatov,2012/12/17 21:10:59 +0100,2012/12/21 14:13:49 +0100,Claus Ibsen,2012/12/21 14:51:33 +0100,3.73650463,0.026203704,When call removeRouteDefinition the route doesn't removed from collection of route Definitions.,When I call removeRouteDefinition for DefaultCamelContext  the route doesn't removed from collection of routes. public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception { String id = routeDefinition.idOrCreate(nodeIdFactory); stopRoute(id); removeRoute(id); }it is just remove it from running route service if context is running.When we do restart context this route started again. Workaround for this issue is call removeRouteDefinitions and wrap single route into collection.But when I call removeRouteDefinitions - it is process correctly: remove from collections of definitions and after removed from running route services. public synchronized void removeRouteDefinitions(Collection&lt;RouteDefinition&gt; routeDefinitions) throws Exception { this.routeDefinitions.removeAll(routeDefinitions); for (RouteDefinition routeDefinition : routeDefinitions) { removeRouteDefinition(routeDefinition); } },2.10.2,2.10.4; 2.11.0,0,2,101,1,1,1,1,0,0,1,0,0,1,2,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;camel-core/src/test/java/org/apache/camel/impl/CamelContextAddRouteDefinitionsFromXmlTest.java;,0,0
5889,Improvement,Resolved,Fixed,camel-scala,Major,Oleg Kozlov,2012/12/17 23:14:53 +0100,2013/01/05 12:39:34 +0100,Claus Ibsen,2013/01/05 13:33:33 +0100,18.5962963,0.037488426,Scala DSL: no tokenize('...') method,This is related to issue https://issues.apache.org/jira/browse/CAMEL-5803It looks like the fix included tokenizeXML() method  but there is still not tokenize()  I have a usecase where I have to split my in message body (text) by semi-colon character for downstream processing  so I need to be able to do something like the following in Scala DSL:split(_.in) tokenize(';')I fix would be very welcome  also  if there is a work around with TokenizeLanguage etc - please let me know  thank you!,2.10.3,2.10.4; 2.11.0,0,2,88,1,1,1,1,0,0,0,0,0,1,4,components/camel-scala/src/main/scala/org/apache/camel/scala/dsl/languages/Languages.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SplitterTokenizeHeaderTest.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SplitterTokenizePairTest.scala;components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SplitterTokenizeTest.scala;,0,0
5890,Bug,Resolved,Fixed,,Major,Willem Jiang,2012/12/18 04:59:56 +0100,2012/12/18 04:59:56 +0100,Willem Jiang,2013/01/18 02:54:22 +0100,30.91280093,30.91280093,NPE when jaxb fallback converter is used with RequestEntityConverter,As the RequestEntityConverter.toRequestEntity(String str  Exchange exchange) doesn't has check if the exchange is null  it caused the NPE as the user complain in camel user mailing list&#91;1&#93;&#91;1&#93;http://camel.465427.n5.nabble.com/Content-Enrich-Error-when-upgrading-Apache-Camel-from-2-9-2-to-any-higher-version-td5724244.htmlHere is the stack trace.CaughtExceptionType:org.apache.camel.TypeConversionException  CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value ... The complete Stack Trace : Exchange[ExchangePattern:InOnly  BodyType:String  Body:  CaughtExceptionType:org.apache.camel.TypeConversionException  CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException  StackTrace:org.apache.camel.TypeConversionException: Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:98) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47) at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390) at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343) at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Enricher.process(Enricher.java:114) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:148) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:57) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275) at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185) at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909) at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98) at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222) at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94) ... 44 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927) at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98) at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222) at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289) at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47) at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390) at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343) at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Enricher.process(Enricher.java:114) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275) at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:183) at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) ... 1 moreCaused by: java.lang.NullPointerException at org.apache.camel.component.http.RequestEntityConverter.toRequestEntity(RequestEntityConverter.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923) ... 50 more],2.9.4; 2.9.5; 2.10.2; 2.10.3,2.9.6; 2.10.4; 2.11.0,0,1,397,1,1,1,1,1,0,1,0,1,3,6,tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java;components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java;tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java;tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEntityConverter.java;,0,0
5899,Bug,Resolved,Fixed,camel-netty,Major,Claus Ibsen,2012/12/19 17:38:03 +0100,2012/12/19 17:38:03 +0100,Claus Ibsen,2012/12/20 11:04:37 +0100,0.726782407,0.726782407,camel-netty - Producer should avoid blocking while waiting for connection,We should at most wait for the connection timeout to trigger.,2.10.0,2.10.4; 2.11.0,0,1,11,1,0,0,1,0,0,0,0,0,2,3,components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java;,0,0
5917,Bug,Resolved,Fixed,camel-jms,Minor,Claus Ibsen,2012/12/29 11:44:28 +0100,2012/12/29 11:44:28 +0100,Claus Ibsen,2012/12/29 12:53:15 +0100,0.047766204,0.047766204,camel-jms - JmsPollingConsumer use the constant fields from JmsTemplate for receiveNoWait etc,See nabblehttp://camel.465427.n5.nabble.com/JmsPollingConsumer-and-method-receiveNoWait-has-incorrect-timeout-value-tp5722817.html,2.9.0; 2.10.0,2.9.6; 2.10.4; 2.11.0,0,2,5,2,1,1,1,1,0,0,0,0,1,1,components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsPollingConsumer.java;,0,0
5926,Improvement,Closed,Fixed,camel-spring-integration,Major,Christian M?ller,2013/01/04 12:51:39 +0100,2013/01/04 12:51:39 +0100,Christian M?ller,2013/01/04 15:07:11 +0100,0.09412037,0.09412037,SpringIntegrationConsumer should honor the 'inOut' instance variable by setting the MEP and sending back message headers,See http://camel.465427.n5.nabble.com/how-to-obtain-camel-smpp-submit-message-id-td5723868.html for details,2.9.5; 2.10.3,2.9.6; 2.10.4; 2.11.0,0,1,7,1,0,0,1,1,0,0,0,0,1,14,components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationBinding.java;components/camel-spring-integration/src/main/java/org/apache/camel/component/spring/integration/SpringIntegrationConsumer.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/MyProcessor.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationOneWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationProducerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/SpringIntegrationTwoWayConsumerTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/CamelSourceAdapterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/CamelTargetAdapterTest.java;components/camel-spring-integration/src/test/java/org/apache/camel/component/spring/integration/adapter/ConfigurationTest.java;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/adapter/CamelTarget.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/oneWayConsumer.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/producer.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/springChannelConverter.xml;components/camel-spring-integration/src/test/resources/org/apache/camel/component/spring/integration/twoWayConsumer.xml;,0,0
5928,Bug,Resolved,Fixed,,Trivial,Caspar MacRae,2013/01/04 18:50:58 +0100,2013/01/05 08:44:42 +0100,Claus Ibsen,2013/01/05 08:44:56 +0100,0.579143519,0.000162,SJMS component's pom.xml missing taskmanager package in camel.osgi.private.pkg,Hi I know it's not out in the wild yet but with this tiny patch SJMS is usable in my spike project.Sadly doesn't affect the number of passing/failing tests.The pom's &lt;camel.osgi.private.pkg&gt; section is missing an entry for the org.apache.camel.component.sjms.taskmanager package.thanks Caspar,2.11.0,2.11.0,0,2,39,1,1,1,1,0,0,0,0,0,1,1,components/camel-sjms/pom.xml;,0,0
5950,Bug,Resolved,Fixed,camel-cache,Major,Alexandre Gattiker,2013/01/10 16:13:47 +0100,2013/01/11 04:30:06 +0100,Willem Jiang,2013/01/11 08:13:31 +0100,0.666481481,0.155150463,Cache producer is not thread safe,from('direct:causeFailure') .split().body().parallelProcessing() .setHeader(CacheConstants.CACHE_OPERATION  constant(CacheConstants.CACHE_OPERATION_DELETEALL)) .to('cache://MyTestCache');  String[] body = new String[] { 'a'  'b' }; template.sendBody(body); net.sf.ehcache.ObjectExistsException: Cache MyTestCache already exists at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294) at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184) at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137) at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:56) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:709) at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:80) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:290) at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:275) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722),2.10.3,2.9.6; 2.10.4; 2.11.0,0,2,122,1,2,2,0,0,0,0,0,0,2,4,components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheRegistryRefTest.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheConsumer.java;components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java;components/camel-cache/src/test/java/org/apache/camel/component/cache/CacheRegistryRefTest.java;,0,0
5959,Improvement,Resolved,Fixed,camel-core; eip,Minor,Claus Ibsen,2013/01/12 12:33:59 +0100,2013/01/12 12:33:59 +0100,Claus Ibsen,2013/01/12 13:20:23 +0100,0.032222222,0.032222222,Dead Letter Channel - Store failed route id on Exchange,Seehttp://camel.465427.n5.nabble.com/Retrieve-failed-Route-from-deadLetterChannel-tp5725420.htmlWe should store the route id where we failed  this allows end users to get that as a detail if they route to another route as part of DLC. You can get the current route  but if you let DLC be a route  then its that route you get  and not the route that failed.So we need to store this as part of the RedeliveryErrorHandler logic inside camel-core.We do have failed endpoint store already. eg if it failed sending a message to an endpoint. But we lack the route id.,2.10.0,2.10.4; 2.11.0,0,1,93,1,1,1,0,0,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/Exchange.java;camel-core/src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java;camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelFailureRouteIdTest.java;camel-core/src/test/java/org/apache/camel/processor/DefaultErrorHandlerFailureRouteIdTest.java;camel-core/src/test/java/org/apache/camel/processor/OnExceptionFailureRouteIdTest.java;,0,0
5968,Bug,Resolved,Fixed,camel-core; camel-jms; karaf,Major,Krishnan,2013/01/14 10:55:59 +0100,2013/01/23 08:40:20 +0100,Christian Schneider,2013/02/27 15:06:55 +0100,44.17425926,35.26846065,ClassNotFoundException: weblogic.jndi.WLInitialContextFactory when starting the route via Karaf start-route(camel:route-start) command.,We have a simple camel route definied in Java DSL:from('wmq:queue:ESB_TEST_IN').routeId('IN').autoStartup(true).log('${body}');This route receives JMS messages from a WebLogicJMS queue with name ESB_TEST_IN and logs the body to the log file.The route works fine when autoStartup is set to true. But when autoStartup is set to false then the creation of the WebLogic InitialContext failed because of an ClassNotFoundException regarding weblogic.jndi.WLInitialContextFactory and the following message is written to the karaf log file:2012-12-07 12:03:21 502 WARN : DefaultJmsMessageListenerContainer | Setup of JMS message listener invoker failed for destination 'ESB_TEST_IN' - trying to recover. Cause: Destination &#91;ESB_TEST_IN&#93; not found in JNDI; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory &#91;Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory&#93; [org.springframework.jms.listener.DefaultMessageListenerContainer | mer&#91;ESB_TEST_IN&#93; | org.springframework.jms.3.0.7.RELEASE(id=135)]This issue's related to https://jira.talendforge.org/browse/TESB-7884,2.9.2,2.9.6; 2.10.5; 2.11.0,0,2,124,1,14,2,0,0,0,0,0,0,2,6,platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/AbstractRouteCommand.java;platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/RouteResume.java;platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/RouteStart.java;platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/RouteStop.java;platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/RouteSuspend.java;platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/AbstractRouteCommand.java;,0,0
5969,Improvement,Resolved,Fixed,osgi,Major,Aaron Whiteside,2013/01/14 19:21:17 +0100,2013/01/15 06:27:42 +0100,Willem Jiang,2013/03/13 08:22:37 +0100,57.54259259,57.07980324,OsgiServiceRegistry to lookup services with filter on name=blah,OsgiServiceRegistry to lookup services with filter on name=blahWhen using the # bean resolver prefix in plain OSGi (not blueprint) the only way to lookup a service is by specifying the full registered class/interface name of that service.The OsgiServiceRegistry should also try and lookup a service like the OsgiComponentResolver does using a filter on a service property. I suggest that the filter be on a property called 'name'.This means the method public &lt;T&gt; T lookup(String name  Class&lt;T&gt; type) should try to lookup the service with the class from the type parameter and filter on '(name=' + name ')'...,2.10.3,2.11.0,0,2,97,1,1,1,0,0,0,0,0,0,2,5,components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java;components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/CamelMockBundleContext.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java;components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/CamelMockBundleContext.java;components/camel-core-osgi/src/test/java/org/apache/camel/core/osgi/ServiceRegistryTest.java;,0,0
5987,Bug,Resolved,Fixed,camel-core; eip,Minor,Claus Ibsen,2013/01/21 09:09:45 +0100,2013/01/21 09:09:45 +0100,Claus Ibsen,2013/01/21 11:00:11 +0100,0.076689815,0.076689815,Using annotations DSL in beans may cause async callback to be called twice,The bean processor and bean invocation logic may in cases when the EIP annotations is used on beans  cause the callback to be called twice.Noticed this problem during investigation of See CAMEL-5905,2.9.0; 2.10.0,2.9.6; 2.10.4; 2.11.0,0,1,38,1,0,0,0,1,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInvocation.java;components/camel-spring/src/test/java/org/apache/camel/component/bean/BeanWithRecipientListTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/bind/BeanInfoTest.java;,0,0
5994,Bug,Resolved,Fixed,camel-quartz,Critical,Alexis Kinsella,2013/01/22 15:17:37 +0100,2013/01/25 08:28:32 +0100,Claus Ibsen,2013/01/25 09:43:16 +0100,2.7678125,0.051898148,CamelJob implementation rely on some inconsistent endpoints LRU cache - Camel endpoints may not be called on quartz fire after some days of uptime,CamelJobs rely on some endpoints LRU cache from camel context. If i'm not wrong  since LRU Cache relies on SoftReferences  Garbage Collector can decide to evict some entries and especially QuartzEndpoints.It happens that sometimes endpoints evicted from LRU Caches are QuartzEndpoints. Since QuartzEnpoints are searched from CamelJob in LRU cache  they are not reachable anymore.The side effect  is that CamelJob isntance initializes a new QuartzEndpoint  but loadbalancer is not initialized since it is initialized from QuartzConsumer.The result is that quartz triggers jobs that instanciate Quartz endpoints with unintialized load balancers which are unable to call processor from the routes associated.I have joined a fix that rely on the search of QuartzEndpoints from initalized routes of Camel context.Fundamentally  the search of endpoints should not rely on endpoints LRU cache. It is a broken design.Hope it helps.By the way  there are other issues related to QuartzEndpoint load balancer initalization: If quartz starts before startup of Camel routes you will have the same issue: Correctly initialized QuartzEndpoints are not in LRU cache since Camel has not started routes (and so endpoints and consumers). Quartz will trigger job  and camel job will search for QuartzEndpoint and put it in LRUCache with uninitialized load balancer.,2.9.5; 2.10.3,2.9.6; 2.10.4; 2.11.0,1,3,200,1,3,2,0,1,0,0,1,0,1,2,components/camel-quartz/src/main/java/org/apache/camel/component/quartz/CamelJob.java;components/camel-quartz/src/test/java/org/apache/camel/component/quartz/QuartzCronRouteWithSmallCacheTest.java;,0,0
5999,Bug,Resolved,Fixed,camel-restlet,Major,Amit Patel,2013/01/22 21:11:03 +0100,2013/01/26 12:29:04 +0100,Claus Ibsen,2013/01/26 12:47:14 +0100,3.650127315,0.012615741,RestletComponent component is not removing added route from routers list although route is removed from Context.,In RestletComponent class add entry to instance variable 'private final Map&lt;String  MethodBasedRouter&gt; routers = new HashMap&lt;String  MethodBasedRouter&gt;()' map while invoking getMethodRouter method  but it never remove in disconnect method  also disconnect method has local variable with same name as instance variable 'routes'.Camel Development Forums=========================http://camel.465427.n5.nabble.com/Camel-Restlet-2-10-3-RestletComponent-component-does-not-remove-added-route-form-routers-although-ro-td5726000.html,2.10.3,2.10.4; 2.11.0,0,3,47,1,5,2,0,0,0,0,0,0,1,2,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/MethodBasedRouter.java;components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java;,0,0
6019,Improvement,Resolved,Fixed,camel-crypto,Minor,Daniel Gredler,2013/01/29 16:52:15 +0100,2013/01/29 20:19:38 +0100,Claus Ibsen,2013/01/31 15:20:37 +0100,1.936365741,1.792349537,Add PGP signature and signature verification support to PGPDataFormat,PGPDataFormat currently supports PGP encryption (equivalent to 'gpg -e') and decryption (equivalent to 'gpg -d')  but does not support simultaneously encrypting and signing (equivalent to 'gpg -e -s') or simultaneously decrypting and verifying (equivalent to 'gpg -v -d').This patch adds three new optional attributes to the PGPDataFormat class (signatureKeyUserid  signatureKeyFileName  signaturePassword)  which can be used to sign while encrypting  or to verify a signature while decrypting.,2.11.0,2.11.0,0,3,66,1,14,3,0,0,0,1,0,0,2,8,components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormat.java;components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/AbstractPGPDataFormatTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatDynamicTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatElGamalTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/SpringPGPDataFormatTest.java;components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java;,0,0
6033,Bug,Resolved,Fixed,camel-core,Minor,Christian M?ller,2013/02/02 18:28:41 +0100,2013/02/04 09:24:54 +0100,Claus Ibsen,2013/02/04 17:39:32 +0100,1.965868056,0.34349537,NoRedeliveryOnShutdown doesn't work for DeadLetterChannel,See http://camel.465427.n5.nabble.com/Wrong-test-for-allowRedeliveryWhileStopping-possible-bug-td5726184.html for details.The assumption is if we use 'allowRedeliveryWhileStopping(false)' in an error handler definition which use a dead letter channel  the message should be send to the configured dead letter channel if we are in a delivery by stopping Camel (instead of dropping the message).,2.11.0,2.11.0,0,2,49,1,6,2,0,0,0,0,0,0,1,1,camel-core/src/test/java/org/apache/camel/processor/RedeliveryDeadLetterErrorHandlerNoRedeliveryOnShutdownTest.java;,0,0
6039,Improvement,Resolved,Fixed,camel-bindy,Major,Rich Newcomb,2013/02/06 08:06:05 +0100,,Unassigned,2013/02/28 06:56:59 +0100,21.95201389,,camel-bindy fixed length record improvements,The attached patch provides the following improvements for the camel-bindy fixed length record data format: full support for fixed-length header and footer records allows delimited (variable length) fields to be defined within 'fixed-length' records enables the length of a data field to be defined dynamically by another field in the same record fixed-length records can be defined using ordinal / relative pos valuesNew annotation properties:------------------@DataField + lengthPos (int) &#8211; Optionally identifies a data field in the record that defines the fixed length for this field + delimiter (String) &#8211; Optional delimiter to be used if this field has a variable length@FixedLengthRecord + hasHeader (boolean) &#8211; Indicates that the record(s) of this type may be preceded by a single header record at the beginning of the file / stream + hasFooter (boolean) &#8211; Indicates that the record(s) of this type may be followed by a single footer record at the end of the file / stream + skipHeader (boolean) &#8211; Configures the data format to skip marshalling / unmarshalling of the header record + skipFooter (boolean) &#8211; Configures the data format to skip marshalling / unmarshalling of the footer record + isHeader (boolean) &#8211; Identifies this FixedLengthRecord as a header record + isFooter (boolean) &#8211; Identifies this FixedLengthRecord as a footer record,2.11.0,2.11.0,0,2,212,0,15,2,0,0,0,0,0,0,3,21,components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/dynamic/BindyFixedLengthDynamicFieldTest.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/delimited/BindyFixedLengthDelimitedFieldTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/dynamic/BindyFixedLengthDynamicFieldTest.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyFixedLengthFactory.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/FixedLengthRecord.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java;components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/util/AnnotationModelLoader.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/delimited/BindyFixedLengthDelimitedFieldTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/dynamic/BindyFixedLengthDynamicFieldTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/headerfooter/BindySimpleFixedLengthHeaderFooterTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/headerfooter/Order.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/headerfooter/OrderFooter.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/headerfooter/OrderHeader.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/ordinal/BindySimpleFixedLengthOrdinalPosTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/skipheader/BindyFixedLengthHeaderFooterSkipHeaderTest.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/skipheader/Order.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/skipheader/OrderFooter.java;components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/skipheader/OrderHeader.java;,0,0
6043,Improvement,Resolved,Fixed,camel-core,Major,Christian M?ller,2013/02/06 22:53:19 +0100,2013/02/07 02:57:00 +0100,Willem Jiang,2013/02/28 06:30:55 +0100,21.31777778,21.14855324,Improve the BeanInfo performance,See http://camel.465427.n5.nabble.com/BeanInfo-performance-issues-td5726912.html for details.,2.10.3,2.11.0,1,6,7,1,4,2,0,0,0,0,1,0,2,6,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/CamelSimpleExpressionPerfTestRunner.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanComponent.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfoCacheKey.java;camel-core/src/test/java/org/apache/camel/component/bean/CamelSimpleExpressionPerfTestRunner.java;,0,0
6045,Bug,Resolved,Fixed,camel-mail,Major,Christoph Giera,2013/02/07 15:00:50 +0100,2013/02/07 15:43:48 +0100,Claus Ibsen,2013/02/07 15:53:33 +0100,0.036608796,0.006770833,Camel Email Component Missing Attachments,see http://camel.465427.n5.nabble.com/Camel-Email-Component-Missing-Attachments-td3386382.html#a5727102The disposition field is optional(see RFC 2183)  so it is possible that camel misses attachments. if (disposition != null &amp;&amp; (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE))) { // only add named attachments String fileName = part.getFileName(); if (fileName != null) { LOG.debug('Mail contains file attachment: ' + fileName); // Parts marked with a disposition of Part.ATTACHMENT are clearly attachments CollectionHelper.appendValue(map  fileName  part.getDataHandler()); } }Adding the fileName check to the if should resolve the issue.,2.6.0,2.9.6; 2.10.4; 2.11.0,0,4,81,1,9,4,0,0,0,0,0,0,1,1,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;,0,0
6057,Improvement,Resolved,Fixed,camel-spring,Minor,Vitalii Tymchyshyn,2013/02/08 21:51:18 +0100,2013/02/10 16:31:11 +0100,Claus Ibsen,2013/02/10 17:52:32 +0100,1.834189815,0.056493056,Camel Spring registry does not look into parent contexts,trunk components/camel-spring/src/main/java/org/apache/camel/spring/spi/ApplicationContextRegistry.javahas next method: @Override public &lt;T&gt; Map&lt;String  T&gt; findByTypeWithName(Class&lt;T&gt; type) { return applicationContext.getBeansOfType(type); }but this method does not look into application context parent contexts.org.springframework.beans.factory.BeanFactoryUtils#beansOfTypeIncludingAncestors should be used instead.,2.10.3,2.11.0,0,4,29,1,6,4,0,0,0,0,0,0,1,4,components/camel-spring/src/main/java/org/apache/camel/spring/spi/ApplicationContextRegistry.java;components/camel-spring/src/test/java/org/apache/camel/spring/spi/ParentContextRegistryTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/spi/parentContextRegistryTestChild.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/spi/parentContextRegistryTestParent.xml;,0,0
6059,Bug,Resolved,Fixed,karaf,Minor,Claus Ibsen,2013/02/09 15:24:25 +0100,2013/02/09 15:32:27 +0100,Claus Ibsen,2013/02/09 15:32:27 +0100,0.005578704,0,camel-rss and camel-atom - Not installable in Karaf,karaf@root&gt; features:install camel-rssError executing command: Manifest not present in the first entry of the zip mvn:org.apache.ws.commons.axiom/axiom-impl/1.2.14I think we got a JAR that is flawed 1.2.14,2.11.0,2.9.6; 2.10.4; 2.11.0,0,1,25,1,1,1,0,0,0,0,0,1,1,1,parent/pom.xml;,0,0
6063,Improvement,Resolved,Fixed,camel-mail,Minor,Thomas Vautrin,2013/02/11 11:59:45 +0100,2013/02/12 10:15:04 +0100,Claus Ibsen,2013/02/12 10:22:48 +0100,0.932673611,0.00537037,Check if body is a MimeMessage and send it directly without create a MimeMessage from body and headers,In a route with a component which create a MimeMessage and set it in body  the mail producer ignores the type of body and create his own MimeMessage from body content and headers.The patch add the control of type and disable the override of MailProducer with his own message.The MimeMessage contained in body is sent directly.Patch contains test and fix,2.10.3,2.11.0,0,2,60,1,1,1,0,0,0,0,0,0,1,2,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailProducer.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailProducerTest.java;,0,0
6068,Bug,Resolved,Fixed,camel-blueprint,Major,Akitoshi Yoshida,2013/02/11 21:53:33 +0100,2013/02/12 09:52:35 +0100,Claus Ibsen,2013/02/12 10:04:12 +0100,0.507395833,0.00806713,CamelBlueprintContext may be wrongly started and this may lead to a deadlock,We observed a deadlock situation that seems to be caused by the change that came in with CAMEL-5712  which changed the way how CamelBlueprintContext is started to solve another issue.The current code listens to the service registered event for org.osgi....BlueprintContainer (supposedly for its associated BP container) and decides to start itself if not started. From the description of the ticket  this change was intended to make sure the starting of the context occurs after its BP container is registered. In that case  should it be checking whether the received event belongs to the same bundle? This checking is missing in the current code and consequently  it may wrongly react to the event from another bundle's container registration event. When this happens under some specific timing situation  it may also lead to a deadlock.So  should we be checking the event source in CamelBlueprintContext's serviceChanged method?Regards  akiStack trace from 2.10.3========================================================================Name: Blueprint Extender: 3State: BLOCKED on java.lang.Object@9064b42 owned by: Blueprint Extender: 2Total blocked: 13 Total waited: 38Stack trace: org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:709)org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:68)org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:39)org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:314) locked java.util.HashMap@1660de94org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:456)org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186)org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851)org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722)org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789)org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575)org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) locked org.apache.camel.blueprint.BlueprintCamelContext@5011bafaorg.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:127)org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:96)org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214)org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433)org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:410)org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:346)org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) locked java.util.concurrent.atomic.AtomicBoolean@3cb3ada locked java.util.concurrent.atomic.AtomicBoolean@31b4d206java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)java.util.concurrent.FutureTask.run(FutureTask.java:138)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)java.lang.Thread.run(Thread.java:722)========================================================================Name: Blueprint Extender: 2State: BLOCKED onorg.apache.camel.blueprint.BlueprintCamelContext@5011bafa owned by: Blueprint Extender: 3Total blocked: 24 Total waited: 58Stack trace: org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:1053)org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:64)org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:36)org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:461)org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:46)sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)java.lang.reflect.Method.invoke(Method.java:597)org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:234)org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:706)org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64) locked java.lang.Object@9064b42org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219) locked java.lang.Object@9064b42org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:631)org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) locked java.util.concurrent.atomic.AtomicBoolean@53b00227 locked java.util.concurrent.atomic.AtomicBoolean@5648a168java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)java.util.concurrent.FutureTask.run(FutureTask.java:138)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)java.lang.Thread.run(Thread.java:722),2.10.3,2.9.6; 2.10.4; 2.11.0,0,2,225,1,1,1,0,0,0,0,1,1,1,1,components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java;,0,0
6084,Bug,Resolved,Fixed,camel-cxf,Major,Charles Moulliard,2013/02/16 09:54:32 +0100,2013/02/16 09:54:32 +0100,Willem Jiang,2013/02/28 06:32:17 +0100,11.85954861,11.85954861,SOAP over JMS does not work with camel-cxf endpoint,If we would like to use SOAP over JMS using CXF &amp; Camel (2.10) that fails.The CXF endpoint receives well the incoming request from the JMS queue[aultMessageListenerContainer-1] HelloWorldServicePortType INFO Inbound Message----------------------------ID: 1Content-Type: text/xmlHeaders: {JMSMessageType=[text]}Payload: &lt;soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:hel='http://helloworld.mycompany.redhat.com'&gt; &lt;soapenv:Header/&gt; &lt;soapenv:Body&gt; &lt;hel:sayHello&gt; &lt;hel:name&gt;fred&lt;/hel:name&gt; &lt;/hel:sayHello&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;--------------------------------------[aultMessageListenerContainer-1] route1 INFO SOAP Request received message[aultMessageListenerContainer-1] route1 INFO Mock service repliedbut the response is not returned by CXF neither published in a (reply) queue.Here is the Camel Route @Override public void configure() throws Exception {from('cxf:bean:endpoint.service.worklist?dataFormat=MESSAGE') .convertBodyTo(String.class) .log('SOAP Request received message').setHeader('JMSReplyTo').constant('supervisorworklist.response') .transform().constant(response) // RESPONSE = SOAP MESSAGE .log('Mock service replied'); }&amp; Config&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;beans xmlns='http://www.springframework.org/schema/beans' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:camel='http://camel.apache.org/schema/spring' xmlns:osgi='http://www.springframework.org/schema/osgi' xmlns:cxf='http://camel.apache.org/schema/cxf' xmlns:jms='http://cxf.apache.org/transports/jms' xsi:schemaLocation=' http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.10.0-spring.xsd http://cxf.apache.org/transports/jms http://cxf.apache.org/schemas/configuration/jms.xsd'&gt; &lt;bean id='jms.connectionFactory' class='org.apache.activemq.ActiveMQConnectionFactory'&gt; &lt;!-- &lt;property name='brokerURL' value='vm://myEmbeddedBroker?broker.persistent=false' /&gt;--&gt; &lt;property name='brokerURL' value='tcp://localhost:61616'/&gt; &lt;/bean&gt; &lt;bean id='jms.config.service' class='org.apache.cxf.transport.jms.JMSConfiguration'&gt; &lt;property name='connectionFactory' ref='jms.connectionFactory' /&gt; &lt;property name='targetDestination' value='supervisorworklist' /&gt; &lt;property name='replyDestination' value='supervisorworklist.response'/&gt; &lt;/bean&gt; &lt;bean id='logginOutInterceptor' class='org.apache.cxf.interceptor.LoggingOutInterceptor'/&gt; &lt;bean id='logginInInterceptor' class='org.apache.cxf.interceptor.LoggingInInterceptor'/&gt; &lt;!-- Producer Endpoint --&gt; &lt;cxf:cxfEndpoint id='endpoint.service.worklist' address='jms://'serviceClass='com.redhat.mycompany.helloworld.HelloWorldService' serviceName='s:HelloWorldService' endpointName='s:HelloWorldOverJms' xmlns:s='http://helloworld.atos.redhat.com'&gt; &lt;cxf:features&gt; &lt;bean xmlns='http://www.springframework.org/schema/beans'class='org.apache.cxf.transport.jms.JMSConfigFeature'&gt; &lt;property name='jmsConfig' ref='jms.config.service' /&gt; &lt;/bean&gt; &lt;/cxf:features&gt; &lt;cxf:inInterceptors&gt; &lt;ref bean='logginInInterceptor'/&gt; &lt;/cxf:inInterceptors&gt; &lt;cxf:outInterceptors&gt; &lt;ref bean='logginOutInterceptor'/&gt; &lt;/cxf:outInterceptors&gt; &lt;/cxf:cxfEndpoint&gt; &lt;camelContext xmlns='http://camel.apache.org/schema/spring'&gt; &lt;package&gt;com.redhat.mycompany.cxf&lt;/package&gt; &lt;/camelContext&gt;&lt;/beans&gt;,2.10.0,2.9.6; 2.10.4; 2.11.0,0,2,269,1,5,2,0,0,0,0,0,0,1,4,components/camel-cxf/pom.xml;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jms/CxfEndpointJMSConsumerTest.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jms/camel-context.xml;,0,0
6089,Bug,Resolved,Fixed,camel-cxf,Major,Akitoshi Yoshida,2013/02/20 09:29:09 +0100,2013/02/21 03:49:42 +0100,Willem Jiang,2013/02/28 06:35:01 +0100,7.879074074,7.114803241,CXFEndpoint blueprint config having binding element may lead to NPE,There seems to be an error in the EndpointpointDefinitionParser in parsing the binding element. Concretely speaking  that element is not parsed from the right element but wrongly from its parent element.So  when you have something like &lt;camel-cxf:cxfEndpoint id='routerEndpoint' ...&gt; ... &lt;camel-cxf:binding&gt; &lt;soap:soapBinding mtomEnabled='true' version='1.2'/&gt; &lt;/camel-cxf:binding&gt; &lt;/camel-cxf:cxfEndpoint&gt;you may get an NPE  as shown in:java.lang.NullPointerException: null at org.apache.aries.blueprint.container.RecipeBuilder.getValue(RecipeBuilder.java:335) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.RecipeBuilder.createBeanRecipe(RecipeBuilder.java:258) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.RecipeBuilder.createRecipe(RecipeBuilder.java:106) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.RecipeBuilder.createRepository(RecipeBuilder.java:89) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.BlueprintContainerImpl.getRepository(BlueprintContainerImpl.java:438) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:288) ~&#91;na:na&#93; at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) ~[na:naFixing this line in EndpointDefinitionParser will fix this issue.,2.10.3,2.9.6; 2.10.5; 2.11.0,0,2,89,1,7,2,0,0,0,1,0,0,1,5,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsClientDefinitionParser.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsServerDefinitionParser.java;tests/camel-blueprint-cxf-test/src/test/java/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Test.java;tests/camel-blueprint-cxf-test/src/test/resources/org/apache/camel/test/cxf/blueprint/CxfConsumerSoap12Beans.xml;,0,0
6091,Improvement,Resolved,Fixed,camel-sql,Minor,Chris Miles,2013/02/20 16:21:17 +0100,2013/08/20 16:16:46 +0100,Claus Ibsen,2013/08/20 16:19:27 +0100,180.9987269,0.001863426,Improvement to SqlProducer class,I have came across a bug with the Microsoft SQL Server driver (4.0) in where the folowing line is problematic:int expected = ps.getParameterMetaData().getParameterCount();If I run the following query through the component:INSERT INTO &#91;NEW_TABLE&#93; SELECT * FROM &#91;OLD_TABLE&#93; WHERE ID = #expected is set to 0 which results in my value not being set.Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: The value is not set for the parameter number 1.While this is a SQL Server issue  unfortunately the source is not available and an update is not likely any time soon to return the correct meta data. It would be handy if this Producer put the query preperation a little more into the hands of the user. I.e. let me say there are 5 parameters to be prepared along with the 5 values to use.If the user has manually put 5 items in a Map in the body  then can we not just use the map length to identify how many values and then iterate them.,2.10.3,2.11.2; 2.12.0,0,3,163,1,4,2,0,0,0,0,0,0,1,3,components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlEndpoint.java;components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlProducer.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlProducerParametersCountTest.java;,0,0
6097,Bug,Resolved,Fixed,camel-core,Major,Benjamin Truitt,2013/02/22 23:28:00 +0100,2013/03/01 10:15:52 +0100,Claus Ibsen,2013/03/01 10:49:20 +0100,6.473148148,0.023240741,Race condition in AggregatorProcessor recovery sometimes causes duplicates,There seems to be a race condition in org.apache.camel.processor.aggregate.AggregateProcessor's RecoverTask. That task calls recoverable.scan() to find Exchanges that may need to be recovered. Since scan() might return Exchanges that are actually just in progress  the RecoverTask then checks to see if the Exchange really is in progress. It does this by calling inProgressCompleteExchanges.contains(exchangeId). However  that collection may have been modified during the time between when scan() returned and when contains() is called. This would happen if the in-progress Exchange completes before contains() is called. In that situation  inProgress would evaluate to false  so the Exchange would be recovered. This results in a duplicate Exchange being output by the Aggregator component. One possible solution might be to prevent updating the inProgressCompleteExchanges during the critical section. Another possible solution might be to copy inProgressCompleteExchanges before calling scan(). I'm sure that there are other ways to deal with this also.,2.9.2,2.9.6; 2.10.5; 2.11.0,11,4,147,1,1,1,0,0,0,0,1,0,1,1,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;,0,0
6109,Bug,Resolved,Fixed,camel-core,Major,Matt Pavlovich,2013/02/27 23:23:10 +0100,2013/02/28 06:23:21 +0100,Claus Ibsen,2013/02/28 08:04:14 +0100,0.361851852,0.07005787,step in a  block runs when the  tag is closed in the wrong place,Example route:&lt;doTry&gt; &lt;to ... &gt;&lt;/doTry&gt;&lt;doCatch&gt; &lt;exception&gt;java.lang.Exception&lt;/exception&gt; &lt;to uri='log.... '/&gt;&lt;/doCatch&gt;The &lt;to uri='log...'/&gt; line will execute every time  regardless if there is an exception or not.I believe the preferred behavior would be that the route should fails to load/validate. Alternatively  the &lt;to uri='log..' /&gt; should not run when there is not an exception.Thanks!,2.10.3,2.11.0,0,2,51,1,3,2,0,0,0,0,0,0,1,6,camel-core/src/main/java/org/apache/camel/model/CatchDefinition.java;camel-core/src/main/java/org/apache/camel/model/FinallyDefinition.java;camel-core/src/main/java/org/apache/camel/model/TryDefinition.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringTryCatchMisconfiguredTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringTryCatchMisconfiguredFinallyTest.xml;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringTryCatchMisconfiguredTest.xml;,0,0
6123,Bug,Resolved,Fixed,camel-jms,Critical,Ra?l Kripalani,2013/03/04 13:41:33 +0100,2013/03/04 13:41:33 +0100,Ra?l Kripalani,2013/03/22 01:32:57 +0100,17.49402778,17.49402778,camel-jms: InOut exchange can time out even if response was received,When performing an InOut JMS exchange with a certain requestTimeout  if the reply message is received in time  but the following formula stands true: T0 + T1 &gt;= T!  where:T0 = JMS response timeT1 = remaining route processing time following the replyT! = requestTimeoutThen camel-jms will throw an ExchangeTimedOutException regardless of the fact that the reply was truly received in time.I'm surprised this bug has gone unnoticed until now  as it's been present since mid-2010.Example unit test: @Test public void testTimeoutNotTriggered() throws Exception { getMockEndpoint('mock:exception').expectedMessageCount(0); template.requestBody('activemq:test'  '&lt;hello /&gt;'); assertMockEndpointsSatisfied(); } @Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { @Override public void configure() throws Exception { onException(ExchangeTimedOutException.class) .handled(true) .to('mock:exception'); from('activemq:test') .inOut('activemq:test?requestTimeout=500') .delay(constant(1000)); from('activemq:test') .log('test'); } }; },2.9.5; 2.10.3,2.9.6; 2.10.5; 2.11.0,0,2,143,1,3,2,0,1,0,0,0,0,1,3,components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/QueueReplyManager.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsChainedEndpointDelayTimeout.java;,0,0
6129,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/03/05 18:09:58 +0100,2013/03/05 18:09:58 +0100,Claus Ibsen,2013/03/12 21:51:50 +0100,7.154074074,7.154074074,Simple language - bean function - issue when parameter value has comma,See nabblehttp://camel.465427.n5.nabble.com/Prolems-with-parametrized-bean-method-call-via-simple-tp5728319.html,2.9.2; 2.10.3,2.10.5; 2.11.0,0,1,5,1,0,0,0,1,0,0,0,0,1,10,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/LiteralExpression.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/LiteralNode.java;camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionStart.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/main/java/org/apache/camel/util/StringQuoteHelper.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanMethodValueWithCommaTest.java;camel-core/src/test/java/org/apache/camel/component/bean/SimpleLanguageBeanFunctionMethodValueWithCommaTest.java;camel-core/src/test/java/org/apache/camel/util/StingQuoteHelperTest.java;,0,0
6154,Bug,Resolved,Fixed,camel-mail; camel-quartz,Major,Sven Smets,2013/03/11 10:34:08 +0100,2013/03/20 18:31:49 +0100,Claus Ibsen,2013/03/21 14:37:59 +0100,10.16934028,0.837615741,NPE when using the imap mail component with quartz or the timer and pollEnrich,There is a NPE when using the imap mail component with quartz or the timer and pollEnrich as dicussed here:http://camel.465427.n5.nabble.com/Schedule-file-mail-endpoint-td3356666.html#a3357538I reproduced it on version 2.10.3 and 2.10.4 with &lt;route id='myTest'&gt; &lt;from uri='timer://foo?fixedRate=true&amp;period=10000'/&gt; &lt;pollEnrich uri='imap://userName@hostName?password=***'/&gt;  &lt;to uri='log:testroute?showAll=true&amp;level=INFO'/&gt; &lt;/route&gt;We need to use it with the quartz component (so we can use a cron expression)  but get the same error &lt;route id='myTest'&gt; &lt;from uri='quartz://testTimer?cron=0+?'/&gt; &lt;pollEnrich uri='imap://userName@hostName?password=***'/&gt;  &lt;to uri='log:testroute?showAll=true&amp;level=INFO'/&gt; &lt;/route&gt;11/03/2013 10:32:04 &#91;DefaultQuartzScheduler-context_Worker-1&#93; ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID-W7-009430-52415-1362994261595-0-3 on ExchangeId: ID-W7-009430-52415-1362994261595-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: &#91;Body is null&#93;]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange&#91;MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4&#93;. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: &#91;Body is null&#93;]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange&#91;MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4&#93;. Message: com.sun.mail.imap.IMAPMessage@411a3fe4] at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:194)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:71)&#91;camel-core-2.10.4.jar:2.10.4&#93; at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:113)&#91;camel-quartz-2.10.4.jar:2.10.4&#93; at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:61)&#91;camel-quartz-2.10.4.jar:2.10.4&#93; at org.quartz.core.JobRunShell.run(JobRunShell.java:216)&#91;quartz-1.8.5.jar:&#93; at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)&#91;quartz-1.8.5.jar:&#93;,2.10.3; 2.10.4,2.10.5; 2.11.0,0,2,255,1,7,2,1,1,0,0,0,0,2,4,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailBinding.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichNoMailTest.java;components/camel-mail/src/test/java/org/apache/camel/component/mail/MailPollEnrichTest.java;camel-core/src/test/java/org/apache/camel/processor/enricher/PollEnrichNullBodyTest.java;,0,0
6155,Bug,Resolved,Fixed,camel-stream,Major,Willem Jiang,2013/03/12 08:57:19 +0100,2013/03/12 08:57:19 +0100,Willem Jiang,2013/03/13 08:26:02 +0100,0.978275463,0.978275463,Camel stream producer never close the stream of file,When I was working on CAMEL-6147  I found the file stream is never closed  even it met the close condition.,2.9.6; 2.10.4,2.9.7; 2.10.5; 2.11.0,0,1,41,1,1,1,1,1,0,0,1,0,1,3,components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamEndpoint.java;components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamProducer.java;components/camel-stream/src/test/java/org/apache/camel/component/stream/SplitStreamFileTest.java;,0,0
6168,Bug,Resolved,Fixed,camel-sql,Minor,Jonas F?gedi,2013/03/16 10:01:31 +0100,2013/03/21 10:17:05 +0100,Claus Ibsen,2013/03/21 10:17:05 +0100,5.010810185,0,SQL component will not look for parameters in header when no body in message,Line 60 in SqlProducer checks if the body is null. This will cause any parameters in header fields not to be populated into the prepared statement. Sample scenario is with a camel-jetty enriching a response using camel-sql.,2.11.0,2.11.0,0,2,38,1,5,2,1,0,0,0,0,0,1,3,components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlProducer.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlProducerNullBodyHeaderTest.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlProducerNullBodyTest.java;,0,0
6172,Bug,Resolved,Fixed,camel-core; eip,Minor,Claus Ibsen,2013/03/17 10:19:11 +0100,2013/03/17 11:20:22 +0100,Claus Ibsen,2013/03/17 11:20:22 +0100,0.042488426,0,Aggregate EIP - Completion from batch consumer should trigger first,See nabblehttp://camel.465427.n5.nabble.com/Issue-Aggregator2-BatchCompletion-disturbed-by-other-completions-and-fails-to-happen-when-it-probabl-tp5728850.html,2.10.0,2.10.5; 2.11.0,0,1,5,1,0,0,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java;camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateCompletionSizeAndBatchConsumerTest.java;,0,0
6173,Bug,Resolved,Fixed,camel-http; camel-jetty,Major,Claus Ibsen,2013/03/18 16:31:57 +0100,2013/03/18 16:31:57 +0100,Claus Ibsen,2013/03/18 16:49:19 +0100,0.012060185,0.012060185,camel-http - When bridging endpoints then there may be double parameter values if client sends uri parameters,If you have a jetty/http bridge endpoint  and the caller sends in a parameter with a value that has url encodings  then you may have double values when calling the bridge.eg callinghttp://localhost:23001/jettyTestRouteA?param1=%2B447777111222And having a jetty -&gt; http bridge  you can end up with double values.Caused by: java.lang.AssertionError: expected:&lt; 447777111222&gt; but was:&lt;[+447777111222  +447777111222]&gt;,2.10.4,2.10.5; 2.11.0,0,1,67,1,0,0,1,0,0,0,0,0,1,3,components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java;components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpProducer.java;,0,0
6176,Improvement,Resolved,Fixed,camel-core,Major,Daniel Goering,2013/03/18 19:15:46 +0100,2013/03/24 12:32:03 +0100,Claus Ibsen,2013/03/26 09:19:41 +0100,7.586053241,1.866412037,Camel 2.10.1 incapable of working with + in endpoint URIs,In the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.At first the java.net.Uri#getQuery will be called with according to the javadoc 'Returns the decoded query component of this URI' returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc 'Returns the decoded scheme-specific part of this URI.' returns a decoded URI.So to summarize we get in any case a decoded URI.As workaround for CAMEL-4954 all % are encoded  i.e. replaced by %25.The URI will then be decoded again in the method org.apache.camel.util.URISupport#parseQuery(String) with java.net.URLDecoder#decode(String String).This code leads to the following behaviour: If a + is properly encoded with foo%2Bbar the foo%2Bbar will be substituted by the first call with foo+bar and then decoded again which leads to foo bar. If the + is not encoded at all foo+bar will be decoded to foo bar in the first step and not be changed again in the second step. If the + is double encoded to foo%252Bbar the first call will transform it to foo%2Bbar  then the workaround for CAMEL-4954 will change it back to foo%252Bbar and the final decode will change it again to foo%2Bbar.Thus  currently there is no way to use a + in passwords or similar parameter values if the parameter has to be supplied via endpoint URIs.,2.10.1,2.11.0,0,2,250,1,7,2,1,0,0,1,0,0,1,6,camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java;camel-core/src/main/java/org/apache/camel/util/URISupport.java;camel-core/src/test/java/org/apache/camel/issues/EndpointWithRawUriParameterTest.java;camel-core/src/test/java/org/apache/camel/util/URISupportTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpProducerRawPasswordTest.java;components/camel-ftp/src/test/resources/users.properties;,0,0
6177,Improvement,Closed,Fixed,camel-aws,Minor,Christian M?ller,2013/03/18 22:50:17 +0100,2013/03/18 22:50:17 +0100,Christian M?ller,2013/03/18 23:36:10 +0100,0.031863426,0.031863426,Camel-AWS should support any implementation of AmazonXXX (not only AmazonXXXClient),See http://camel.465427.n5.nabble.com/camel-pull-request-making-change-so-that-we-can-use-camel-aws-integration-td5729038.html,2.9.6; 2.10.4,2.9.7; 2.10.5; 2.11.0,0,1,5,1,0,0,1,1,0,0,0,0,1,12,components/camel-aws/src/main/java/org/apache/camel/component/aws/cw/CwConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/cw/CwEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Configuration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Consumer.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Endpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sdb/SdbEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java;,0,0
6187,Bug,Resolved,Fixed,camel-http,Minor,Fried Hoeben,2013/03/20 13:01:34 +0100,2013/08/26 18:37:49 +0100,Claus Ibsen,2013/08/26 18:40:23 +0100,159.2352894,0.001782407,http4 component should default to charset based on content type,HttpProducer determines the charset of an outgoing StringEntity based on an Exchange property (Exchange.CHARSET_NAME)  using null if that property is not set. It also sets the content-type based on the content-type of the camel message (this may also contain a character encoding). If these two don't match the receiver of the http request will probably not be able to parse the message. It would be better if the charset of the StringEntity would by default match the charset specified in the content-type. Matching these two is done when receiving response messages (in HttpProducer.extractResponseBody())...Suggested fix (in HttpProducer.createRequestEntity())  you could of course also do something like org.apache.camel.component.http4.helper.HttpHelper.setCharsetFromContentType() but my approach uses org.apache.http.entity.ContentType and java.nio.charset.Charset instead of trying to determine the correct charset itself):// be a bit careful with String as any type can most likely be converted to String// so we only do an instanceof check and accept String if the body is really a String// do not fallback to use the default charset as it can influence the request// (for example application/x-www-form-urlencoded forms being sent)String charset = IOHelper.getCharsetName(exchange  false);if (charset == null &amp;&amp; contentType != null){ ContentType ct = ContentType.parse(contentType); if (ct != null) { Charset cs = ct.getCharset(); if (cs != null) { charset = cs.name(); } }}StringEntity entity = new StringEntity((String) data  charset);entity.setContentType(contentType);answer = entity;,2.10.4,2.11.2; 2.12.0,0,2,248,1,1,1,1,0,0,0,0,0,1,1,components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java;,0,0
6218,Bug,Resolved,Fixed,,Major,Alan Foster,2013/03/27 13:07:21 +0100,2013/04/02 17:45:24 +0100,Ra?l Kripalani,2013/04/03 01:38:22 +0100,6.521539352,0.328449074,TransferExchage InOut ActiveMQ Exception,The scnearios are : when using the transferExchange option only on the producer  I don't get the body back  but not the header. When I use the transferExchange option on both producer and consumer  I get the headers back  but not the body. And instead I get the following exception[ryQueueReplyManager[temporary]] TemporaryQueueReplyManager WARN Execution of JMS message listener failed. Caused by: [java.lang.NullPointerException - null]java.lang.NullPointerException at org.apache.camel.impl.DefaultExchangeHolder.unmarshal(DefaultExchangeHolder.java:107) at org.apache.camel.component.jms.JmsBinding.extractBodyFromJms(JmsBinding.java:128) at org.apache.camel.component.jms.JmsMessage.createBody(JmsMessage.java:214) at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41) at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:136) at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onReply(TemporaryQueueReplyHandler.java:54) at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.handleReplyMessage(TemporaryQueueReplyManager.java:71) at org.apache.camel.component.jms.reply.ReplyManagerSupport.onMessage(ReplyManagerSupport.java:113) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.lang.Thread.run(Thread.java:662),2.10.4,2.10.5; 2.11.0,0,4,109,2,22,4,0,0,0,1,0,0,2,5,camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java;components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/ReplyManagerSupport.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsInOutTransferExchangeTest.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/SerializableRequestDto.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/SerializableResponseDto.java;,0,0
6227,Improvement,Resolved,Fixed,camel-gson,Major,Claus Ibsen,2013/03/31 07:54:18 +0100,2013/03/31 11:29:51 +0100,Claus Ibsen,2013/03/31 11:29:51 +0100,0.1496875,0,json data format - Add support for configuring gson options,Seehttp://stackoverflow.com/questions/15686032/apache-camel-gson-formatterWe should make it possible to configure those gson options in the DSL.,2.10.0,2.11.0,0,1,16,1,1,1,0,0,0,0,0,0,1,5,components/camel-gson/src/main/java/org/apache/camel/component/gson/GsonDataFormat.java;components/camel-gson/src/test/java/org/apache/camel/component/gson/GsonFieldNamePolicyTest.java;components/camel-gson/src/test/java/org/apache/camel/component/gson/PersonPojo.java;components/camel-gson/src/test/java/org/apache/camel/component/gson/SpringGsonFieldNamePolicyTest.java;components/camel-gson/src/test/resources/org/apache/camel/component/gson/SpringGsonFieldNamePolicyTest.xml;,0,0
6234,Bug,Closed,Fixed,camel-bindy,Major,Hadrian Zbarcea,2013/04/02 21:07:41 +0100,2013/04/02 21:07:41 +0100,Hadrian Zbarcea,2013/05/11 16:50:36 +0100,38.82146991,38.82146991,camel-bindy - Multiple models in the same package lead to unpredictable results,BindyCsvDataFormat only holds one model. When multiple models are defined in the same package or field positions overlap  only one @DataField is kept (the last one) overwriting the previous mapping. This leads to unpredictable behavior  from the wrong field value being populated  to format mismatch exceptions for fields of different types.This behavior is by design  as camel supports deep models  spread over multiple files (see AnnotationModelLoader.loadModels() implementation where whole packages are scanned).The documentation is rather vague  but I believe supporting multiple models in the same package is not really feasible  and overkill at best. Therefore my preference would be to keep the functionality as is and document the limitation.Currently the BindyCVSFieldEndingWithSeparatorIssueTest fails due to a conflict between MyCsvRecord.class and BindyDoubleQuotesCsvUnmarshallTest.Order.class defined in the same package. Moving MyCsvRecord to a different package is a trivial fix. I will look into adding some model validation as well to WARN if the model is inconsistent (i.e. has overlaps or gaps).,2.9.6; 2.10.4,2.11.0,0,3,157,1,3,2,0,1,0,0,0,0,0,0,,0,0
6240,Improvement,Resolved,Fixed,camel-http,Minor,Jason Chaffee,2013/04/05 06:25:06 +0100,2013/09/30 22:17:04 +0100,Christian M?ller,2013/10/01 18:59:51 +0100,179.5241319,0.863043981,Http4 component does not support PATCH,If I try to use PATCH  it gives me an error about it not being in an enum. However  the HttpClient does support it.http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/methods/HttpPatch.html,2.10.4,2.11.3; 2.12.2; 2.13.0,0,4,27,2,5,4,0,0,0,0,0,0,1,3,components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpMethods.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/BaseHttpTest.java;components/camel-http4/src/test/java/org/apache/camel/component/http4/HttpMethodsTest.java;,0,0
6244,Bug,Resolved,Fixed,tooling,Major,Claus Ibsen,2013/04/06 06:57:09 +0100,2013/04/06 06:57:09 +0100,Claus Ibsen,2013/04/06 07:43:56 +0100,0.032488426,0.032488426,camel:run in blueprint is broken,Due the Aries blueprint upgrade then the blueprint extenders may run 2+ due classpath issues.,2.11.0,2.11.0,0,1,15,1,1,1,0,0,0,0,0,1,1,2,components/camel-blueprint/pom.xml;tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/RunMojo.java;,0,0
6252,Bug,Resolved,Fixed,camel-aws; tests,Minor,Claus Ibsen,2013/04/08 16:42:09 +0100,2013/06/27 22:44:39 +0100,Christian M?ller,2013/06/27 22:55:49 +0100,80.25949074,0.00775463,camel-aws - Possible concurrent modification exception,Noticed this from CI test serversStacktracejava.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:819) at java.util.ArrayList$Itr.next(ArrayList.java:791) at org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest.longReceiveExtendsMessageVisibility(SqsExtendMessageVisibilityTest.java:61) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47) at org.junit.rules.RunRules.evaluate(RunRules.java:18) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103) at com.sun.proxy.$Proxy0.invoke(Unknown Source) at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150) at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)Standard Output@SLTests run: 1  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 2.032 sec@SLRunning org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest,2.10.4; 2.11.0,2.10.6; 2.11.1; 2.12.0,0,1,104,2,0,0,0,0,0,0,0,0,1,2,components/camel-aws/src/test/java/org/apache/camel/component/aws/s3/AmazonS3ClientMock.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/AmazonSQSClientMock.java;,0,0
6258,Improvement,Resolved,Fixed,camel-sql,Minor,Claus Ibsen,2013/04/10 09:25:12 +0100,2013/08/26 18:14:10 +0100,Claus Ibsen,2013/08/26 18:31:16 +0100,138.379213,0.011875,Sql component - Add noop option to execute the query but dont change the message body afterwards,Seehttp://blog.mgm-tp.com/2013/04/camel-router-part1/comment-page-1/#comment-4161Even if the query returns a result set  you may not want to grab that or change the message body.For that we can have a noop=true|false option. If there is a better name for the option then we can go for that  though noop was the first name that came to my mind.,2.10.0,2.12.0,0,3,56,1,9,3,0,0,0,0,0,0,1,3,components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlEndpoint.java;components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlProducer.java;components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlProducerNoopTest.java;,0,0
6259,Bug,Closed,Fixed,camel-core; jmx,Major,Claus Ibsen,2013/04/10 10:15:02 +0100,2013/04/10 10:15:02 +0100,Claus Ibsen,2013/04/10 22:20:35 +0100,0.503854167,0.503854167,Scheduled thread pools is not removed from JMX when shutting down,For example if a route use the aggragate eip with a completion timeout  then the scheduled thread pool is enlisted in JMX. But not removed when the route is removed. Though as fail-safe we always remove the JMX when camel is stopping.But for people doing dynamic add/remove routes this can become a problem.,2.10.4,2.10.5; 2.11.0,0,2,53,1,3,2,0,0,0,0,1,0,1,3,camel-core/src/main/java/org/apache/camel/impl/DefaultExecutorServiceManager.java;camel-core/src/test/java/org/apache/camel/impl/MultipleLifecycleStrategyTest.java;camel-core/src/test/java/org/apache/camel/management/ManagedRemoveRouteAggregateThreadPoolTest.java;,0,0
6261,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2013/04/10 13:04:18 +0100,2013/04/10 13:04:18 +0100,Claus Ibsen,2013/04/17 20:56:17 +0100,7.327766204,7.327766204,Simple ognl expression - Possible NPE when using String replaceFirst and replacing with an empty string,See nabblehttp://camel.465427.n5.nabble.com/2-11-NPE-with-replaceFirst-tp5730321.html,2.11.0,2.11.0,0,1,5,1,1,1,0,0,0,0,0,1,1,2,components/camel-jclouds/pom.xml;parent/pom.xml;,0,0
6262,Bug,Closed,Fixed,camel-core,Trivial,Manfred Dohmen,2013/04/11 17:21:18 +0100,2013/04/12 05:09:08 +0100,Willem Jiang,2013/04/17 20:40:55 +0100,6.138622685,5.647071759,org.apache.camel.support.ServiceSupport: InputStream not being explicitly closed,In method getVersion() of ServiceSupport there is an InputStream opened around line 284:InputStream is = getClass().getResourceAsStream('/META-INF/maven/org.apache.camel/camel-core/pom.properties');This stream is not closed explicitly.If you undeploy an application from a container like GlassFish you get a warning like this:[#|2013-04-11T18:02:00.783+0200|WARNING|glassfish3.1.2|javax.enterprise.system.core.classloading.com.sun.enterprise.loader|_ThreadID=137;_ThreadName=Thread-2;|Input stream has been finalized or forced closed without being explicitly closed; stream instantiation reported in following stack tracejava.lang.Throwable at com.sun.enterprise.loader.ASURLClassLoader$SentinelInputStream.&lt;init&gt;(ASURLClassLoader.java:1230) at com.sun.enterprise.loader.ASURLClassLoader$InternalJarURLConnection.getInputStream(ASURLClassLoader.java:1338) at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:233) at com.sun.enterprise.loader.ASURLClassLoader.getResourceAsStream(ASURLClassLoader.java:872) at java.lang.Class.getResourceAsStream(Class.java:2049) at org.apache.camel.support.ServiceSupport.getVersion(ServiceSupport.java:284) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1439) at org.apache.camel.cdi.CdiCamelContext.start(CdiCamelContext.java:61) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#91;...&#93;These were similar issues: XBEAN-190  JCR-2962,2.11.0,2.9.7; 2.10.5; 2.11.0,0,4,97,1,4,4,0,0,0,0,0,0,3,3,camel-core/src/main/java/org/apache/camel/support/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/support/ServiceSupport.java;camel-core/src/main/java/org/apache/camel/support/ServiceSupport.java;,0,0
6267,Bug,Closed,Fixed,,Major,Willem Jiang,2013/04/12 16:44:00 +0100,2013/04/12 16:44:00 +0100,Willem Jiang,2013/04/17 21:00:41 +0100,5.178252315,5.178252315,camel-cxfrs blueprint configure could not be installed if there are some subelement settings,Got the OOM Exception when blueprint want to parser the setting like this.&lt;camelcxf:rsClient id='rsClient' address='http://localhost:9002/rest' serviceClass='org.apache.camel.itest.osgi.cxf.jaxrs.testbean.CustomerService'&gt; &lt;camelcxf:features&gt; &lt;bean class='org.apache.cxf.feature.LoggingFeature'/&gt; &lt;/camelcxf:features&gt; &lt;/camelcxf:rsClient&gt;,2.9.6; 2.10.4; 2.11.0,2.9.7; 2.11.0,0,2,34,1,1,1,0,1,0,0,0,0,1,3,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsClientDefinitionParser.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/blueprint/RsServerDefinitionParser.java;tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/cxf/blueprint/CxfRsBlueprintRouter.xml;,0,0
6268,Improvement,Closed,Fixed,camel-stream,Minor,Claus Ibsen,2013/04/13 09:01:02 +0100,2013/04/13 09:01:02 +0100,Claus Ibsen,2013/04/13 09:25:12 +0100,0.016782407,0.016782407,camel-stream - Shutdown thread pool on consumer should happen faster,Should be faster to shutdown this pool as you may see WARN logs on stopping Camel[ Thread-1] DefaultShutdownStrategy INFO Starting to graceful shutdown 1 routes (timeout 300 seconds)el-1) thread #2 - ShutdownTask DefaultExecutorServiceManager INFO Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b&#91;Shutting down  pool size = 1  active threads = 1  queued tasks = 0  completed tasks = 0&#93;&#91;stream://in?promptMessage=Enter+something%3A+&#93; to terminate...el-1) thread #2 - ShutdownTask DefaultExecutorServiceManager INFO Waited 4.002 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b&#91;Shutting down  pool size = 1  active threads = 1  queued tasks = 0  completed tasks = 0&#93;&#91;stream://in?promptMessage=Enter+something%3A+&#93; to terminate...,2.11.0,2.11.0,0,1,100,1,1,1,0,0,0,0,0,0,1,1,components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamConsumer.java;,0,0
6271,Bug,Closed,Fixed,camel-core,Minor,Claus Ibsen,2013/04/14 09:43:25 +0100,2013/04/14 09:43:25 +0100,Claus Ibsen,2013/04/17 20:45:08 +0100,3.459525463,3.459525463,StringQuoteHelper - Should ignore whitespace between quoted parameters,Need to merge to 2.11 branch when created.,2.11.0,2.11.0,0,1,8,1,0,0,0,0,0,0,0,0,3,5,camel-core/src/test/java/org/apache/camel/util/StingQuoteHelperTest.java;camel-core/src/main/java/org/apache/camel/util/StringQuoteHelper.java;camel-core/src/test/java/org/apache/camel/util/StingQuoteHelperTest.java;camel-core/src/main/java/org/apache/camel/util/StringQuoteHelper.java;camel-core/src/test/java/org/apache/camel/util/StingQuoteHelperTest.java;,0,0
6272,Improvement,Closed,Fixed,camel-core,Minor,Claus Ibsen,2013/04/14 10:21:45 +0100,2013/04/14 10:25:03 +0100,Claus Ibsen,2013/04/17 20:45:50 +0100,3.433391204,3.431099537,Bean - Improve choose method logic for no parameter methods,We should optimize the logic and if a method name with no parameters has been defined  eg.to('bean:myBean?method=foo()')Or in ognl's such as.when().simple('${body.foo()} != null').to('direct:foo')Then we should optimize the logic to filter out methods with methods  as foo has been declare with no methods explicit by ().,2.10.0; 2.11.0,2.10.5; 2.11.0,0,1,63,1,0,0,0,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;,0,0
6274,Bug,Closed,Fixed,examples,Major,Christian M?ller,2013/04/14 11:43:04 +0100,2013/04/15 03:34:53 +0100,Willem Jiang,2013/04/17 20:36:12 +0100,3.370231481,2.709247685,camel-example-reportincident failed,2013-04-14 12:40:23 207 [main ] ERROR ContextLoader - Context initialization failedorg.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) ... 48 moreCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) ... 57 moreCaused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526) at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536) at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430) at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249) at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258) at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487) ... 65 more2013-04-14 12:40:23.217:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/ file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/} file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by:org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&amp;serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&amp;serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&amp;wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)Caused by:java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526) at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536) at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430) at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249) at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258) at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62) at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828) at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480) at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95) at org.eclipse.jetty.server.Server.doStart(Server.java:275) at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364) at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)2013-04-14 12:40:23.241:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:9080,2.11.0,2.11.0,0,2,1090,1,2,2,0,0,0,0,0,0,1,1,examples/camel-example-reportincident/src/main/resources/camel-config.xml;,0,0
6281,Bug,Closed,Fixed,examples,Major,Christian M?ller,2013/04/14 19:03:54 +0100,2013/04/15 03:22:23 +0100,Willem Jiang,2013/04/17 20:33:28 +0100,3.062199074,2.716030093,camel-example-cxf-tomcat failed,By accessing 'http://localhost:8080/camel-example-cxf-tomcat/webservices/incident?wsdl' I get the following exception:Apr 14  2013 7:56:37 PM org.apache.catalina.core.StandardWrapperValve invokeSEVERE: Allocate exception for servlet CXFServletorg.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'cxf' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:549) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:277) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109) at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:77) at org.apache.cxf.transport.servlet.CXFNonSpringServlet.init(CXFNonSpringServlet.java:71) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1280) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1193) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:865) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) at java.lang.Thread.run(Thread.java:680),2.11.0,2.11.0,0,2,79,1,3,2,0,0,0,0,0,1,1,1,examples/camel-example-cxf-tomcat/src/main/resources/camel-config.xml;,0,0
6283,Bug,Closed,Fixed,camel-sql,Major,Claus Ibsen,2013/04/15 13:49:30 +0100,2013/04/15 13:49:30 +0100,Claus Ibsen,2013/04/17 20:38:44 +0100,2.284189815,2.284189815,Restarting routes using sql aggregation repository may lead to Class loading issues,Its the code in ClassLoadingAwareObjectInputStream in camel-sql that has the bug.,2.9.0; 2.10.4; 2.11.0,2.9.7; 2.10.5; 2.11.0,0,1,11,1,0,0,0,1,0,0,0,0,1,1,components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/ClassLoadingAwareObjectInputStream.java;,0,0
6286,Improvement,Resolved,Fixed,camel-aws,Minor,alex hutter,2013/04/16 10:26:35 +0100,2013/04/16 12:33:52 +0100,Claus Ibsen,2013/04/16 12:33:52 +0100,0.088391204,0,Make SqsConsumer support async processors,Switch SqsConsumer from using getProcessor().process() to getAsyncProcessor().process() with a callback to allow use of async processors.As I understand it is ok to always use the async processor call as its to show that 'the caller supports having the exchange asynchronously processed' rather than specifically always process it asynchronously.,2.10.4,2.11.0,0,2,48,1,2,2,0,0,0,0,0,0,1,2,components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Consumer.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java;,0,0
6292,Improvement,Resolved,Fixed,tooling,Minor,Claus Ibsen,2013/04/17 08:56:49 +0100,2013/07/17 10:09:15 +0100,Claus Ibsen,2013/07/17 10:33:49 +0100,91.06736111,0.017060185,Camel archetype component - Use bundle packaging so component is ready to install in OSGi,The component archetypes should have the pom.xml changed so they generate a project that use bundle packaging with the felix bundle plugin.Then the component is ready to install in OSGi.See nabblehttp://camel.465427.n5.nabble.com/Creating-new-processor-components-td5730919.html,2.10.4; 2.11.0,2.12.0,0,1,34,1,1,1,0,0,0,0,0,0,1,4,tooling/archetypes/camel-archetype-component/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-component/src/main/resources/archetype-resources/pom.xml;tooling/archetypes/camel-archetype-dataformat/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml;tooling/archetypes/camel-archetype-dataformat/src/main/resources/archetype-resources/pom.xml;,0,0
6300,Bug,Resolved,Fixed,tests,Major,Petr Juza,2013/04/21 20:50:30 +0100,2013/04/22 13:44:20 +0100,Claus Ibsen,2013/04/22 16:10:50 +0100,0.805787037,0.101736111,AdviceWith doesn't work with doTry,I have the following route definition: from('direct:billing_' + operation) .routeId(getRouteId(operation)) .errorHandler(noErrorHandler()) // propagate exceptions to the parent route .validate(body().isInstanceOf( com.cleverlance.cleverbss.integration.modules.in.customer.model.Customer.class)) .beanRef(BILLING_CUSTOMER_ROUTE_BEAN  'createRequestFor' + WordUtils.capitalize(operation)) // SetCustomer -&gt; XML .marshal(jaxbIn) .doTry() .to(uri + '?messageSender=#billingSender').id('toURI') .doCatch(AlreadyExistsException.class) .setProperty(exPropertyName  property(Exchange.EXCEPTION_CAUGHT)) .end() .choice() .when(property(exPropertyName).isNull()) // XML -&gt; SetCustomerResponse .unmarshal(jaxbOut) .endChoice();And I would like to replace TO in the tests: getCamelContext().getRouteDefinition(BillingCustomerRoutes.ROUTE_ID_UPDATE_CUSTOMER) .adviceWith(getCamelContext()  new AdviceWithRouteBuilder() { @Override public void configure() throws Exception { weaveByType(ToDefinition.class).replace().process(new Processor() { @Override public void process(Exchange exchange) throws Exception { throw new AlreadyExistsException('msg'  new AlreadyExists()); } }); } });When I use weaveById('toURI') or weaveByToString()  it doesn't work neither.,2.10.4,2.10.5; 2.11.1; 2.12.0,0,2,126,1,3,2,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java;camel-core/src/main/java/org/apache/camel/model/TryDefinition.java;camel-core/src/test/java/org/apache/camel/processor/interceptor/AdviceWithTryCatchTest.java;,0,0
6302,Bug,Resolved,Fixed,camel-mina; camel-mina2,Major,Thomas Termin,2013/04/22 20:06:52 +0100,2013/04/26 09:47:15 +0100,Claus Ibsen,2013/04/26 10:01:19 +0100,3.579479167,0.009768519,Mina UDP default codec should keep the data as byte[],The MinaUdpProtocolCodecFactory on the consumer side decodes data from an udp datagram to a byte[]. byte[] bytes = context.getTypeConverter().convertTo(byte[].class  in);On the provider side where it gets back to the wire it gets converted to a string: String value = context.getTypeConverter().convertTo(String.class  message);and then set to the ByteBuffer with the given charset.The result is that the original datagram is not valid anymore. The default codec should the data convert to a byte array or keep the data as byte array.,2.10.4,2.10.5; 2.11.1; 2.12.0,0,2,79,1,4,2,0,0,0,0,0,0,1,7,components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaComponent.java;components/camel-mina/src/main/java/org/apache/camel/component/mina/MinaUdpProtocolCodecFactory.java;components/camel-mina/src/test/java/org/apache/camel/component/mina/MinaUdpUsingTemplateTest.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java;components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2UdpProtocolCodecFactory.java;components/camel-mina2/src/test/java/org/apache/camel/component/mina2/Mina2UdpUsingTemplateTest.java;,0,0
6305,Bug,Resolved,Fixed,camel-core; camel-test,Major,Torsten Mielke,2013/04/23 08:55:28 +0100,2013/04/23 09:29:45 +0100,Willem Jiang,2013/04/27 10:53:21 +0100,4.081863426,4.058055556,debugBefore() and debugAfter() not called if unit test extends CamelBlueprintTestSupport,A test that extends CamelBlueprintTestSupport does not get its debugBefore() and debugAfter() methods called.,2.11.0,2.10.5; 2.11.1; 2.12.0,0,2,14,1,4,2,0,0,0,0,0,0,1,2,components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/DebugBlueprintTest.java;components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java;,0,0
6313,Bug,Resolved,Fixed,camel-spring,Minor,Daniel Gredler,2013/04/25 00:12:15 +0100,2013/04/25 08:58:08 +0100,Claus Ibsen,2013/04/25 09:58:48 +0100,0.407326389,0.04212963,Property placeholder optimization broke placeholders in Spring camelContext configuration,We are upgrading from 2.10.0 to 2.11.0  and are getting an error on startup.Example Spring configuration:&lt;camelContext id='camel' handleFault='true' autoStartup='{{autoStartup}}' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;contextScan /&gt; &lt;jmxAgent id='camelAgent' createConnector='true' registryPort='{{jmxPort}}' /&gt;&lt;/camelContext&gt;&lt;bean id='properties' class='org.apache.camel.component.properties.PropertiesComponent'&gt; &lt;property name='location' value='classpath:foo.properties'/&gt;&lt;/bean&gt;As you can see  we use the Camel properties component to configure Camel auto-startup  JMX port  etc.This is the error we're getting on startup:org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/component/properties/SpringPropertiesComponentTest.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:83) at org.apache.camel.component.properties.SpringPropertiesComponentTest.createApplicationContext(SpringPropertiesComponentTest.java:30) at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:52) at junit.framework.TestCase.runBare(TestCase.java:139) at org.apache.camel.TestSupport.runBare(TestSupport.java:58) at junit.framework.TestResult$1.protect(TestResult.java:122) at junit.framework.TestResult.runProtected(TestResult.java:142) at junit.framework.TestResult.run(TestResult.java:125) at junit.framework.TestCase.run(TestCase.java:129) at junit.framework.TestSuite.runTest(TestSuite.java:255) at junit.framework.TestSuite.run(TestSuite.java:250) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109) at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:69) at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:85) at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 27 moreCaused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1063) at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:337) at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:543) at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:266) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452) ... 40 moreI believe this is a side-effect of the optimization introduced in CAMEL-5508  which was incorporated into 2.10.1 and 2.11.0.I'll attach a small patch that modifies one of the unit tests in the camel-spring component to reproduce the issue.,2.10.1; 2.11.0,2.10.5; 2.11.1; 2.12.0,0,2,334,1,1,1,1,1,0,0,0,1,1,3,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;components/camel-spring/src/test/resources/org/apache/camel/component/properties/SpringPropertiesComponentTest.xml;components/camel-spring/src/test/resources/org/apache/camel/component/properties/cheese.properties;,0,0
6317,Bug,Closed,Fixed,camel-validator,Major,David J. M. Karlsen,2013/04/25 10:21:15 +0100,2013/06/20 21:06:00 +0100,Christian M?ller,2013/06/21 17:23:40 +0100,57.29334491,0.845601852,Camel-validator not able to resolve schema when using useSharedSchema=false,This one works: &lt;to uri='validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd' /&gt;This one doesn't: &lt;to uri='validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd?useSharedSchema=false' /&gt;it fails with:org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'null'  because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.The streamsource object in the validator is populated  but the buffered inputstream object has no content,2.11.0,2.10.5; 2.11.1; 2.12.0,0,3,77,2,8,3,1,0,0,0,0,0,3,5,camel-core/src/main/java/org/apache/camel/component/validator/ValidatorComponent.java;camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java;camel-core/src/test/java/org/apache/camel/component/validator/ValidatorRouteTest.java;camel-core/src/main/java/org/apache/camel/component/validator/ValidatorComponent.java;components/camel-spring/src/test/resources/org/apache/camel/component/validator/camelContext.xml;,0,0
6321,Improvement,Resolved,Fixed,camel-core,Minor,Luc Leclerc,2013/04/26 20:58:18 +0100,2014/03/02 12:38:36 +0100,Claus Ibsen,2014/03/03 12:01:11 +0100,310.6270023,0.974016204,Moving logic out of getTypeConverter,TypeConverter is never added as a service if we use the method setTypeConverter(). Used through camel-guice you had expect this service to be active without additional instruction.See : http://camel.465427.n5.nabble.com/Ambiguity-in-DefaultCamelContext-with-TypeConverter-td5731480.html,2.10.3; 2.10.4; 2.11.0,2.13.0,0,3,32,1,4,3,0,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java;,0,0
6330,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2013/05/01 07:07:52 +0100,2013/05/01 07:07:52 +0100,Claus Ibsen,2013/05/01 07:10:31 +0100,0.001840278,0.001840278,Control Bus - Add suspend and resume actions,We have start and stop actions. But we need suspend and resume as well.,2.11.0,2.11.1; 2.12.0,0,1,14,1,0,0,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/controlbus/ControlBusProducer.java;camel-core/src/test/java/org/apache/camel/component/controlbus/ControlBusStartRouteTest.java;,0,0
6331,Improvement,Resolved,Fixed,camel-netty,Minor,Claus Ibsen,2013/05/01 10:08:11 +0100,2013/05/01 10:08:11 +0100,Claus Ibsen,2013/05/01 13:21:40 +0100,0.134363426,0.134363426,camel-netty - Loading key store and trust stores should support classpath as well,The options keyStoreFile and trustStoreFile is currently java.io.File based.We should use the resource loader API in Camel so we can load from classpath as well.,2.10.4; 2.11.0,2.11.1; 2.12.0,0,1,25,1,0,0,1,1,0,0,0,0,1,6,components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyConfiguration.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/ssl/SSLEngineFactory.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettySSLClasspathTest.java;components/camel-netty/src/test/java/org/apache/camel/component/netty/NettySSLTest.java;,0,0
6341,Bug,Resolved,Fixed,camel-core,Minor,Luc Leclerc,2013/05/07 17:09:58 +0100,2013/05/09 00:35:48 +0100,Willem Jiang,2013/05/17 14:50:41 +0100,9.903275463,8.593668981,DefaultShutdownStrategy shutdown timeout of 0 will never timeout and go in negative time,A timeout of 0 won't timeout in the instant  the time will go negative. camelcontext.stopRoute(routeId  0  TimeUnit.SECONDS  false); &#91;org.apache.camel.impl.DefaultShutdownStrategy&#93; : Waiting as there are still 3 inflight and pending exchanges to complete  timeout in -1 seconds.&#91;org.apache.camel.impl.DefaultShutdownStrategy&#93; : Waiting as there are still 3 inflight and pending exchanges to complete  timeout in -2 seconds.&#91;org.apache.camel.impl.DefaultShutdownStrategy&#93; : Waiting as there are still 3 inflight and pending exchanges to complete  timeout in -3 seconds. Found a post related to it there : http://camel.465427.n5.nabble.com/Forcefully-shutting-down-routes-td5722447.html,2.11.0,2.10.5; 2.11.1; 2.12.0,0,4,85,1,5,3,1,0,0,1,1,0,2,2,camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;camel-core/src/main/java/org/apache/camel/impl/DefaultShutdownStrategy.java;,0,0
6356,Improvement,Resolved,Fixed,,Major,Romain Manni-Bucau,2013/05/13 14:31:13 +0100,2013/05/25 09:44:26 +0100,Claus Ibsen,2013/05/25 09:44:26 +0100,11.80084491,0,link to camel registry in camel-stax is missing,link to camel registry in camel-stax is missing,2.11.0,2.11.1; 2.12.0,0,2,1,1,1,1,1,0,0,0,0,0,1,3,components/camel-stax/src/main/java/org/apache/camel/component/stax/StAXComponent.java;components/camel-stax/src/main/java/org/apache/camel/component/stax/StAXProcessor.java;components/camel-stax/src/test/java/org/apache/camel/component/stax/StAXComponentRefTest.java;,0,0
6361,Improvement,Closed,Fixed,camel-validator,Trivial,metatech,2013/05/14 14:57:51 +0100,2013/05/14 21:50:13 +0100,Christian M?ller,2013/05/14 22:43:53 +0100,0.323634259,0.037268519,Validations exception should include line/column,When a 'validator:' route step reports exceptions  they should include the line/column location.Here is a small patch that adds support for it.,2.8.5,2.10.5; 2.11.1; 2.12.0,0,2,22,2,3,2,1,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/validation/SchemaValidationException.java;camel-core/src/test/java/org/apache/camel/processor/validation/DefaultValidationErrorHandlerTest.java;,0,0
6362,Improvement,Resolved,Fixed,camel-sjms,Major,Aaron Whiteside,2013/05/15 02:14:39 +0100,2013/05/16 22:15:36 +0100,Scott England-Sullivan,2013/10/30 14:27:45 +0100,168.5090972,166.6751042,camel-sjms - Consumers should always use dedicated Sessions,If you add more then one MessageListener to a Session then that session will use a single thread to notify each MessageListener in turn. Which defeats the purpose of using multiple MessageListeners  at least in my opinion.sessionCount in SjmsEndpoint should be ignored for Consumers  each Consumer (consumerCount) should instead use a dedicated Session  like what happens when transactions are enabled.,2.11.0,2.12.3; 2.13.0,0,3,60,1,5,2,1,0,0,0,0,0,1,6,components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsConsumer.java;components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsEndpoint.java;components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java;components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOnlyProducer.java;components/camel-sjms/src/main/java/org/apache/camel/component/sjms/producer/InOutProducer.java;components/camel-sjms/src/test/java/org/apache/camel/component/sjms/consumer/InOnlyTopicDurableConsumerTest.java;,0,0
6374,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/05/17 08:49:52 +0100,2013/05/17 08:49:52 +0100,Claus Ibsen,2013/05/17 12:17:47 +0100,0.144386574,0.144386574,vm component - Stopping a route when using multipleConsumers should not stop MP if there is other routes using it,See nabblehttp://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-tp5732616.html,2.11.0,2.11.1; 2.12.0,0,1,5,1,0,0,1,0,0,0,0,0,1,4,camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;camel-core/src/test/java/org/apache/camel/component/vm/VmMultipleConsumersKeepRouteTest.java;camel-core/src/test/java/org/apache/camel/component/vm/VmMultipleConsumersRemoteRouteTest.java;,0,0
6375,Bug,Resolved,Fixed,,Major,clement tamisier,2013/05/17 09:27:38 +0100,2013/05/17 09:32:03 +0100,Willem Jiang,2013/05/17 14:14:02 +0100,0.198888889,0.195821759,Headers are not set correctly in some situation,If I define a route like this: from('&lt;MyUrl&gt;/test') .setHeader(Exchange.HTTP_RESPONSE_CODE  simple('400')); my http client get a 200 response code. If a add something else on the route like: from('&lt;MyUrl&gt;/test') .setHeader(Exchange.HTTP_RESPONSE_CODE  simple('400')) .log('400').my http client get a 400 response code as expected. forum :http://camel.465427.n5.nabble.com/route-http-code-td5732728.html,2.10.4,2.11.1; 2.12.0,2,4,45,1,5,3,1,0,0,0,0,0,2,2,components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpRouteTest.java;camel-core/src/main/java/org/apache/camel/builder/ProcessorBuilder.java;,0,0
6385,Bug,Resolved,Fixed,camel-restlet,Critical,Yuejie Chen,2013/05/21 17:15:06 +0100,2013/05/22 03:28:07 +0100,Willem Jiang,2013/05/24 14:36:45 +0100,2.890034722,2.464328704,New restlet endpoints don't work if route is created after restlet server is started.,If a route with restlet endponit is created after restlet server is started  restlet can't handle the endpoint correctly  because restlet translate all URI pattern of routes at server starting  but don't it for later attached routes. So we must translate the URI pattern before attach it to restlet after restlet server is started. See http://restlet.tigris.org/issues/show_bug.cgi?id=988.,2.11.0,,0,2,60,1,1,1,1,0,0,0,0,0,1,1,components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java;,0,0
6390,Bug,Resolved,Fixed,,Major,Vitalii Tymchyshyn,2013/05/23 13:58:20 +0100,2013/05/25 08:28:57 +0100,Claus Ibsen,2013/05/30 10:12:29 +0100,6.843159722,5.071898148,Route with suspended SedaConsumer can't be stopped correctly,Route with suspended SedaConsumer can't be stopped correctly. Here is test: @Test public void testOriginalSedaShutdownSuspended() throws Exception { SedaEndpoint endpoint = context().getEndpoint('seda:test'  SedaEndpoint.class); context().addRouteDefinition(new RouteDefinition() .id('testRoute') .from(endpoint) .to('log:body') ); Set&lt;SedaConsumer&gt; consumers = endpoint.getConsumers(); Assert.assertFalse(consumers.isEmpty()); for (SedaConsumer sedaConsumer: consumers) { sedaConsumer.suspend(); } Assert.assertTrue(context().stopRoute('testRoute'  2  TimeUnit.SECONDS  true)); },2.10.0,2.11.1; 2.12.0,0,2,62,1,4,2,1,0,0,0,0,0,2,2,camel-core/src/test/java/org/apache/camel/component/seda/SedaSuspendConsumerStopRouteTest.java;camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java;,0,0
6408,Improvement,Resolved,Fixed,camel-cxf,Trivial,Akitoshi Yoshida,2013/05/31 10:56:05 +0100,2013/07/12 10:29:40 +0100,Akitoshi Yoshida,2013/07/15 17:15:10 +0100,45.26325231,3.281597222,cxf endpoint's should log the parsing exception when failing to extract the root element name,When the content is not xml and the root element is not correctly extracted by the CxfEndpoint's root element extraction method  the original exception is not logged but a subsequent exception (not the original one) will be thrown upwards. This behavior is confusing and could potentially lead to another issue depending on what the stax parser does on its getLocalName().Currently  when r.next() throws an exception  it's ignored and the subsequent call to r.getLocalName()'s exception is thrown.So I think it's preferable to log the original exception and simply return null as in the other cases for not finding the root element.Logging the original exception will provide a more helpful information in spotting the issue  as it will show up like:com.ctc.wstx.exc.WstxUnexpectedCharException: Unexpected character 'c' (code 99) in prolog; expected '&lt;'This is an action to the point raised in http://camel.465427.n5.nabble.com/Test-route-with-CXF-endpoint-td5733266.html,2.10.4,2.10.7; 2.11.2; 2.12.0,0,1,140,2,0,0,0,0,0,0,0,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;,0,0
6413,Bug,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2013/06/02 08:27:41 +0100,2013/06/02 08:27:41 +0100,Claus Ibsen,2013/06/02 11:33:08 +0100,0.128784722,0.128784722,File consumer - Race condition for markerFile read lock strategy,See nabblehttp://camel.465427.n5.nabble.com/File-markerFile-strategy-race-condition-tp5733561.htmlWe should delete the .camelLock file last  as currently we move the processed file first. And there is a very tiny tiny window where another process could potential see the file and pickup it.,2.10.4; 2.11.0,2.11.1; 2.12.0,0,2,38,1,0,0,0,1,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileProcessStrategySupport.java;camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java;,0,0
6432,Bug,Resolved,Fixed,camel-websocket,Major,Charles Moulliard,2013/06/06 06:16:19 +0100,2013/06/06 06:16:19 +0100,Charles Moulliard,2013/06/07 14:16:51 +0100,1.333703704,1.333703704,baseResource of Jetty ServletContextHandler does not work when project deployed as a bundle,If we package a camel websocket route ('websocket://0.0.0.0:9090/newsTopic?sendToAll=true&amp;staticResources=classpath:webapp') as a bundle and set the staticResources as parameter (classpath:webapp)  then the pages cannot be accessed from the browserCode should be  if (resources[0].equals('classpath')) { URL url = this.getCamelContext().getClassResolver().loadResourceAsURL(resources[1]); context.setBaseResource(Resource.newResource(url)); } else if (resources[0].equals('file')) { context.setBaseResource(Resource.newResource(resources[1])); },2.11.0; 2.12.0,,0,1,58,1,1,1,0,0,0,0,0,0,1,1,components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java;,0,0
6447,Bug,Resolved,Fixed,camel-core,Major,Christian Tytgat,2013/06/11 08:22:47 +0100,2013/08/22 15:51:20 +0100,Claus Ibsen,2013/08/22 21:38:27 +0100,72.5525463,0.241053241,endChoice() has no effect in nested choice definition,I just upgraded from 2.10.4 to 2.11.0 and noticed that nested choice definitions started acting strangely. For example: .choice() .when(header(Exchange.EXCEPTION_CAUGHT).isNotNull()) // 1 .setBody(exceptionMessage().append(SystemUtils.LINE_SEPARATOR).append(exceptionStackTrace())) .choice() .when(header(HEADER_CONTROLLER_ID).isNotNull()) // 1a .setHeader(Exchange.FILE_NAME  simple(AUDIT_CONTROLLER_FAILED_FILENAME + '.error.log')) .to(ENDPOINT_AUDIT_DIR) .otherwise() // 1b .setHeader(Exchange.FILE_NAME  simple(AUDIT_FAILED_FILENAME + '.error.log')) .to(ENDPOINT_AUDIT_DIR) // INSERTING .end() here solves the issue .endChoice() .log(LoggingLevel.WARN  'DLQ written: ${in.header.CamelExceptionCaught}' .otherwise() // 2 .log(LoggingLevel.WARN  'DLQ written' + MESSAGE_LOG_FORMAT) .end()I have a test that is supposed to go through 1 and 1a. However it now passes through 1 and 2!It looks like the endChoice() in 1b has no effect and the otherwise() in 2 is executed instead of 1b. Inserting and end() statement as shown seems to solve the issue  but it looks suspicious.It's probably a regression introduced by the fix for CAMEL-5953  but I'm not 100% sure.,2.11.0,2.11.2; 2.12.0,2,5,158,1,3,3,0,0,0,0,0,1,1,7,camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/main/java/org/apache/camel/processor/ChoiceProcessor.java;camel-core/src/test/java/org/apache/camel/processor/NestedChoiceIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/TripleNestedChoiceIssueTest.java;camel-core/src/test/java/org/apache/camel/processor/async/AsyncNestedTripleChoiceIssueTest.java;components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringNestedChoiceIssueTest.java;components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringNestedChoiceIssueTest.xml;,0,0
6461,Bug,Resolved,Fixed,camel-quartz,Major,Claus Ibsen,2013/06/17 08:28:53 +0100,2013/07/22 16:19:14 +0100,Claus Ibsen,2013/07/22 16:32:38 +0100,35.3359375,0.009305556,camel-quartz - Stateful job - Redeploying bundle/war and having changed endpoint uri issue,Seehttp://camel.465427.n5.nabble.com/In-came-quartz-route-after-bundle-update-jobs-are-not-triggred-tp5734196.htmlIn these situations we should use job.name to name the job unique so when you change the endpoint uri and redeploy the apps/bundles  then camel-quartz can find the old job in the quartz persistent store.There may be logic needed to lookup using job.name as the unique name in these situations  and then allow endpoint uri options to change over time  such as the cron trigger etc. Which should be adjusted accordingly as well.,2.10.4,2.10.7; 2.11.2; 2.12.0,0,2,76,1,5,2,0,0,0,0,0,0,1,2,components/camel-quartz/src/main/java/org/apache/camel/component/quartz/CamelJob.java;components/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java;,0,0
6464,Bug,Closed,Fixed,camel-mail,Major,Marco Zapletal,2013/06/17 13:21:25 +0100,2013/06/20 20:05:07 +0100,Christian M?ller,2013/06/20 21:22:12 +0100,3.333877315,0.053530093,connectionTimeout property is ignored by JavaMail,JavaMail ignores the timeout values set via the connectionTimeout property. Within MailConfiguration::createJavaMailProperties the mail.&lt;protocol&gt;.timeout and mail.&lt;protocol&gt;.connectionTimeout parameters are set as long values In com.sun.mail.util.PropUtil::getInt (line 141) the property is ignored since it is a long valueChanging the type of connectionTimeout from long to int would be the cleanest solution - another suggestion would be to downcast the connectionTimeout in MailConfiguration::createJavaMailProperties,2.10.2,2.10.5; 2.11.1; 2.12.0,0,2,62,2,4,2,0,0,0,0,1,0,1,2,components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java;components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConstants.java;,0,0
6473,Bug,Resolved,Fixed,camel-sql,Major,Sergey Galkin,2013/06/21 08:00:05 +0100,,Unassigned,2013/06/23 08:39:47 +0100,2.027569444,,NULL values are not supported in named parameters,Due to the bug in the DefaultSqlPrepareStatementStrategy there no ability to use NULL values.Following query will be failed  if we try to use NULL as a parameter value:select a  b from foo where (:#param1 IS NOT NULL AND a &gt; 12 ) OR (:#param2 IS NOT NULL AND b &gt; 12)We'll get an error: Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 2  was:1at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:132) ~&#91;camel-sql-2.11.0.jar:2.11.0&#93; at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:74) ~&#91;camel-sql-2.11.0.jar:2.11.0&#93; at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:57) ~&#91;camel-sql-2.11.0.jar:2.11.0&#93; at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587) ~&#91;spring-jdbc-3.1.4.RELEASE.jar:3.1.4.RELEASE&#93;Fix is quite simple: iterator implementation (returned by DefaultSqlPrepareStatementStrategy.createPopulateIterator()) should be changed as follows: return new Iterator&lt;Object&gt;() { private NamedQueryParser parser = new NamedQueryParser(query); private String nextParam; private boolean done; @Override public boolean hasNext() { if (done) { return false; } if (nextParam == null) { nextParam = parser.next(); if (nextParam == null) { done = true; } } return nextParam != null; } @Override public Object next() { if(!hasNext()){ throw new NoSuchElementException(); } boolean contains = bodyMap != null ? bodyMap.containsKey(nextParam) : false; contains |= headerMap != null ? headerMap.containsKey(nextParam) : false; if (!contains) { throw new RuntimeExchangeException('Cannot find key [' + nextParam + '] in message body or headers to use when setting named parameter in query [' + query + ']'  exchange); } // get from body before header Object next = bodyMap != null ? bodyMap.get(nextParam) : null; if (next == null) { next = headerMap != null ? headerMap.get(nextParam) : null; } nextParam = null; return next; } @Override public void remove() { // noop } };,2.11.0,2.11.1; 2.12.0,0,3,306,0,1,1,0,0,0,0,0,0,1,1,components/camel-sql/src/main/java/org/apache/camel/component/sql/DefaultSqlPrepareStatementStrategy.java;,0,0
6481,Improvement,Resolved,Fixed,camel-core,Minor,J?r?me Decq,2013/06/24 12:43:03 +0100,2013/06/24 17:59:03 +0100,Claus Ibsen,2013/06/25 09:48:55 +0100,0.879074074,0.65962963,Can't access to length of Array (java) from simple language,Cannot evaluate length on java.lang.String[] in simpleI suspect this is because this is part of the language itself. But still  why not?repro steprun this: ?xml version='1.0' encoding='UTF-8'?&gt;&lt;routes xmlns='http://camel.apache.org/schema/spring' &gt; &lt;route&gt; &lt;from uri='timer:test?repeatCount=1'/&gt; &lt;setBody&gt; &lt;groovy&gt;[[2  'Chaine_avec_des_underscores'  12  'c']  ['d4'  'e5'  'f6']]&lt;/groovy&gt; &lt;/setBody&gt; &lt;split&gt; &lt;simple&gt;${body}&lt;/simple&gt; &lt;setHeader headerName='splittedColumn1'&gt; &lt;simple&gt;${body[1].split('_')}&lt;/simple&gt; &lt;/setHeader&gt; &lt;log message='${header.splittedColumn1.length}'/&gt; &lt;/split&gt; &lt;/route&gt;&lt;/routes&gt;errors with:org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .length on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: length on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: length not found on bean: [Ljava.lang.String;@33318365 of type: [Ljava.lang.String;. Exchange[Message: [d4  e5  f6]],2.11.0,2.11.1; 2.12.0,1,4,101,1,6,3,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;,0,0
6504,Bug,Resolved,Fixed,camel-core,Minor,Sven Bauhan,2013/07/02 09:55:58 +0100,2013/07/02 10:32:38 +0100,Willem Jiang,2013/07/03 03:22:14 +0100,0.726574074,0.701111111,org.apache.camel.main.Main#doStop() throws java.lang.IndexOutOfBoundsException,When calling a Camel application with parameter -h all parameters are printed an the program exits.But it is no clean exit; it throws an java.lang.IndexOutOfBoundsException.The reason for this is the expression in doStop():+getCamelContexts().get(0).stop();get(0) returns null  if no context is initialized yet.See camel-users mailinglist  thread 'Bug in org.apache.camel.main.Main#doStop() ?',2.10.4,2.10.7; 2.11.2; 2.12.0,0,2,50,1,1,1,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/main/Main.java;,0,0
6514,Bug,Resolved,Fixed,camel-ftp,Minor,Joerg Kessler,2013/07/05 15:10:03 +0100,2013/07/10 17:20:25 +0100,Claus Ibsen,2013/07/10 17:39:23 +0100,5.103703704,0.013171296,SFTP: NPE if no private key file is supplied,Hi a NPE is thrown if no private key file is supplied in the configuration for SFTP. The error isCaused by: java.lang.NullPointerException: while trying to get the length of an array loaded from local variable 'foo'at com.jcraft.jsch.Buffer.putString(Buffer.java:59)I have analysed the code a bit and found that the problem is causedby the class SftpOperations. The method createSession sets the userInfo for the seesion by an inline class. Here the method promptKeyboardInteractive does not work correctly if no private key file is supplied. In that case JSCH switches to user/pw authorization and this method is called. But since there is no password maintained the configation object returns NULL. The present implementation adds it to the string array causing the error in JSCH. JSCH either wants a NULL string array or an empty string array (I have tested both). So the code should look e.g. as follows: public String[] promptKeyboardInteractive(String destination  String name  String instruction  String[] prompt  boolean[] echo) { String password = configuration.getPassword(); if (password == null) { return new String[0]; } else { return new String[] { password }; } }With that change JSCH returnsCaused by: java.io.FileNotFoundException: ./data/ssh/id_rsa (No such file or directory) at java.io.FileInputStream.open(Native Method)and that is the real cause of the error Best Regards J?rg,2.10.4; 2.11.0,2.10.7; 2.11.1; 2.12.0,0,2,205,1,1,1,0,1,0,1,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;,0,0
6537,Bug,Resolved,Fixed,camel-core; eip,Minor,Claus Ibsen,2013/07/10 14:31:42 +0100,2013/07/10 14:31:42 +0100,Claus Ibsen,2013/07/10 15:10:41 +0100,0.027071759,0.027071759,Routing slip EIP - Does not send ExchangeSentEvent notifications,When using routing slip eip  then we only get the ExchangeSendingEvent  what we miss is the ExchangSentEvent.,2.10.0,2.10.7; 2.11.1; 2.12.0,0,1,17,1,0,0,0,0,0,0,0,0,2,3,camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java;camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipEventNotifierTest.java;,0,0
6551,Improvement,Resolved,Fixed,camel-ftp,Minor,Chris Wolf,2013/07/15 21:52:08 +0100,2013/07/16 02:27:41 +0100,Willem Jiang,2013/12/09 07:37:08 +0100,146.40625,146.2148958,FtpConsumer fills up log file with 'Cannot connect/login' WARN level messages,If the FTP server becomes unavailable  the container log gets flooded with WARN-level messages and gets filled with lines like:16:32:34 511 WARN &#91;org.apache.camel.component.file.remote.FtpConsumer&#93; Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.16:32:49 048 WARN &#91;org.apache.camel.component.file.remote.FtpConsumer&#93; Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.16:33:03 576 WARN &#91;org.apache.camel.component.file.remote.FtpConsumer&#93; Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.i.e. a WARN message gets added to the log every five seconds. We only need to be notified once per incidence.The issue is in org.apache.camel.component.file.remote.RemoteFileConsumer.prePollCheck().I recommend a table of latches  keyed by endpoint key. The latch is set when the initial warning is logged  then cleared upon any subsequent successful connection.,2.10.4,2.10.6; 2.11.2,0,1,113,1,0,0,1,0,0,0,0,0,1,1,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;,0,0
6563,Bug,Closed,Fixed,camel-netty,Minor,Sam Patel,2013/07/18 19:29:49 +0100,2013/07/22 10:01:53 +0100,Claus Ibsen,2013/07/22 10:13:39 +0100,3.613773148,0.008171296,camel-netty - unable to consume on UDP multicast addresses,When using a route to listen to UDP multicast address   no messages seem to get consumed. No exceptions are observed. Multicast address is defined as addresses in the range of 224.0.0.0 through 239.255.255.255 (http://en.wikipedia.org/wiki/Multicast_address)Input was simple string (e.g. 'Test String')Example Route:&lt;route&gt; &lt;from uri='netty:udp://225.1.1.1:8001?allowDefaultCodec=false&amp;sync=false&amp;broadcast=true'/&gt;&lt;/route&gt;Found an old topic in the user discussion forum that seems related. Did not find any unit tests in the Camel source code exercising this behavior. (http://camel.465427.n5.nabble.com/camel-netty-and-multicast-tt4638622.html),2.11.0,2.12.0,0,3,76,1,4,3,0,0,0,0,0,0,1,2,components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyServerBootstrapConfiguration.java;components/camel-netty/src/main/java/org/apache/camel/component/netty/SingleUDPNettyServerBootstrapFactory.java;,0,0
6571,Bug,Resolved,Fixed,camel-jsch,Minor,A. Engelmann,2013/07/24 11:43:30 +0100,,Unassigned,2013/07/27 18:17:08 +0100,3.273356481,,Wrong InputStream reference is used in method storeFile of class ScpOperations,In method storeFile(String name  Exchange exchange) of class org.apache.camel.component.jsch.ScpOperations the wrong reference of the required input stream is used (line 131). Should be write(channel  file  is  cfg); instead of write(channel  file  exchange.getIn().getMandatoryBody(InputStream.class)  cfg);,2.11.0,2.10.7; 2.11.2; 2.12.0,0,2,33,0,1,1,1,0,0,0,0,0,1,1,components/camel-jsch/src/main/java/org/apache/camel/component/jsch/ScpOperations.java;,0,0
6585,Bug,Resolved,Fixed,camel-cxf,Major,Willem Jiang,2013/07/29 07:29:50 +0100,2013/07/29 07:29:50 +0100,Willem Jiang,2013/07/29 08:26:05 +0100,0.0390625,0.0390625,camel-cxf should shutdown the bus when the endpoint is stopped.,If the bus is create by cxfEndpoint itself  cxfEndpoint should shutdown it when the endpoint is stopped.,2.10.6; 2.11.1,2.10.7; 2.11.2; 2.12.0,0,1,17,1,1,1,1,1,0,0,1,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;,0,0
6586,Bug,Resolved,Fixed,camel-core; jmx,Minor,Claus Ibsen,2013/07/29 10:09:06 +0100,2013/07/29 10:09:06 +0100,Claus Ibsen,2013/08/22 14:21:46 +0100,24.17546296,24.17546296,JMX - browsable endpoints such as seda has some attributes listed as unavaiable,See screenshotThe problem is related to extending a ManagedEndpoint then some options is shown as unavaiable in JMX consoles.,2.10.6; 2.11.1,2.10.7; 2.11.2; 2.12.0,0,2,19,1,5,2,1,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java;,0,0
6591,Improvement,Resolved,Fixed,camel-ftp,Major,Stephan Siano,2013/07/30 14:15:47 +0100,2013/08/22 11:23:34 +0100,Claus Ibsen,2013/08/22 14:01:21 +0100,22.98997685,0.109571759,SFTP endpoint fails if the server disconnected the socket,If the ssh server disconnects the socket held by an SFTP endpoint (and the disconnect option is not set to true) the next call to this endpoint will fail. A call after the failed call will reconnect (and succeed if the server is available again).The error message is as follows:SftpSimpleProduceDisconnectTestorg.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTesttestSftpSimpleProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest)org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange&#91;Message: Hello World&#93; at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1360) at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:619) at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454) at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450) at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152) at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146) at org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest.testSftpSimpleProduce(SftpSimpleProduceDisconnectTest.java:50) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: target at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:536) at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:524) at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:771) at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278) at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166) at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192) at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366) at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1) at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111) at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150) ... 31 moreCaused by: 4:  at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:332) at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:534) ... 46 moreCaused by: java.io.IOException: Pipe closed at java.io.PipedInputStream.read(Unknown Source) at java.io.PipedInputStream.read(Unknown Source) at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2665) at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2691) at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2148) at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:315) ... 47 more,2.11.1,2.11.2; 2.12.0,0,3,210,1,5,2,1,0,0,0,0,0,1,3,components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpServerTestSupport.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSimpleProduceDisconnectTest.java;,0,0
6593,Bug,Resolved,Fixed,camel-core,Minor,David Keen,2013/07/31 12:37:57 +0100,2013/08/23 08:06:46 +0100,Claus Ibsen,2013/08/23 08:52:20 +0100,22.84332176,0.031643519,Predicates from java dsl are not dumped to xml correctly,Predicates defined in the java dsl are not dumped to xml when using jmx.Eg  this java dsl route:from('seda:a').choice().when(header('test').isNotNull()).log('not null').end().to('mock:a');Will be dumped as this:&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;&lt;route group='com.example.TestRoute' id='route1' xmlns='http://camel.apache.org/schema/spring'&gt; &lt;from uri='seda:a'/&gt; &lt;choice id='choice23'&gt; &lt;when id='when24'&gt; &lt;expressionDefinition/&gt; &lt;log message='not null' id='log20'/&gt; &lt;/when&gt; &lt;/choice&gt; &lt;to uri='mock:a' id='to17'/&gt;&lt;/route&gt;The &lt;expressionDefinition&gt; element should contain the expression.This seems similar to CAMEL-4733.,2.11.1,2.11.2; 2.12.0,0,2,113,1,3,2,1,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java;camel-core/src/main/java/org/apache/camel/model/language/ExpressionDefinition.java;camel-core/src/test/java/org/apache/camel/util/DumpModelAsXmlChoiceFilterRouteTest.java;,0,0
6595,Bug,Resolved,Fixed,,Trivial,Maurizio Turatti,2013/07/31 18:00:19 +0100,2013/08/01 02:29:06 +0100,Willem Jiang,2013/08/01 05:19:19 +0100,0.471527778,0.118206019,camel-cmis component: test packages have the wrong name,Unit tests for camel-cmis are under package org.apache.camel.componenet instead of org.apache.camel.componentActions:1) Rename folder src/test/java/org/apache/camel/componenet to src/test/java/org/apache/camel/component/2) Fix the package name in each unit testAffected version: 2.12-SNAPSHOT and before,2.12.0,2.11.2; 2.12.0,0,2,28,1,2,2,1,0,0,0,0,0,1,8,components/camel-cmis/src/test/java/org/apache/camel/componenet/cmis/CMISConsumerTest.java;components/camel-cmis/src/test/java/org/apache/camel/componenet/cmis/CMISProducerTest.java;components/camel-cmis/src/test/java/org/apache/camel/componenet/cmis/CMISQueryProducerTest.java;components/camel-cmis/src/test/java/org/apache/camel/componenet/cmis/CMISTestSupport.java;components/camel-cmis/src/test/java/org/apache/camel/component/cmis/CMISConsumerTest.java;components/camel-cmis/src/test/java/org/apache/camel/component/cmis/CMISProducerTest.java;components/camel-cmis/src/test/java/org/apache/camel/component/cmis/CMISQueryProducerTest.java;components/camel-cmis/src/test/java/org/apache/camel/component/cmis/CMISTestSupport.java;,0,0
6602,Bug,Resolved,Fixed,camel-cxf,Major,Ming ZI,2013/08/02 07:58:39 +0100,2013/08/06 00:30:33 +0100,Willem Jiang,2013/08/08 03:50:54 +0100,5.827951389,2.139131944,camel-cxf ClassCastException when use cxf FailoverFeature,With PAYLOAD data format used  the first element in argument is casted to a CxfPayload instance and the argument is changed into a List&lt;DOMSource&gt; instance by the method 'setParameters' in class org.apache.camel.component.cxf.CxfEndpoint.Then FailoverFeature calls retry  the class-cast action throws a ClassCastException.btw: 'message.remove(DataFormat.class)' at the end of the method 'setParameters' dosn't work. The method 'remove' is inherited from Map  and a new message with data format PAYLOAD is created when retry.,2.9.7,2.10.7; 2.11.2; 2.12.0,0,2,70,1,5,2,1,0,0,0,0,0,1,1,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java;,0,0
6621,Improvement,Resolved,Fixed,camel-aws,Minor,Jeff Eltgroth,2013/08/08 21:56:51 +0100,2013/08/09 00:58:57 +0100,Willem Jiang,2013/08/09 02:33:30 +0100,0.192118056,0.065659722,Add ability to connect to SQS queue of different owner,Unable to connect to Amazon SQS queue owned by a different account. In B2B scenario  would like to have different accounts for owner  writer  and reader of a queue.,2.11.1,2.12.0,0,2,29,1,2,2,1,0,0,0,0,0,1,4,components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsEndpointTest.java;,0,0
6623,Improvement,Resolved,Fixed,camel-aws,Minor,Chris Geer,2013/08/09 17:57:59 +0100,2013/12/25 02:50:43 +0100,Willem Jiang,2013/12/26 02:13:30 +0100,138.3441088,0.974155093,Support attaching to SQS queues where the user doesn't have permission to list the queues (manually build URL),Currently the code assume that the user either has permission to list all the queues on their account or run a query request to get the queue url. In situations where security is more controlled you might have permission to read/write to/from a queue but not have permission to query SQS for the URL. In these cases there needs to be a way to manually build the URL from the pieces in the configuration.,2.10.6; 2.11.1; 2.12.0,2.12.3; 2.13.0,0,3,74,1,2,2,0,1,0,0,0,0,2,4,components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConfiguration.java;components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java;components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java;,1,1
6629,Improvement,Resolved,Fixed,camel-jetty,Major,Pratyusha Ghosh,2013/08/13 08:01:13 +0100,2013/08/15 14:16:35 +0100,Claus Ibsen,2013/08/29 11:04:10 +0100,16.12704861,13.86637731,Add requestBufferSize and requestHeaderSize options for jetty,Add requestBufferSize and requestHeaderSize options for jetty server to allow configuration of allowable request header limitThis option is exposed by standalone jetty server but not exposed by camel-jetty.,2.10.4; 2.11.1,2.11.2; 2.12.0,0,2,28,1,10,2,0,1,0,0,0,0,1,1,components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java;,0,0
6639,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2013/08/15 10:51:54 +0100,2013/08/15 10:51:54 +0100,Claus Ibsen,2013/08/15 11:15:53 +0100,0.016655093,0.016655093,SimpleLanguage.simple should detect if its a predicate and use that instead,When using predicates with the simple language static methods  then ppl should use the correct method. We should improve the javadoc  and as well add methods for easy to create predicates.See nabblehttp://camel.465427.n5.nabble.com/How-to-check-that-a-file-is-empty-tp5737256.html,2.11.0,2.11.2; 2.12.0,0,1,35,1,0,0,0,0,0,0,0,0,1,3,camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/main/java/org/apache/camel/util/PredicateToExpressionAdapter.java;camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java;,0,0
6641,Bug,Resolved,Fixed,camel-sjms,Minor,Nigel Longton,2013/08/15 16:19:26 +0100,2013/08/15 22:41:06 +0100,Christian M?ller,2013/08/15 22:54:08 +0100,0.274097222,0.009050926,SJMS component throws class cast error when used with IBM Webshpere MQ,When using the IBM MQ JMS classes and pub/sub over a TOPIC the JmsObjectFactory.createMessageConsumer method throws a cast class exception. The session is being cast to a TopicSession which for MQ it is not.Using pure jms this cast is not required as the session class is aware of the destination type.,2.11.1,2.11.2; 2.12.0,0,2,51,2,2,2,0,0,0,0,0,0,1,1,components/camel-sjms/src/main/java/org/apache/camel/component/sjms/jms/JmsObjectFactory.java;,0,0
6671,Improvement,Resolved,Fixed,camel-ftp,Major,Claus Ibsen,2013/08/27 07:34:41 +0100,2013/08/27 07:34:41 +0100,Claus Ibsen,2013/09/05 12:01:15 +0100,9.185115741,9.185115741,FTP consumer - Add option to not use LIST command,If you want to download a single file  and you know the absolute name of the file  then you should be able to download the file  without using any LIST commands. As some use-cases have permissions disabled for this  so you can only download that file only.The ftp/sftp consumers should have an option to ?useList=false  so they do not use the list command.,2.12.0,2.12.1; 2.13.0,0,1,63,1,3,1,0,0,0,0,0,0,2,10,camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpUseListFalseTest.java;components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerTemplateUseListFalseTest.java;camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java;components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileEndpoint.java;,0,0
6674,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/08/28 13:49:02 +0100,2013/08/28 13:49:02 +0100,Claus Ibsen,2013/08/29 07:30:33 +0100,0.737164352,0.737164352,Add allowNull option to @Converter to allow type converters to return null as valid response for special use-cases,See nabblehttp://camel.465427.n5.nabble.com/Xpath-parameter-binding-NodeList-vs-Node-tp5738067.htmlThis avoids the situation with the NodeList -&gt; Node converter that may return null the 1st time  and then its regarded as a misses for conversion in future attempts.Just be annotation the method from@Converterto:@Converter(allowNull = true)Should allow to fix this. As then the type converter registry knows that a null response is valid.,2.11.1,2.11.2; 2.12.0,0,1,57,1,0,0,0,0,0,0,0,0,1,20,camel-core/src/main/java/org/apache/camel/Converter.java;camel-core/src/main/java/org/apache/camel/FallbackConverter.java;camel-core/src/main/java/org/apache/camel/TypeConverter.java;camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java;camel-core/src/main/java/org/apache/camel/impl/converter/BaseTypeConverterRegistry.java;camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/InstanceMethodFallbackTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/InstanceMethodTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/LazyLoadingTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/PropertyEditorTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/StaticMethodFallbackTypeConverter.java;camel-core/src/main/java/org/apache/camel/impl/converter/StaticMethodTypeConverter.java;camel-core/src/main/java/org/apache/camel/support/TypeConverterSupport.java;camel-core/src/test/java/org/apache/camel/converter/jaxp/XmlConverterTest.java;camel-core/src/test/java/org/apache/camel/impl/TypeConverterAllowNullTest.java;components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java;components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerTypeConverter.java;components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java;components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMessageTypeTest.java;,0,0
6678,Improvement,Resolved,Fixed,camel-core; eip,Major,Christian Posta,2013/08/28 23:03:38 +0100,2013/09/17 10:54:57 +0100,Claus Ibsen,2013/09/17 11:00:21 +0100,19.49771991,0.00375,Throttler does not honor time slots after period expires,Camel's Throttler eip uses time slots to calc what tasks need to be delayed and which don't. The time slots don't take into account period elapse. See from this mailing list question:http://camel.465427.n5.nabble.com/Camel-Throttler-not-throttling-as-expected-td5738158.htmlI can recreate  and working on a patch.,2.11.1,2.11.2; 2.12.1; 2.13.0,0,3,42,1,2,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/processor/Throttler.java;camel-core/src/test/java/org/apache/camel/processor/ThrottlerTest.java;,0,0
6680,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/08/29 07:58:46 +0100,2013/08/29 07:58:46 +0100,Claus Ibsen,2013/08/29 10:27:22 +0100,0.103194444,0.103194444,Simple language - Have singleton language for better performance,We can optimize the simple language using in eg bean ognl expressions and the likes.,2.11.0,2.11.2; 2.12.0,0,1,15,1,0,0,0,0,0,0,1,0,2,5,camel-core/src/main/java/org/apache/camel/builder/SimpleBuilder.java;camel-core/src/main/java/org/apache/camel/language/simple/FileLanguage.java;camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanOgnlPerformanceTest.java;components/camel-mvel/src/main/java/org/apache/camel/language/mvel/MvelExpression.java;,0,0
6683,Bug,Resolved,Fixed,,Major,Claus Ibsen,2013/08/29 14:29:50 +0100,2013/08/29 14:29:50 +0100,Claus Ibsen,2013/09/02 10:15:07 +0100,3.823113426,3.823113426,camel-dozer - Does not work well in OSGi Blueprint,Dozer doesnt work to well in OSGi. It seems to work with spring  but fails with OSGi blueprint.2013-08-29 14:44:51 302 | ERROR | l Console Thread | BlueprintContainerImpl | container.BlueprintContainerImpl 393 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Unable to start blueprint container for bundle blueorg.osgi.service.blueprint.container.ComponentDefinitionException: Error when instantiating bean dozerMapper of class class org.dozer.DozerBeanMapper at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:333)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[7:org.apache.aries.blueprint.core:1.1.0] at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_25] at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_25] at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:259)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:222)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.1.0] at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.1.0] at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.Felix.startBundle(Felix.java:1923)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.Felix.updateBundle(Felix.java:2235)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:962)[org.apache.felix.framework-4.0.3.jar:] at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:949)[org.apache.felix.framework-4.0.3.jar:] at org.apache.karaf.shell.osgi.UpdateBundle.doExecute(UpdateBundle.java:37)[43:org.apache.karaf.shell.osgi:2.3.2] at org.apache.karaf.shell.osgi.BundleCommand.doExecute(BundleCommand.java:42)[43:org.apache.karaf.shell.osgi:2.3.2] at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[14:org.apache.karaf.shell.console:2.3.2] at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[14:org.apache.karaf.shell.console:2.3.2] at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]Caused by: org.dozer.MappingException: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82) at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:38) at org.dozer.DozerInitializer.loadBeanType(DozerInitializer.java:115) at org.dozer.DozerInitializer.initialize(DozerInitializer.java:97) at org.dozer.DozerInitializer.init(DozerInitializer.java:74) at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173) at org.dozer.DozerBeanMapper.&lt;init&gt;(DozerBeanMapper.java:99) at org.dozer.DozerBeanMapper.&lt;init&gt;(DozerBeanMapper.java:94) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_25] at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_25] at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_25] at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_25] at org.apache.aries.blueprint.utils.ReflectionUtils.newInstance(ReflectionUtils.java:329)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.newInstance(BeanRecipe.java:962)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:331)[7:org.apache.aries.blueprint.core:1.1.0] ... 39 moreCaused by: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_25] at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_25] at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_25] at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_25] at java.lang.ClassLoader.loadClass(ClassLoader.java:424)[:1.7.0_25] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)[:1.7.0_25] at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.7.0_25] at java.lang.Class.forName0(Native Method)[:1.7.0_25] at java.lang.Class.forName(Class.java:270)[:1.7.0_25] at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:823) at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:889) at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:872) at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:36) ... 52 more,2.12.0,2.12.0,0,1,224,1,3,1,0,0,0,0,0,0,1,5,components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/CamelToDozerClassResolverAdapter.java;components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerBeanMapperConfiguration.java;components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerTypeConverterLoader.java;components/camel-dozer/src/test/java/org/apache/camel/converter/dozer/SpringDozerTypeConverterConfigurationTest.java;components/camel-dozer/src/test/resources/SpringDozerTypeConverterConfigurationTest.xml;,1,1
6687,Bug,Resolved,Fixed,bean-integration; camel-core,Major,Anton Koscejev,2013/08/30 12:50:31 +0100,2013/09/01 09:08:13 +0100,Claus Ibsen,2013/09/01 10:15:00 +0100,1.892002315,0.046377315,Using simple language OGNL expressions doesn't work for Bean Binding when a field is null,The following functionality doesn't work  when one of the fields is null: http://camel.apache.org/bean-binding.htmlYou can also use the OGNL support of the Simple expression language. Now suppose the message body is an object which has a method named asXml. To invoke the asXml method we can do as follows:.bean(OrderService.class  'doSomething(${body.asXml}  ${header.high})')Instead of using .bean as shown in the examples above  you may want to use .to instead as shown:.to('bean:orderService?method=doSomething(${body.asXml}  ${header.high})')A test case is provided. Instead of getting values of fields 'foo' and 'bar' respectively  the first parameter (which should be null) receives value of pojo.toString()  while the second parameter receives the correct value.,2.11.1,2.11.2; 2.12.0,0,2,121,1,2,2,0,0,0,0,0,0,1,2,camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanOgnlBodyMethodReturnNullValueTest.java;,0,0
6690,Bug,Resolved,Fixed,camel-cxf,Major,Willem Jiang,2013/08/31 02:38:34 +0100,2013/08/31 02:38:34 +0100,Willem Jiang,2013/09/16 16:37:32 +0100,16.58261574,16.58261574,Memory leak SoapOutInterceptor.writeSoapEnvelopeStart with security headers,When proxying the WS-Security request through camel route with CXF_MESSAGE data format  we will get the endless loop that eat up the memory.'qtp967241364-210' prio=10 tid=0x00007f1de4306800 nid=0x1c9f runnable [0x00007f1d8d451000] java.lang.Thread.State: RUNNABLE at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeCharacters(W3CDOMStreamWriter.java:292) at org.apache.cxf.staxutils.DelegatingXMLStreamWriter.writeCharacters(DelegatingXMLStreamWriter.java:91) at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:588) at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:564) at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:542) at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.writeSoapEnvelopeStart(SoapOutInterceptor.java:160) at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:81) at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:61) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262) - locked &lt;0x00000000e28af4a0&gt; (a org.apache.cxf.phase.PhaseInterceptorChain) at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:530) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:456) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) at org.apache.camel.processor.interceptor.HandleFaultInterceptor.process(HandleFaultInterceptor.java:41) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:81) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:93) - locked &lt;0x00000000e2533d18&gt; (a org.apache.cxf.transport.http_jetty.continuations.JettyContinuationWrapper) at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:72) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:107) - locked &lt;0x00000000e28af958&gt; (a org.apache.cxf.interceptor.ServiceInvokerInterceptor$2) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262) - locked &lt;0x00000000e26edb48&gt; (a org.apache.cxf.phase.PhaseInterceptorChain) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121) at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:236) at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214) at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:194) at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:130) at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:221) at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:141) at javax.servlet.http.HttpServlet.service(HttpServlet.java:713) at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:197) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.ops4j.pax.web.service.internal.HttpServiceStarted$1.invoke(HttpServiceStarted.java:182) at org.ops4j.pax.web.service.internal.$Proxy6.service(Unknown Source) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:447) at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:534) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1038) at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:117) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:374) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:972) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:75) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) at org.eclipse.jetty.server.Server.handle(Server.java:363) at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:483) at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:931) at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:992) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) at java.lang.Thread.run(Thread.java:724),2.10.6; 2.11.1,2.11.2; 2.12.1; 2.13.0,0,1,273,1,0,0,0,1,0,1,1,0,1,4,components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/CXFMessageDataFormatFeature.java;components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/CxfMessageSoapHeaderOutInterceptor.java;components/camel-cxf/src/test/java/org/apache/camel/component/cxf/wssecurity/camel/MyProcessor.java;components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wssecurity/camel/camel-context.xml;,2,2
6691,Bug,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/08/31 10:38:32 +0100,2013/08/31 11:19:56 +0100,Claus Ibsen,2013/08/31 11:57:11 +0100,0.054618056,0.025868056,seda - queue size compare should use equals,See nabblehttp://camel.465427.n5.nabble.com/Camel-2-11-1-SedaComponent-issues-with-Queue-size-tp5738258.html,2.11.1,2.11.2; 2.12.0,0,1,5,1,0,0,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java;,0,0
6695,Bug,Resolved,Fixed,,Minor,Achim Nierbeck,2013/09/02 07:51:51 +0100,2013/09/03 12:33:32 +0100,Claus Ibsen,2013/09/03 12:51:04 +0100,1.207789352,0.012175926,mbeansRegistered in DefaultManagementAgent isn't ThreadSafe,This is more or less a 'corner-case' I stumbled upon  thoughthe HashSet/HashMap (2.5/2.10 camel versions) in the DefaultManagementAgent containing the registered Mbean mbeansRegistered isn't Thread-Safe. This has been an issue for us while using the ProducerTemplate in a wrongful way  by instantiating the ProducerTemplate during every Route run. As this might be a common mistake by users I'd suggest to improve the mbeansRegistered by using a Synchronized Map.,2.10.6; 2.11.1,2.10.7; 2.11.2; 2.12.0,0,1,68,1,0,0,0,1,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java;,0,0
6697,Improvement,Resolved,Fixed,camel-blueprint; camel-test,Major,Claus Ibsen,2013/09/02 10:46:16 +0100,2013/09/02 10:46:16 +0100,Claus Ibsen,2013/09/02 11:33:42 +0100,0.032939815,0.032939815,camel-test-blueprint - Allow to register custom services in OSGi registry before Camel starts,If you have some services your Camel apps uses during testing  then its not easy to enlist them before CamelContext starts.We should allow people to enlist services from the unit test class  so they can enlist mock services / shared services that are mocked or what  so they can do their unit tests.,2.11.0,2.11.2; 2.12.0,0,1,53,1,1,1,0,0,0,0,0,0,1,4,components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/BlueprintAddServiceTest.java;components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/MyService.java;components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/BlueprintAddServiceTest.xml;,0,0
6700,Bug,Resolved,Fixed,camel-blueprint,Major,Claus Ibsen,2013/09/03 09:30:20 +0100,2013/09/03 09:30:20 +0100,Claus Ibsen,2013/09/03 11:18:38 +0100,0.075208333,0.075208333,camel-blueprint - Using  and referrring to SSLContextParameters with property placeholders can lead to CircularDependencyException,Configuring a blueprint xml file with &lt;endpoint id='myNettyServer' uri='netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;amp;sslContextParameters=#mySsl'/&gt;Can lead to ciruclar exceptionsCaused by: org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name='mySsl']  BeanRecipe[name='.camelBlueprint.factory.mySsl']  BeanRecipe[name='camel-4']  BeanRecipe[name='myNettyServer']  BeanRecipe[name='mySsl']] at org.apache.aries.blueprint.container.BlueprintRepository.push(BlueprintRepository.java:343)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:71)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:230)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:145)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:746)[7:org.apache.aries.blueprint.core:1.1.0] at org.apache.camel.blueprint.BlueprintContainerRegistry.lookupByNameAndType(BlueprintContainerRegistry.java:54) at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:52) ... 125 more,2.11.0,2.10.7; 2.11.2; 2.12.0,0,1,57,1,1,1,0,0,0,0,0,0,1,1,components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java;,0,0
6705,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2013/09/04 10:33:35 +0100,2013/09/04 10:33:35 +0100,Claus Ibsen,2013/09/04 11:13:59 +0100,0.028055556,0.028055556,DefaultStreamCachingStrategy - Check for enabled in shouldSpoolCache method,If stream caching is disabled then we should not spool to disk. This allows components and whatnot to safely use CachedOutputStream and not cause spool to disk  even if stream caching is disabled.,2.12.0,2.12.1; 2.13.0,0,1,33,1,0,0,0,0,0,0,0,0,1,1,camel-core/src/main/java/org/apache/camel/impl/DefaultStreamCachingStrategy.java;,0,0
6709,Bug,Resolved,Fixed,,Major,Jonathan Anstey,2013/09/05 14:58:28 +0100,2013/09/05 14:58:28 +0100,Jonathan Anstey,2013/09/05 15:03:46 +0100,0.003680556,0.003680556,camel-yammer - Endpoint yammer:current throwns JsonMappingException exception,Getting org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT tokenwhen trying to return the current user using yammer:current. Workaround is to just add ?useJson=true and do marshaling manually. Fixing on master shortly.,2.12.0,2.12.1,0,1,34,1,1,1,0,0,0,0,0,0,1,5,components/camel-yammer/src/main/java/org/apache/camel/component/yammer/YammerUserPollingConsumer.java;components/camel-yammer/src/test/java/org/apache/camel/component/yammer/YammerMessageAndUserRouteTest.java;components/camel-yammer/src/test/java/org/apache/camel/component/yammer/YammerUserPollEnrichRouteTest.java;components/camel-yammer/src/test/java/org/apache/camel/component/yammer/YammerUserRouteTest.java;components/camel-yammer/src/test/resources/user.json;,0,0
6714,Bug,Resolved,Fixed,,Major,Christian M?ller,2013/09/07 12:23:59 +0100,2013/09/07 12:23:59 +0100,Christian M?ller,2013/09/08 13:53:05 +0100,1.061875,1.061875,Installation of camel-stomp feature fails,Christians-MacBook-Pro:bin cmueller$ ./karaf clean __ __ ____ / //_/____ __________ _/ __/ /  &lt; / __ '/ ___/ __ '/ /_ / /| |/ /_/ / / / /_/ / __/ /_/ |_|/__ _/_/ /__ _/_/ Apache Karaf (2.3.2)Hit '&lt;tab&gt;' for a list of available commandsand '[cmd] --help' for help on a specific command.Hit '&lt;ctrl-d&gt;' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.karaf@root&gt; features:chooseurl camel 2.12.0adding feature url mvn:org.apache.camel.karaf/apache-camel/2.12.0/xml/featureskaraf@root&gt; features:install camel-stompError executing command: Could not start bundle mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/1.1.1 in feature(s) spring-jms-3.1.4.RELEASE  camel-spring-ws-2.12.0  spring-jms-3.2.3.RELEASE  spring-jms-3.0.7.RELEASE  camel-jms-2.12.0  camel-bam-2.12.0  camel-stomp-2.12.0  camel-sjms-2.12.0  camel-jpa-2.12.0: Unresolved constraint in bundle org.apache.geronimo.specs.geronimo-jms_1.1_spec [62]: Unable to resolve 62.0: missing requirement [62.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction.xa),2.12.0,2.12.1; 2.13.0,0,1,108,1,1,1,0,0,0,0,0,0,1,1,platforms/karaf/features/src/main/resources/features.xml;,0,0
6722,Improvement,Resolved,Fixed,camel-core,Minor,Claus Ibsen,2013/09/10 08:46:14 +0100,2013/09/10 08:46:14 +0100,Claus Ibsen,2013/09/10 10:09:58 +0100,0.058148148,0.058148148,binding component - Should start/stop its child services,We should ensure all the child services the binding component create is also started/stopped so they can do initialization logic.,2.11.1; 2.12.0,2.11.2; 2.12.1; 2.13.0,0,1,20,1,0,0,1,1,0,0,1,0,1,6,camel-core/src/main/java/org/apache/camel/component/binding/BindingComponent.java;camel-core/src/main/java/org/apache/camel/component/binding/BindingConsumerProcessor.java;camel-core/src/main/java/org/apache/camel/component/binding/BindingEndpoint.java;camel-core/src/main/java/org/apache/camel/component/binding/BindingNameComponent.java;camel-core/src/main/java/org/apache/camel/component/binding/BindingProducer.java;camel-core/src/main/java/org/apache/camel/processor/binding/DataFormatBinding.java;,0,0
6725,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/09/10 15:39:40 +0100,2013/09/10 15:39:40 +0100,Claus Ibsen,2013/09/10 16:17:05 +0100,0.025983796,0.025983796,Add cache option to beanRef and  in the DSL,Added cache option to beanRef and &lt;bean&gt; in the DSL. This avoids looking up the Bean from the Registry on each usage; this can safely be done for singleton beans.,2.12.0,2.12.1; 2.13.0,0,1,30,1,0,0,1,0,0,0,1,0,1,3,camel-core/src/main/java/org/apache/camel/model/BeanDefinition.java;camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java;camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodAmbiguousTest.java;,0,0
6726,Bug,Resolved,Fixed,,Minor,Tommaso Schiavinotto,2013/09/10 15:43:52 +0100,2013/09/11 23:29:43 +0100,Bilgin Ibryam,2013/09/12 10:42:35 +0100,1.790775463,0.467268519,Camel-Redis: Serializer passed through URI is used only on consumer,Please add camel-redis componentThe serializer passed through URI is used only on consumer and not on producer. Beside been unexpected and undocumented I think it can cause problems on interacting with the Redis DB if the same serializer is not used in both ways.You can find the example and discussion of this problem on this thread on the forum:http://camel.465427.n5.nabble.com/camel-redis-strings-serialization-td5738994.htmlI put as minor because from the discussion it looks like it is possible to have a workaround using a RedisTemplate.,2.11.1,2.11.2; 2.12.1; 2.13.0,0,1,82,1,0,0,1,0,0,0,0,0,1,1,components/camel-spring-redis/src/main/java/org/apache/camel/component/redis/RedisConfiguration.java;,0,0
6727,Bug,Resolved,Fixed,,Major,Franz Forsthofer,2013/09/11 06:09:30 +0100,2013/09/11 08:00:16 +0100,Willem Jiang,2013/09/13 08:10:25 +0100,2.083969907,2.007048611,XML Signature Component: Stream not closed in XmlSignerHelper.getXslTransform(String path),Component camel-xmlsecurity: InputStream is not closed after it is read in method XmlSignerHelper.getXslTransform(String path),2.12.0,2.12.1; 2.13.0,0,2,14,1,1,1,1,0,0,0,1,0,1,1,components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XmlSignatureHelper.java;,0,0
6729,Improvement,Resolved,Fixed,,Minor,Fried Hoeben,2013/09/11 15:17:56 +0100,2013/09/16 11:39:35 +0100,Claus Ibsen,2013/09/16 11:42:45 +0100,4.85056713,0.002199074,camel-jt400 - no longer able to configure a pollStrategy on Jt400DataQueueEndpoint,With camel 2.11.0 we were able to configure a pollStrategy in the URL of an endpoint consuming information from a data queue.After upgrading to 2.12.0 we get an exception during camel startup stating 'Unknown consumer parameters=[{pollStrategy=#jt400PollStrategy}]'. The application no longer starts.Downgrading to 2.11.0 allows the application to be started normally.The problem seems to originate from the fact that Camel (in DefaultPollingEndpoint.createConsumer()) creates a new DefaultScheduledPollConsumer  which gets the poll strategy (no problem). Then afterwards in Jt400DataQueueEndpoint.createPollingConsumer() a Jt400DataQueueConsumer is created and inside configureConsumer() normal flow is stopped because there is no pollStrategy property in a Jt400DataQueueConsumer  and there is an entry for this property in the endpoint's consumerProperties map.I suspect that the consumerProperty pollStrategy should be removed from the endpoint's consumerProperties after it has been set on the DefaultScheduledPollConsumer...,2.12.0,2.12.1; 2.13.0,0,2,129,1,5,2,1,0,0,0,0,1,1,3,camel-core/src/main/java/org/apache/camel/impl/ScheduledPollEndpoint.java;components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueEndpoint.java;components/camel-jt400/src/test/java/org/apache/camel/component/jt400/Jt400CustomPollStrategyTest.java;,0,0
6749,Improvement,Resolved,Fixed,,Major,Claus Ibsen,2013/09/15 09:26:40 +0100,2013/09/15 09:26:40 +0100,Claus Ibsen,2013/09/15 09:28:53 +0100,0.001539352,0.001539352,mustache component - Should use app class loader to load templates,It uses the TCCL to load the templates. We should use the App CL which then would allow to better load templates from OSGi.,2.12.0,2.12.1; 2.13.0,0,1,24,1,0,0,1,0,0,0,0,0,1,6,components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java;components/camel-amqp/src/test/resources/config.json;components/camel-amqp/src/test/resources/config.xml;components/camel-amqp/src/test/resources/log4j.xml;components/camel-mustache/src/main/java/org/apache/camel/component/mustache/MustacheEndpoint.java;parent/pom.xml;,0,0
6752,Bug,Resolved,Fixed,camel-core,Minor,Guy Burton,2013/09/15 20:02:04 +0100,2013/09/16 03:45:23 +0100,Willem Jiang,2013/09/16 08:37:38 +0100,0.524699074,0.202951389,Bean binding to covariant methods throws AmbiguousMethodCallException,Attached is a patch and test case for an issue in the bean binding code which prevents binding to an overloaded method with a covariant return type from the base class. The fix is to check for method covariance at the last moment before throwing AmbiguousMethodCallException. If all methods remaining are covariant  any one of them can be called. Unfortunately this happens in 3 places in the code- if we pre-filtered the list of methods then we could lose annotations on either of the method signature which could be problematic depending on the resolution type.,2.11.1,2.11.2; 2.12.1; 2.13.0,0,2,96,1,2,2,1,0,0,0,0,0,2,3,camel-core/src/test/java/org/apache/camel/component/bean/BeanOverloadedCovariantMethodTest.java;camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java;camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java;,0,0
6754,Improvement,Resolved,Fixed,camel-core,Minor,Alessandro Rontani,2013/09/15 22:00:53 +0100,2013/09/16 03:42:24 +0100,Willem Jiang,2013/09/16 08:36:31 +0100,0.441412037,0.204247685,UnitUtilsTest cant manage a locale different from US,When locale is set to a language different from english (for example italian)  the unit test in org.apache.camel.util.UnitUtilsTest fail  because in the italian locale the decimal separator is the comma  not the dot.The test compare the results of printUnitFromBytes to static strings formatted with the dot  and in an italian locale fails because it espects '1.0' and get instead '1 0'.I have patched the test code to make it works in every locale (building the expected results with the current locale decimal separator)  and i have attached the patch to this issue.,2.12.0,2.12.1; 2.13.0,0,2,91,1,2,2,1,0,0,0,0,0,1,1,camel-core/src/test/java/org/apache/camel/util/UnitUtilsTest.java;,0,0
6757,Bug,Resolved,Fixed,camel-jsch,Minor,Guy Burton,2013/09/16 17:37:37 +0100,2013/09/17 02:32:14 +0100,Willem Jiang,2013/09/17 08:47:00 +0100,0.631516204,0.26025463,scp task does not respect StrictHostKeyChecking option,The SCP component does not currently do anything with the StrictHostKeyChecking option  as documented. The attached patch fixes this (no test case I'm afraid).,2.11.1,2.11.2; 2.12.1; 2.13.0,0,2,24,1,2,1,1,0,0,0,0,0,1,2,components/camel-jsch/src/main/java/org/apache/camel/component/jsch/ScpConfiguration.java;components/camel-jsch/src/main/java/org/apache/camel/component/jsch/ScpOperations.java;,0,0
6758,Bug,Resolved,Fixed,camel-sjms,Minor,Marios Trivizas,2013/09/16 20:27:27 +0100,2013/09/16 21:04:42 +0100,Unassigned,2013/09/16 21:11:22 +0100,0.030497685,0.00462963,Null Pointer exception when removing SjmsComponent,NullPointer exception in SjmsComponent when trying to remove it from camel context:2013-09-16 11:51:54 201 &#91;WARN&#93; org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:388):org.apache.camel.spring.SpringCamelContext: Error stopping component org.apache.camel.component.sjms.SjmsComponent@232560ec. This exception will be ignored.java.lang.NullPointerException at org.apache.camel.component.sjms.SjmsComponent.doStop(SjmsComponent.java:143) at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102) at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:116) at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:1902) at org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:386),2.12.0,2.11.2; 2.12.1; 2.13.0,0,2,35,3,1,1,1,0,0,1,0,0,1,1,components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsComponent.java;,0,0
6762,Bug,Resolved,Fixed,camel-http,Major,Willem Jiang,2013/09/17 08:28:30 +0100,2013/09/17 08:28:30 +0100,Willem Jiang,2013/09/17 08:46:09 +0100,0.012256944,0.012256944,HttpConnectionManagerParams doesn't take effect when it is set to HttpComponent,Here is the user complain.It is caused by the patch of CAMEL-6296 which override the setting of HttpConnectionManagerParams.,2.12.0,2.12.1; 2.13.0,0,1,30,1,1,1,1,0,0,0,0,1,1,1,components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java;,0,0
6766,Improvement,Resolved,Fixed,camel-core,Major,Claus Ibsen,2013/09/18 15:34:28 +0100,2013/09/18 15:34:28 +0100,Claus Ibsen,2013/09/18 16:16:23 +0100,0.029108796,0.029108796,InterceptFrom - Add support for using property placeholders,InterceptFrom does not support property placeholders. We should add support for that.Seehttp://camel.465427.n5.nabble.com/Usage-of-property-placeholders-in-the-interceptFrom-String-method-calls-tp5739273.html,2.11.1; 2.12.0,2.11.2; 2.12.1; 2.13.0,0,1,15,1,0,0,1,1,0,0,0,0,1,5,camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java;camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java;camel-core/src/test/java/org/apache/camel/component/properties/PropertiesComponentInterceptFromTest.java;components/camel-spring/src/test/java/org/apache/camel/component/properties/SpringPropertiesComponentInterceptFromTest.java;components/camel-spring/src/test/resources/org/apache/camel/component/properties/SpringPropertiesComponentInterceptFromTest.xml;,0,0
6767,Bug,Resolved,Fixed,camel-rabbitmq,Major,Dan Revel,2013/09/18 20:21:24 +0100,2013/10/01 10:45:52 +0100,Claus Ibsen,2013/10/10 14:29:22 +0100,21.75553241,9.155208333,rabbitmq component sends basic ack after channel closed when endpoint is set to autoAck,Consuming from a rabbitmq endpoint uri that is configured to autoAck generates errors and fails.Example URI: rabbitmq://localhost:5672/test?autoAck=true&amp;queue=test&amp;autoDelete=false&amp;username=guest&amp;password=guestHere's the relevant log output:12:19:03.746 - osis-ht TRACE o.a.c.c.rabbitmq.RabbitMQConsumer - Acknowleding receipt &#91;delivery_tag=10&#93;12:19:03.747 - osis-ht WARN o.a.c.c.rabbitmq.RabbitMQConsumer - Error processing exchange. Exchange&#91;Message: WTF-9-1379531943713&#93;. Caused by: &#91;com.rabbitmq.client.AlreadyClosedException - clean connection shutdown; reason: Attempt to use closed channel&#93;com.rabbitmq.client.AlreadyClosedException: clean connection shutdown; reason: Attempt to use closed channel at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:190) ~&#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:291) ~&#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:285) ~&#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:907) ~&#91;amqp-client-3.1.3.jar:na&#93; at org.apache.camel.component.rabbitmq.RabbitMQConsumer$RabbitConsumer.handleDelivery(RabbitMQConsumer.java:126) ~&#91;camel-rabbitmq-2.12.0.jar:2.12.0&#93; at com.rabbitmq.client.impl.ConsumerDispatcher$4.run(ConsumerDispatcher.java:121) &#91;amqp-client-3.1.3.jar:na&#93; at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:76) &#91;amqp-client-3.1.3.jar:na&#93; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) &#91;na:1.7.0_21&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) &#91;na:1.7.0_21&#93; at java.lang.Thread.run(Thread.java:722) &#91;na:1.7.0_21&#93;,2.12.0,2.12.2; 2.13.0,0,3,104,1,6,3,0,0,0,0,0,0,1,1,components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java;,0,0
